//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.910.0 using the following command:
// xscgen ../NeTEx-light/NeTEx_publication_reduced.xsd -o .
namespace Netex
{
    
    
    /// <summary>
    /// <para>Type for Info LinK.</para>
    /// <para>A hyperlink to an external web resource.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for Info LinK.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("InfoLinkStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("InfoLink", Namespace="http://www.netex.org.uk/netex")]
    public partial class InfoLinkStructure
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _typeOfInfoLink;
        
        [System.Xml.Serialization.XmlAttributeAttribute("typeOfInfoLink")]
        public System.Collections.ObjectModel.Collection<string> TypeOfInfoLink
        {
            get
            {
                return _typeOfInfoLink;
            }
            private set
            {
                _typeOfInfoLink = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TypeOfInfoLink collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeOfInfoLinkSpecified
        {
            get
            {
                return (this.TypeOfInfoLink.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="InfoLinkStructure" /> class.</para>
        /// </summary>
        public InfoLinkStructure()
        {
            this._typeOfInfoLink = new System.Collections.ObjectModel.Collection<string>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AccessSpaceRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("AccessSpaceRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class AccessSpaceRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        string NameOfRefClass
        {
            get;
            set;
        }
        
        System.DateTime Created
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        System.DateTime Changed
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        string Version
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        ModificationEnumeration Modification
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        string VersionRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        string Ref
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Classification of modification as addition, deletion or revision. Enumerated value.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Classification of modification as addition, deletion or revision. Enumerated valu" +
        "e.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ModificationEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum ModificationEnumeration
    {
        
        /// <summary>
        /// <para>This is a definition of a new entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("This is a definition of a new entity.")]
        [System.Xml.Serialization.XmlEnumAttribute("new")]
        New,
        
        /// <summary>
        /// <para>This is a revision to an existing entity. All values are replaced.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("This is a revision to an existing entity. All values are replaced.")]
        [System.Xml.Serialization.XmlEnumAttribute("revise")]
        Revise,
        
        /// <summary>
        /// <para>Not in EPIP.                            This is a deletion of an existing entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. This is a deletion of an existing entity.")]
        [System.Xml.Serialization.XmlEnumAttribute("delete")]
        Delete,
        
        /// <summary>
        /// <para>This is a repeat of the values to an entity that has not change since the previous version. All values are replaced.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("This is a repeat of the values to an entity that has not change since the previou" +
            "s version. All values are replaced.")]
        [System.Xml.Serialization.XmlEnumAttribute("unchanged")]
        Unchanged,
        
        /// <summary>
        /// <para>Not in EPIP.                            This is just the changes to a previous version of an entity. Optional values are only provided if they have changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. This is just the changes to a previous version of an entity. Optiona" +
            "l values are only provided if they have changed.")]
        [System.Xml.Serialization.XmlEnumAttribute("delta")]
        Delta,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AccessVehicleEquipmentStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("AccessVehicleEquipment", Namespace="http://www.netex.org.uk/netex")]
    public partial class AccessVehicleEquipmentStructure : IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlElementAttribute("EquipmentRef")]
        public EquipmentRefStructure EquipmentRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("LowFloor")]
        public bool LowFloor { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LowFloor property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LowFloorSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Hoist")]
        public bool Hoist { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Hoist property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HoistSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Ramp")]
        public bool Ramp { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Ramp property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RampSpecified { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("EquipmentRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("EquipmentRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class EquipmentRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IEntityAttributeGroup
    {
        
        string NameOfClass
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        string Id
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        string DataSourceRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        System.DateTime Created
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        System.DateTime Changed
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        ModificationEnumeration Modification
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        string Version
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        StatusEnumeration Status
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        string DerivedFromVersionRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        string CompatibleWithVersionFrameVersionRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        string DerivedFromObjectRef
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Indicates whether the ENTITY this annotates is available for use. Use of this attribute allows entities to be retired without deleting the details from the dataset.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Indicates whether the ENTITY this annotates is available for use. Use of this att" +
        "ribute allows entities to be retired without deleting the details from the datas" +
        "et.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("StatusEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum StatusEnumeration
    {
        
        /// <summary>
        /// <para>Entity is active.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Entity is active.")]
        [System.Xml.Serialization.XmlEnumAttribute("active")]
        Active,
        
        /// <summary>
        /// <para>Not in EPIP.              Entity is inactive. Not allowed in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Entity is inactive. Not allowed in EPIP.")]
        [System.Xml.Serialization.XmlEnumAttribute("inactive")]
        Inactive,
        
        /// <summary>
        /// <para>Not in EPIP.              Entity is still active but is in the process of being made inactive. Not allowed in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Entity is still active but is in the process of being made inactive." +
            " Not allowed in EPIP.")]
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Accommodation_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Accommodation", Namespace="http://www.netex.org.uk/netex")]
    public partial class AccommodationVersionStructure : IEntityInVersionElementGroup, IAccommodationGroup, IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="AccommodationVersionStructure" /> class.</para>
        /// </summary>
        public AccommodationVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._nuisanceFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._passengerCommsFacilityList = new System.Collections.ObjectModel.Collection<string>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.                Name of Accommodation _v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Name of Accommodation _v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Fare class of ACCOMMODATION.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Fare class of ACCOMMODATION.")]
        [System.Xml.Serialization.XmlElementAttribute("FareClass")]
        public FareClassEnumeration FareClass { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FareClass property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FareClassSpecified { get; set; }
        
        /// <summary>
        /// <para>Type of ACCOMMODATION. . Default is seating.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type of ACCOMMODATION. . Default is seating.")]
        [System.Xml.Serialization.XmlElementAttribute("AccommodationFacility")]
        public AccommodationFacilityEnumeration AccommodationFacility { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AccommodationFacility property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccommodationFacilitySpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.                Type of Couchette.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Type of Couchette.")]
        [System.Xml.Serialization.XmlElementAttribute("CouchetteFacility")]
        public CouchetteFacilityEnumeration CouchetteFacility { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CouchetteFacility property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CouchetteFacilitySpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("MaximumNumberOfBerths")]
        public string MaximumNumberOfBerths { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.                Classification of BERTH FACILITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Classification of BERTH FACILITY.")]
        [System.Xml.Serialization.XmlElementAttribute("BerthFacility")]
        public BerthFacilityEnumeration BerthFacility { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BerthFacility property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BerthFacilitySpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("ShowerFacility")]
        public SanitaryFacilityEnumeration ShowerFacility { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShowerFacility property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ShowerFacilitySpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.                Toilet facilities for ACCOMMODATION.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Toilet facilities for ACCOMMODATION.")]
        [System.Xml.Serialization.XmlElementAttribute("ToiletFacility")]
        public SanitaryFacilityEnumeration ToiletFacility { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ToiletFacility property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ToiletFacilitySpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.                Classification GENDER LIMITATION.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Classification GENDER LIMITATION.")]
        [System.Xml.Serialization.XmlElementAttribute("GenderLimitation")]
        public GenderLimitationEnumeration GenderLimitation { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GenderLimitation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GenderLimitationSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _nuisanceFacilityList;
        
        /// <summary>
        /// <para>List of values for NUISANCE FACILITY.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("NuisanceFacilityList")]
        public System.Collections.ObjectModel.Collection<string> NuisanceFacilityList
        {
            get
            {
                return _nuisanceFacilityList;
            }
            private set
            {
                _nuisanceFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the NuisanceFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NuisanceFacilityListSpecified
        {
            get
            {
                return (this.NuisanceFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _passengerCommsFacilityList;
        
        /// <summary>
        /// <para>List of values for PASSENGER COMMS FACILITies.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("PassengerCommsFacilityList")]
        public System.Collections.ObjectModel.Collection<string> PassengerCommsFacilityList
        {
            get
            {
                return _passengerCommsFacilityList;
            }
            private set
            {
                _passengerCommsFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PassengerCommsFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PassengerCommsFacilityListSpecified
        {
            get
            {
                return (this.PassengerCommsFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IEntityInVersionElementGroup
    {
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get;
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        ValidityConditionsStructure ValidityConditions
        {
            get;
            set;
        }
        
        AlternativeTextsStructure AlternativeTexts
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ValidBetween_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ValidBetween", Namespace="http://www.netex.org.uk/netex")]
    public partial class ValidBetweenVersionStructure : IOptionalIdDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlElementAttribute("FromDate", DataType="dateTime")]
        public System.DateTime FromDate { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FromDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FromDateSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ToDate", DataType="dateTime")]
        public System.DateTime ToDate { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ToDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ToDateSpecified { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that this attribute group is used when id is NOT a MANDATORY attribute in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that this attribute group is used when id is NOT a MANDATORY attribute in EP" +
            "IP.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IOptionalIdDataManagedObjectAttributeGroup
    {
        
        string NameOfClass
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Note that this attribute group is used when id is NOT a MANDATORY attribute in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that this attribute group is used when id is NOT a MANDATORY attribute in EP" +
            "IP.")]
        string Id
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        string DataSourceRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        System.DateTime Created
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        System.DateTime Changed
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        ModificationEnumeration Modification
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        string Version
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        StatusEnumeration Status
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        string DerivedFromVersionRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        string CompatibleWithVersionFrameVersionRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        string DerivedFromObjectRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        string ResponsibilitySetRef
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("validityConditionsStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("validityConditions", Namespace="http://www.netex.org.uk/netex")]
    public partial class ValidityConditionsStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<AvailabilityConditionRefStructure> _availabilityConditionRef;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("AvailabilityConditionRef")]
        public System.Collections.ObjectModel.Collection<AvailabilityConditionRefStructure> AvailabilityConditionRef
        {
            get
            {
                return _availabilityConditionRef;
            }
            private set
            {
                _availabilityConditionRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AvailabilityConditionRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AvailabilityConditionRefSpecified
        {
            get
            {
                return (this.AvailabilityConditionRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ValidityConditionsStructure" /> class.</para>
        /// </summary>
        public ValidityConditionsStructure()
        {
            this._availabilityConditionRef = new System.Collections.ObjectModel.Collection<AvailabilityConditionRefStructure>();
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._availabilityCondition = new System.Collections.ObjectModel.Collection<AvailabilityConditionStructure>();
            this._validityCondition = new System.Collections.ObjectModel.Collection<ValidityConditionVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<AvailabilityConditionStructure> _availabilityCondition;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("AvailabilityCondition")]
        public System.Collections.ObjectModel.Collection<AvailabilityConditionStructure> AvailabilityCondition
        {
            get
            {
                return _availabilityCondition;
            }
            private set
            {
                _availabilityCondition = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AvailabilityCondition collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AvailabilityConditionSpecified
        {
            get
            {
                return (this.AvailabilityCondition.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidityConditionVersionStructure> _validityCondition;
        
        /// <summary>
        /// <para>Only allowed to be used in EPIP as a simple name. One special case is to use this to explain why the accessibility is only partial in an ACCESSIBILTY ASSESSMENT having a partial LIMITATION STATUS.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Only allowed to be used in EPIP as a simple name. One special case is to use this" +
            " to explain why the accessibility is only partial in an ACCESSIBILTY ASSESSMENT " +
            "having a partial LIMITATION STATUS.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidityCondition")]
        public System.Collections.ObjectModel.Collection<ValidityConditionVersionStructure> ValidityCondition
        {
            get
            {
                return _validityCondition;
            }
            private set
            {
                _validityCondition = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidityCondition collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidityConditionSpecified
        {
            get
            {
                return (this.ValidityCondition.Count != 0);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AvailabilityConditionRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("AvailabilityConditionRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class AvailabilityConditionRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AvailabilityConditionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("AvailabilityCondition", Namespace="http://www.netex.org.uk/netex")]
    public partial class AvailabilityConditionStructure : IEntityAttributeGroup
    {
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("FromDate", DataType="dateTime")]
        public System.DateTime FromDate { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FromDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FromDateSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("ToDate", DataType="dateTime")]
        public System.DateTime ToDate { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ToDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ToDateSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. Whether condition makes resource available or not available. Default is available.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether condition makes resource available or not available. Default" +
            " is available.")]
        [System.Xml.Serialization.XmlElementAttribute("IsAvailable")]
        public bool IsAvailable { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IsAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsAvailableSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. DAY TYPEs for AVAILABILITY CONDITION.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. DAY TYPEs for AVAILABILITY CONDITION.")]
        [System.Xml.Serialization.XmlElementAttribute("dayTypes")]
        public DayTypesStructure DayTypes { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. For UIC style encoding of day types String of bits, one for each day in period: whether valid or not valid on the day.  Normally there will be a bit for every day between start and end date.  If bit is missing, assume available.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. For UIC style encoding of day types String of bits, one for each day" +
            " in period: whether valid or not valid on the day. Normally there will be a bit " +
            "for every day between start and end date. If bit is missing, assume available.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidDayBits")]
        public string ValidDayBits { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("timebands")]
        public TimebandsRelStructure Timebands { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. OPERATING DAYs for AVAILABILITY CONDITION.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. OPERATING DAYs for AVAILABILITY CONDITION.")]
        [System.Xml.Serialization.XmlElementAttribute("operatingDays")]
        public OperatingDaysRelStructure OperatingDays { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MultilingualString", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Description))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LegalName))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Name))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ShortName))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Text))]
    public partial class MultilingualString
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Language of string contents.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Language of string contents.")]
        [System.Xml.Serialization.XmlAttributeAttribute("lang")]
        public string Lang { get; set; }
        
        /// <summary>
        /// <para>Resource id of string.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Resource id of string.")]
        [System.Xml.Serialization.XmlAttributeAttribute("textIdType")]
        public string TextIdType { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("dayTypesStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("dayTypes", Namespace="http://www.netex.org.uk/netex")]
    public partial class DayTypesStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DayTypeStructure> _dayType;
        
        [System.Xml.Serialization.XmlElementAttribute("DayType")]
        public System.Collections.ObjectModel.Collection<DayTypeStructure> DayType
        {
            get
            {
                return _dayType;
            }
            private set
            {
                _dayType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DayType collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DayTypeSpecified
        {
            get
            {
                return (this.DayType.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DayTypesStructure" /> class.</para>
        /// </summary>
        public DayTypesStructure()
        {
            this._dayType = new System.Collections.ObjectModel.Collection<DayTypeStructure>();
            this._dayTypeRef = new System.Collections.ObjectModel.Collection<DayTypeRefStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DayTypeRefStructure> _dayTypeRef;
        
        [System.Xml.Serialization.XmlElementAttribute("DayTypeRef")]
        public System.Collections.ObjectModel.Collection<DayTypeRefStructure> DayTypeRef
        {
            get
            {
                return _dayTypeRef;
            }
            private set
            {
                _dayTypeRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DayTypeRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DayTypeRefSpecified
        {
            get
            {
                return (this.DayTypeRef.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// <para>A type of day characterized by one or more properties which affect public transport operation. For example: weekday in school holidays.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A type of day characterized by one or more properties which affect public transpo" +
        "rt operation. For example: weekday in school holidays.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DayTypeStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("DayType", Namespace="http://www.netex.org.uk/netex")]
    public partial class DayTypeStructure : IDaySpanGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public ValidBetweenVersionStructure ValidBetween { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DayTypeStructure" /> class.</para>
        /// </summary>
        public DayTypeStructure()
        {
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._properties = new System.Collections.ObjectModel.Collection<PropertyOfDayStructure>();
            this._timebands = new System.Collections.ObjectModel.Collection<TimebandVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Earliest time that day starts.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Earliest time that day starts.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("EarliestTime")]
        public string EarliestTime { get; set; }
        
        /// <summary>
        /// <para>Length of day. Used to work out Latest time that day runs to.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Length of day. Used to work out Latest time that day runs to.")]
        [System.Xml.Serialization.XmlElementAttribute("DayLength")]
        public string DayLength { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PropertyOfDayStructure> _properties;
        
        /// <summary>
        /// <para>Properties of the DAY TYPE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Properties of the DAY TYPE.")]
        [System.Xml.Serialization.XmlArrayAttribute("properties")]
        [System.Xml.Serialization.XmlArrayItemAttribute("PropertyOfDay", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<PropertyOfDayStructure> Properties
        {
            get
            {
                return _properties;
            }
            private set
            {
                _properties = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Properties collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PropertiesSpecified
        {
            get
            {
                return (this.Properties.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TimebandVersionStructure> _timebands;
        
        [System.Xml.Serialization.XmlArrayAttribute("timebands")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Timeband", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<TimebandVersionStructure> Timebands
        {
            get
            {
                return _timebands;
            }
            private set
            {
                _timebands = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Timebands collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimebandsSpecified
        {
            get
            {
                return (this.Timebands.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Elements for a Day Time Range.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for a Day Time Range.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IDaySpanGroup
    {
        
        /// <summary>
        /// <para>Earliest time that day starts.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Earliest time that day starts.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        string EarliestTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Length of day. Used to work out Latest time that day runs to.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Length of day. Used to work out Latest time that day runs to.")]
        string DayLength
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Additional Translations of text  elements.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Additional Translations of text elements.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("alternativeTextsStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("alternativeTexts", Namespace="http://www.netex.org.uk/netex")]
    public partial class AlternativeTextsStructure
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("AlternativeText")]
        public AlternativeTextStructure AlternativeText { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AlternativeTextStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("AlternativeText", Namespace="http://www.netex.org.uk/netex")]
    public partial class AlternativeTextStructure
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Text")]
        public MultilingualString Text { get; set; }
        
        /// <summary>
        /// <para>Name of text attribute for which this is the alternative text. Must be an existing attribute name</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of text attribute for which this is the alternative text. Must be an existin" +
            "g attribute name")]
        [System.Xml.Serialization.XmlAttributeAttribute("attributeName")]
        public string AttributeName { get; set; }
        
        /// <summary>
        /// <para>Name of language for which this is to be used.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of language for which this is to be used.")]
        [System.Xml.Serialization.XmlAttributeAttribute("useForLanguage")]
        public string UseForLanguage { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public string Order { get; set; }
    }
    
    /// <summary>
    /// <para>A list of alternative Key values for an element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A list of alternative Key values for an element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("keyListStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("keyList", Namespace="http://www.netex.org.uk/netex")]
    public partial class KeyListStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyValue;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("KeyValue")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyValue
        {
            get
            {
                return _keyValue;
            }
            private set
            {
                _keyValue = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="KeyListStructure" /> class.</para>
        /// </summary>
        public KeyListStructure()
        {
            this._keyValue = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("KeyValueStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
    public partial class KeyValueStructure
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Key")]
        public string Key { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Value")]
        public string Value { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("typeOfKey")]
        public string TypeOfKey { get; set; }
    }
    
    /// <summary>
    /// <para>Reference to a BRANDING.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Reference to a BRANDING.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BrandingRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("BrandingRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class BrandingRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DayTypeStructureProperties", Namespace="http://www.netex.org.uk/netex", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DayTypeStructureProperties
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PropertyOfDayStructure> _propertyOfDay;
        
        /// <summary>
        /// <para>A property which a day may possess, such as school holiday, weekday, summer, winter etc.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A property which a day may possess, such as school holiday, weekday, summer, wint" +
            "er etc.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("PropertyOfDay")]
        public System.Collections.ObjectModel.Collection<PropertyOfDayStructure> PropertyOfDay
        {
            get
            {
                return _propertyOfDay;
            }
            private set
            {
                _propertyOfDay = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DayTypeStructureProperties" /> class.</para>
        /// </summary>
        public DayTypeStructureProperties()
        {
            this._propertyOfDay = new System.Collections.ObjectModel.Collection<PropertyOfDayStructure>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PropertyOfDayStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("PropertyOfDay", Namespace="http://www.netex.org.uk/netex")]
    public partial class PropertyOfDayStructure : IPropertyOfDayGroup
    {
        
        /// <summary>
        /// <para>Name of PROPERTY OF DAY</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of PROPERTY OF DAY")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Description of PROPERTY OF DAY</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of PROPERTY OF DAY")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _daysOfWeek;
        
        /// <summary>
        /// <para>Days of week Monday to Sunday, Everyday. Up to seven allowed. Default is Everyday.</para>
        /// <para>Allowed values for List of Days of the Week.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Days of week Monday to Sunday, Everyday. Up to seven allowed. Default is Everyday" +
            ".")]
        [System.Xml.Serialization.XmlElementAttribute("DaysOfWeek")]
        public System.Collections.ObjectModel.Collection<string> DaysOfWeek
        {
            get
            {
                return _daysOfWeek;
            }
            private set
            {
                _daysOfWeek = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DaysOfWeek collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DaysOfWeekSpecified
        {
            get
            {
                return (this.DaysOfWeek.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PropertyOfDayStructure" /> class.</para>
        /// </summary>
        public PropertyOfDayStructure()
        {
            this._daysOfWeek = new System.Collections.ObjectModel.Collection<string>();
            this._weeksOfMonth = new System.Collections.ObjectModel.Collection<string>();
            this._holidayTypes = new System.Collections.ObjectModel.Collection<string>();
            this._seasons = new System.Collections.ObjectModel.Collection<string>();
            this._tides = new System.Collections.ObjectModel.Collection<string>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _weeksOfMonth;
        
        /// <summary>
        /// <para>Week of Month. (Default is EveryWeek)</para>
        /// <para>Allowed values for List of Weeks of the month.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Week of Month. (Default is EveryWeek)")]
        [System.Xml.Serialization.XmlElementAttribute("WeeksOfMonth")]
        public System.Collections.ObjectModel.Collection<string> WeeksOfMonth
        {
            get
            {
                return _weeksOfMonth;
            }
            private set
            {
                _weeksOfMonth = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the WeeksOfMonth collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WeeksOfMonthSpecified
        {
            get
            {
                return (this.WeeksOfMonth.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>For those day types that occur on the same month every year; a  month as a number.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("For those day types that occur on the same month every year; a month as a number." +
            "")]
        [System.Xml.Serialization.XmlElementAttribute("MonthOfYear")]
        public string MonthOfYear { get; set; }
        
        /// <summary>
        /// <para>For those day types that occur on the same day of the month every year; a  a as a number.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("For those day types that occur on the same day of the month every year; a a as a " +
            "number.")]
        [System.Xml.Serialization.XmlElementAttribute("DayOfMonth")]
        public string DayOfMonth { get; set; }
        
        /// <summary>
        /// <para>For those day types that occur on the same day every year, month and day,</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("For those day types that occur on the same day every year, month and day,")]
        [System.Xml.Serialization.XmlElementAttribute("DayOfYear")]
        public string DayOfYear { get; set; }
        
        /// <summary>
        /// <para>Reference to COUNTRY for Holiday.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to COUNTRY for Holiday.")]
        [System.Xml.Serialization.XmlElementAttribute("CountryRef")]
        public CountryRefStructure CountryRef { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _holidayTypes;
        
        /// <summary>
        /// <para>Type of holiday. Default is Any day.</para>
        /// <para>Allowed values for Weeks of the month.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type of holiday. Default is Any day.")]
        [System.Xml.Serialization.XmlElementAttribute("HolidayTypes")]
        public System.Collections.ObjectModel.Collection<string> HolidayTypes
        {
            get
            {
                return _holidayTypes;
            }
            private set
            {
                _holidayTypes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the HolidayTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HolidayTypesSpecified
        {
            get
            {
                return (this.HolidayTypes.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _seasons;
        
        /// <summary>
        /// <para>Seasons (Default is Perennially)</para>
        /// <para>Allowed values for List of Seasons.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Seasons (Default is Perennially)")]
        [System.Xml.Serialization.XmlElementAttribute("Seasons")]
        public System.Collections.ObjectModel.Collection<string> Seasons
        {
            get
            {
                return _seasons;
            }
            private set
            {
                _seasons = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Seasons collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SeasonsSpecified
        {
            get
            {
                return (this.Seasons.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _tides;
        
        /// <summary>
        /// <para>Not in EPIP. Tides. Default is All Tides.                                               Not in EPIP.</para>
        /// <para>Allowed values for List of Tides.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Tides. Default is All Tides. Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("Tides")]
        public System.Collections.ObjectModel.Collection<string> Tides
        {
            get
            {
                return _tides;
            }
            private set
            {
                _tides = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Tides collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TidesSpecified
        {
            get
            {
                return (this.Tides.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP. Events happening on day.                                               Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Events happening on day. Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("DayEvent")]
        public DayEventEnumeration DayEvent { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DayEvent property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DayEventSpecified { get; set; }
        
        /// <summary>
        /// <para>Relative busyness of day.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Relative busyness of day.")]
        [System.Xml.Serialization.XmlElementAttribute("Crowding")]
        public CrowdingEnumeration Crowding { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Crowding property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CrowdingSpecified { get; set; }
    }
    
    /// <summary>
    /// <para>Properties of Day. Logically ANDed Together.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Properties of Day. Logically ANDed Together.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IPropertyOfDayGroup
    {
        
        /// <summary>
        /// <para>Days of week Monday to Sunday, Everyday. Up to seven allowed. Default is Everyday.</para>
        /// <para>Allowed values for List of Days of the Week.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Days of week Monday to Sunday, Everyday. Up to seven allowed. Default is Everyday" +
            ".")]
        System.Collections.ObjectModel.Collection<string> DaysOfWeek
        {
            get;
        }
        
        /// <summary>
        /// <para>Week of Month. (Default is EveryWeek)</para>
        /// <para>Allowed values for List of Weeks of the month.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("EveryWeek")]
        [System.ComponentModel.DescriptionAttribute("Week of Month. (Default is EveryWeek)")]
        System.Collections.ObjectModel.Collection<string> WeeksOfMonth
        {
            get;
        }
        
        /// <summary>
        /// <para>For those day types that occur on the same month every year; a  month as a number.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("For those day types that occur on the same month every year; a month as a number." +
            "")]
        string MonthOfYear
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>For those day types that occur on the same day of the month every year; a  a as a number.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("For those day types that occur on the same day of the month every year; a a as a " +
            "number.")]
        string DayOfMonth
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>For those day types that occur on the same day every year, month and day,</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("For those day types that occur on the same day every year, month and day,")]
        string DayOfYear
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Reference to COUNTRY for Holiday.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to COUNTRY for Holiday.")]
        CountryRefStructure CountryRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Type of holiday. Default is Any day.</para>
        /// <para>Allowed values for Weeks of the month.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("AnyDay")]
        [System.ComponentModel.DescriptionAttribute("Type of holiday. Default is Any day.")]
        System.Collections.ObjectModel.Collection<string> HolidayTypes
        {
            get;
        }
        
        /// <summary>
        /// <para>Seasons (Default is Perennially)</para>
        /// <para>Allowed values for List of Seasons.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("Perennially")]
        [System.ComponentModel.DescriptionAttribute("Seasons (Default is Perennially)")]
        System.Collections.ObjectModel.Collection<string> Seasons
        {
            get;
        }
        
        /// <summary>
        /// <para>Not in EPIP. Tides. Default is All Tides.                                               Not in EPIP.</para>
        /// <para>Allowed values for List of Tides.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("AllTides")]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Tides. Default is All Tides. Not in EPIP.")]
        System.Collections.ObjectModel.Collection<string> Tides
        {
            get;
        }
        
        /// <summary>
        /// <para>Not in EPIP. Events happening on day.                                               Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Events happening on day. Not in EPIP.")]
        DayEventEnumeration DayEvent
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Relative busyness of day.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Relative busyness of day.")]
        CrowdingEnumeration Crowding
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Type for a reference to a Country Identifier.</para>
    /// <para>Reference to a country ISO 3166-1 Note that GB is used for UK . May be qualified with a 3166-2 subdivision e.g. gb +m ENG, GB + SCT, GB See www.iso.org/iso/country_codes/iso_3166_code_lists.htm</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a reference to a Country Identifier.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CountryRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("CountryRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class CountryRefStructure
    {
        
        /// <summary>
        /// <para>Iso 3166-1 Two Character country code. Note enumeration removed for brewity.</para>
        /// <para>Type for Country Identifier. ISO 3166-1 (2 character ISO code).</para>
        /// <para xml:lang="en">Minimum length: 2.</para>
        /// <para xml:lang="en">Maximum length: 2.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Iso 3166-1 Two Character country code. Note enumeration removed for brewity.")]
        [System.ComponentModel.DataAnnotations.MinLengthAttribute(2)]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(2)]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
        
        /// <summary>
        /// <para>ISO 3166-2 (3 character ISo code).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("ISO 3166-2 (3 character ISo code).")]
        [System.Xml.Serialization.XmlAttributeAttribute("refPrincipality")]
        public string RefPrincipality { get; set; }
    }
    
    /// <summary>
    /// <para>Allowed values for DAY EVENT.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for DAY EVENT.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DayEventEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum DayEventEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("anyDay")]
        AnyDay,
        
        [System.Xml.Serialization.XmlEnumAttribute("normalDay")]
        NormalDay,
        
        [System.Xml.Serialization.XmlEnumAttribute("marketDay")]
        MarketDay,
        
        [System.Xml.Serialization.XmlEnumAttribute("matchDay")]
        MatchDay,
        
        [System.Xml.Serialization.XmlEnumAttribute("eventDay")]
        EventDay,
    }
    
    /// <summary>
    /// <para>Allowed values for Crowdedness.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Crowdedness.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CrowdingEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum CrowdingEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("veryQuiet")]
        VeryQuiet,
        
        [System.Xml.Serialization.XmlEnumAttribute("quiet")]
        Quiet,
        
        [System.Xml.Serialization.XmlEnumAttribute("normal")]
        Normal,
        
        [System.Xml.Serialization.XmlEnumAttribute("busy")]
        Busy,
        
        [System.Xml.Serialization.XmlEnumAttribute("veryBusy")]
        VeryBusy,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DayTypeStructureTimebands", Namespace="http://www.netex.org.uk/netex", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DayTypeStructureTimebands
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TimebandVersionStructure> _timeband;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Timeband")]
        public System.Collections.ObjectModel.Collection<TimebandVersionStructure> Timeband
        {
            get
            {
                return _timeband;
            }
            private set
            {
                _timeband = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DayTypeStructureTimebands" /> class.</para>
        /// </summary>
        public DayTypeStructureTimebands()
        {
            this._timeband = new System.Collections.ObjectModel.Collection<TimebandVersionStructure>();
        }
    }
    
    /// <summary>
    /// <para>A period in a day, significant for some aspect of public transport, e.g. similar traffic conditions or fare category</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A period in a day, significant for some aspect of public transport, e.g. similar " +
        "traffic conditions or fare category")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Timeband_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Timeband", Namespace="http://www.netex.org.uk/netex")]
    public partial class TimebandVersionStructure : IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public ValidBetweenVersionStructure ValidBetween { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TimebandVersionStructure" /> class.</para>
        /// </summary>
        public TimebandVersionStructure()
        {
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>The (inclusive) start time.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The (inclusive) start time.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("StartTime")]
        public string StartTime { get; set; }
        
        /// <summary>
        /// <para>The (inclusive) end time.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The (inclusive) end time.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("EndTime")]
        public string EndTime { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _dayOffset = "0";
        
        /// <summary>
        /// <para>Number of days after start time that end time is.</para>
        /// <para>Offset in days.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("0")]
        [System.ComponentModel.DescriptionAttribute("Number of days after start time that end time is.")]
        [System.Xml.Serialization.XmlElementAttribute("DayOffset")]
        public string DayOffset
        {
            get
            {
                return _dayOffset;
            }
            set
            {
                _dayOffset = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IDataManagedObjectAttributeGroup
    {
        
        string NameOfClass
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        string Id
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        string DataSourceRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        System.DateTime Created
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        System.DateTime Changed
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        ModificationEnumeration Modification
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        string Version
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        StatusEnumeration Status
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        string DerivedFromVersionRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        string CompatibleWithVersionFrameVersionRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        string DerivedFromObjectRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        string ResponsibilitySetRef
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DayTypeRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("DayTypeRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class DayTypeRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Type for a list of TIMEBANDs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a list of TIMEBANDs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("timebands_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TimebandsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TimebandRefStructure> _timebandRef;
        
        [System.Xml.Serialization.XmlElementAttribute("TimebandRef")]
        public System.Collections.ObjectModel.Collection<TimebandRefStructure> TimebandRef
        {
            get
            {
                return _timebandRef;
            }
            private set
            {
                _timebandRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TimebandRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimebandRefSpecified
        {
            get
            {
                return (this.TimebandRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TimebandsRelStructure" /> class.</para>
        /// </summary>
        public TimebandsRelStructure()
        {
            this._timebandRef = new System.Collections.ObjectModel.Collection<TimebandRefStructure>();
            this._timeband = new System.Collections.ObjectModel.Collection<TimebandVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TimebandVersionStructure> _timeband;
        
        [System.Xml.Serialization.XmlElementAttribute("Timeband")]
        public System.Collections.ObjectModel.Collection<TimebandVersionStructure> Timeband
        {
            get
            {
                return _timeband;
            }
            private set
            {
                _timeband = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Timeband collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimebandSpecified
        {
            get
            {
                return (this.Timeband.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TimebandRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TimebandRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TimebandRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IModificationSetAttributeGroup
    {
        
        string Id
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        ModificationSetEnumeration ModificationSet
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Classification of modification as addition, deletion, revision or delta only. Enumerated value.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Classification of modification as addition, deletion, revision or delta only. Enu" +
        "merated value.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ModificationSetEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("ModificationSet", Namespace="http://www.netex.org.uk/netex")]
    public enum ModificationSetEnumeration
    {
        
        /// <summary>
        /// <para>This  incldues definitions of  one ore more new entities.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("This incldues definitions of one ore more new entities.")]
        [System.Xml.Serialization.XmlEnumAttribute("all")]
        All,
        
        /// <summary>
        /// <para>This is just the modifications (addition, revision, deletion); entities which are unchanged are omitted.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("This is just the modifications (addition, revision, deletion); entities which are" +
            " unchanged are omitted.")]
        [System.Xml.Serialization.XmlEnumAttribute("changesOnly")]
        ChangesOnly,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("operatingDays_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("operatingDays", Namespace="http://www.netex.org.uk/netex")]
    public partial class OperatingDaysRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<OperatingDayVersionStructure> _operatingDay;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("OperatingDay")]
        public System.Collections.ObjectModel.Collection<OperatingDayVersionStructure> OperatingDay
        {
            get
            {
                return _operatingDay;
            }
            private set
            {
                _operatingDay = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="OperatingDaysRelStructure" /> class.</para>
        /// </summary>
        public OperatingDaysRelStructure()
        {
            this._operatingDay = new System.Collections.ObjectModel.Collection<OperatingDayVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>A day of public transport operation in a specific calendar. An OPERATING DAY may last more than 24 hours.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A day of public transport operation in a specific calendar. An OPERATING DAY may " +
        "last more than 24 hours.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OperatingDay_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("OperatingDay", Namespace="http://www.netex.org.uk/netex")]
    public partial class OperatingDayVersionStructure : IDaySpanGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public ValidBetweenVersionStructure ValidBetween { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="OperatingDayVersionStructure" /> class.</para>
        /// </summary>
        public OperatingDayVersionStructure()
        {
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>"Main" Date associated with OPERATING DAY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("\"Main\" Date associated with OPERATING DAY.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("CalendarDate", DataType="date")]
        public System.DateTime CalendarDate { get; set; }
        
        /// <summary>
        /// <para>Allowed, but not needed in EPIP as already in scope of the only relevant ServiceCalendar</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Allowed, but not needed in EPIP as already in scope of the only relevant ServiceC" +
            "alendar")]
        [System.Xml.Serialization.XmlElementAttribute("ServiceCalendarRef")]
        public ServiceCalendarRefStructure ServiceCalendarRef { get; set; }
        
        /// <summary>
        /// <para>Name of OPERATING DAY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of OPERATING DAY.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Earliest time that day starts.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Earliest time that day starts.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("EarliestTime")]
        public string EarliestTime { get; set; }
        
        /// <summary>
        /// <para>Length of day. Used to work out Latest time that day runs to.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Length of day. Used to work out Latest time that day runs to.")]
        [System.Xml.Serialization.XmlElementAttribute("DayLength")]
        public string DayLength { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ServiceCalendarRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ServiceCalendarRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ServiceCalendarRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ValidityCondition_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ValidityCondition", Namespace="http://www.netex.org.uk/netex")]
    public partial class ValidityConditionVersionStructure : IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        /// <summary>
        /// <para>Not in EPIP. A list of alternative Key values for an element.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. A list of alternative Key values for an element.")]
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ValidityConditionVersionStructure" /> class.</para>
        /// </summary>
        public ValidityConditionVersionStructure()
        {
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>Not in EPIP. Reference to a BRANDING.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Reference to a BRANDING.")]
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>The contained textual information shall be
        ///suitable for presentation to the public without further editing</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The contained textual information shall be suitable for presentation to the publi" +
            "c without further editing")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Facilities that apply to SITEs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Facilities that apply to SITEs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IAccommodationGroup
    {
        
        /// <summary>
        /// <para>Not in EPIP.                Name of Accommodation _v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Name of Accommodation _v1.1")]
        MultilingualString Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Fare class of ACCOMMODATION.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Fare class of ACCOMMODATION.")]
        FareClassEnumeration FareClass
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Type of ACCOMMODATION. . Default is seating.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type of ACCOMMODATION. . Default is seating.")]
        AccommodationFacilityEnumeration AccommodationFacility
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.                Type of Couchette.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Type of Couchette.")]
        CouchetteFacilityEnumeration CouchetteFacility
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        string MaximumNumberOfBerths
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.                Classification of BERTH FACILITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Classification of BERTH FACILITY.")]
        BerthFacilityEnumeration BerthFacility
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        SanitaryFacilityEnumeration ShowerFacility
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.                Toilet facilities for ACCOMMODATION.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Toilet facilities for ACCOMMODATION.")]
        SanitaryFacilityEnumeration ToiletFacility
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.                Classification GENDER LIMITATION.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Classification GENDER LIMITATION.")]
        GenderLimitationEnumeration GenderLimitation
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>List of values for NUISANCE FACILITY.</para>
        /// </summary>
        System.Collections.ObjectModel.Collection<string> NuisanceFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of values for PASSENGER COMMS FACILITies.</para>
        /// </summary>
        System.Collections.ObjectModel.Collection<string> PassengerCommsFacilityList
        {
            get;
        }
    }
    
    /// <summary>
    /// <para>Values for Fare Class Facility.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Values for Fare Class Facility.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("FareClassEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("FareClass", Namespace="http://www.netex.org.uk/netex")]
    public enum FareClassEnumeration
    {
        
        /// <summary>
        /// <para>pti23_0</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_0")]
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        /// <summary>
        /// <para>pti23_6</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_6")]
        [System.Xml.Serialization.XmlEnumAttribute("firstClass")]
        FirstClass,
        
        /// <summary>
        /// <para>pti23_7 ( error extra space in full NeTEx removed here....)</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_7 ( error extra space in full NeTEx removed here....)")]
        [System.Xml.Serialization.XmlEnumAttribute("secondClass")]
        SecondClass,
        
        /// <summary>
        /// <para>pti23_8</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_8")]
        [System.Xml.Serialization.XmlEnumAttribute("thirdClass")]
        ThirdClass,
        
        [System.Xml.Serialization.XmlEnumAttribute("preferente")]
        Preferente,
        
        /// <summary>
        /// <para>pti23_6_1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_6_1")]
        [System.Xml.Serialization.XmlEnumAttribute("premiumClass")]
        PremiumClass,
        
        /// <summary>
        /// <para>Business Class - pti23_10</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Business Class - pti23_10")]
        [System.Xml.Serialization.XmlEnumAttribute("businessClass")]
        BusinessClass,
        
        /// <summary>
        /// <para>Standard class Add pti23_7</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Standard class Add pti23_7")]
        [System.Xml.Serialization.XmlEnumAttribute("standardClass")]
        StandardClass,
        
        [System.Xml.Serialization.XmlEnumAttribute("turista")]
        Turista,
        
        /// <summary>
        /// <para>pti23_9</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_9")]
        [System.Xml.Serialization.XmlEnumAttribute("economyClass")]
        EconomyClass,
        
        [System.Xml.Serialization.XmlEnumAttribute("any")]
        Any,
    }
    
    /// <summary>
    /// <para>Allowed values for Accommodation Facility.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Accommodation Facility.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AccommodationFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("AccommodationFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum AccommodationFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("seating")]
        Seating,
        
        [System.Xml.Serialization.XmlEnumAttribute("sleeper")]
        Sleeper,
        
        [System.Xml.Serialization.XmlEnumAttribute("singleSleeper")]
        SingleSleeper,
        
        [System.Xml.Serialization.XmlEnumAttribute("doubleSleeper")]
        DoubleSleeper,
        
        [System.Xml.Serialization.XmlEnumAttribute("specialSleeper")]
        SpecialSleeper,
        
        [System.Xml.Serialization.XmlEnumAttribute("couchette")]
        Couchette,
        
        [System.Xml.Serialization.XmlEnumAttribute("singleCouchette")]
        SingleCouchette,
        
        [System.Xml.Serialization.XmlEnumAttribute("doubleCouchette")]
        DoubleCouchette,
        
        [System.Xml.Serialization.XmlEnumAttribute("specialSeating")]
        SpecialSeating,
        
        [System.Xml.Serialization.XmlEnumAttribute("recliningSeats")]
        RecliningSeats,
        
        [System.Xml.Serialization.XmlEnumAttribute("babyCompartment")]
        BabyCompartment,
        
        [System.Xml.Serialization.XmlEnumAttribute("familyCarriage")]
        FamilyCarriage,
        
        [System.Xml.Serialization.XmlEnumAttribute("recreationArea")]
        RecreationArea,
        
        [System.Xml.Serialization.XmlEnumAttribute("panoramaCoach")]
        PanoramaCoach,
        
        [System.Xml.Serialization.XmlEnumAttribute("pullmanCoach")]
        PullmanCoach,
        
        [System.Xml.Serialization.XmlEnumAttribute("standing")]
        Standing,
    }
    
    /// <summary>
    /// <para>Allowed values  for Couchette Facility: UIc.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Couchette Facility: UIc.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CouchetteFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("CouchetteFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum CouchetteFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        T2,
        
        T3,
        
        C1,
        
        C2,
        
        C4,
        
        /// <summary>
        /// <para>pti23_4_1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_4_1")]
        C5,
        
        C6,
        
        [System.Xml.Serialization.XmlEnumAttribute("wheelchair")]
        Wheelchair,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Allowed values for Berth Facility:</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Berth Facility:")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BerthFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("BerthFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum BerthFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("upper")]
        Upper,
        
        [System.Xml.Serialization.XmlEnumAttribute("lower")]
        Lower,
        
        [System.Xml.Serialization.XmlEnumAttribute("both")]
        Both,
    }
    
    /// <summary>
    /// <para>Allowed values for Sanitary Facility Type.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Sanitary Facility Type.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SanitaryFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("SanitaryFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum SanitaryFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
        
        [System.Xml.Serialization.XmlEnumAttribute("toilet")]
        Toilet,
        
        [System.Xml.Serialization.XmlEnumAttribute("wheelChairAccessToilet")]
        WheelChairAccessToilet,
        
        [System.Xml.Serialization.XmlEnumAttribute("shower")]
        Shower,
        
        [System.Xml.Serialization.XmlEnumAttribute("washingAndChangeFacilities")]
        WashingAndChangeFacilities,
        
        [System.Xml.Serialization.XmlEnumAttribute("babyChange")]
        BabyChange,
        
        [System.Xml.Serialization.XmlEnumAttribute("wheelchairBabyChange")]
        WheelchairBabyChange,
        
        [System.Xml.Serialization.XmlEnumAttribute("shoeShiner")]
        ShoeShiner,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Allowed values for GENDER LIMITATION.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for GENDER LIMITATION.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GenderLimitationEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("GenderLimitation", Namespace="http://www.netex.org.uk/netex")]
    public enum GenderLimitationEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("both")]
        Both,
        
        [System.Xml.Serialization.XmlEnumAttribute("femaleOnly")]
        FemaleOnly,
        
        [System.Xml.Serialization.XmlEnumAttribute("maleOnly")]
        MaleOnly,
        
        [System.Xml.Serialization.XmlEnumAttribute("sameSexOnly")]
        SameSexOnly,
    }
    
    /// <summary>
    /// <para>Boarding permission to board early or stay on board late.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Boarding permission to board early or stay on board late.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OnboardStay_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("OnboardStay", Namespace="http://www.netex.org.uk/netex")]
    public partial class OnboardStayVersionStructure : IEntityInVersionElementGroup, IOnboardStayGroup, IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="OnboardStayVersionStructure" /> class.</para>
        /// </summary>
        public OnboardStayVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        /// <summary>
        /// <para>Name of ON BOARD STay +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of ON BOARD STay +v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ServiceFacilitySetRef")]
        public ServiceFacilityRefStructure ServiceFacilitySetRef { get; set; }
        
        /// <summary>
        /// <para>Fare class of Boarding permission.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Fare class of Boarding permission.")]
        [System.Xml.Serialization.XmlElementAttribute("FareClass")]
        public FareClassEnumeration FareClass { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FareClass property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FareClassSpecified { get; set; }
        
        /// <summary>
        /// <para>Type of Accommodation . Default is seating.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type of Accommodation . Default is seating.")]
        [System.Xml.Serialization.XmlElementAttribute("BoardingPermission")]
        public BoardingPermissionEnumeration BoardingPermission { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BoardingPermission property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BoardingPermissionSpecified { get; set; }
        
        /// <summary>
        /// <para>Period allowed for boarding/ alighting before journey start /end.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Period allowed for boarding/ alighting before journey start /end.")]
        [System.Xml.Serialization.XmlElementAttribute("Period")]
        public string Period { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    /// <summary>
    /// <para>Facilities that apply to SITEs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Facilities that apply to SITEs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IOnboardStayGroup
    {
        
        /// <summary>
        /// <para>Name of ON BOARD STay +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of ON BOARD STay +v1.1")]
        MultilingualString Name
        {
            get;
            set;
        }
        
        ServiceFacilityRefStructure ServiceFacilitySetRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Fare class of Boarding permission.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Fare class of Boarding permission.")]
        FareClassEnumeration FareClass
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Type of Accommodation . Default is seating.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type of Accommodation . Default is seating.")]
        BoardingPermissionEnumeration BoardingPermission
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Period allowed for boarding/ alighting before journey start /end.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Period allowed for boarding/ alighting before journey start /end.")]
        string Period
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Not in EPIP</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ServiceFacilityRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ServiceFacilitySetRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ServiceFacilityRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Allowed values or Boarding Permission Facility: UIc.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values or Boarding Permission Facility: UIc.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BoardingPermissionEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("BoardingPermission", Namespace="http://www.netex.org.uk/netex")]
    public enum BoardingPermissionEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("normal")]
        Normal,
        
        [System.Xml.Serialization.XmlEnumAttribute("earlyBoardingPossibleBeforeDeparture")]
        EarlyBoardingPossibleBeforeDeparture,
        
        [System.Xml.Serialization.XmlEnumAttribute("lateAlightingPossibleAfterArrival")]
        LateAlightingPossibleAfterArrival,
        
        [System.Xml.Serialization.XmlEnumAttribute("overnightStayOnboardAllowed")]
        OvernightStayOnboardAllowed,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AllowedLineDirection_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("AllowedLineDirection", Namespace="http://www.netex.org.uk/netex")]
    public partial class AllowedLineDirectionVersionStructure : IDataManagedObjectElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="AllowedLineDirectionVersionStructure" /> class.</para>
        /// </summary>
        public AllowedLineDirectionVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("DirectionRef")]
        public DirectionRefStructure DirectionRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IDataManagedObjectElementGroup : IEntityInVersionElementGroup
    {
        
        System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get;
        }
        
        BrandingRefStructure BrandingRef
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DirectionRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("DirectionRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class DirectionRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AllowedLineDirectionRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("AllowedLineDirectionRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class AllowedLineDirectionRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AlternativeNameStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("AlternativeName", Namespace="http://www.netex.org.uk/netex")]
    public partial class AlternativeNameStructure
    {
        
        [System.Xml.Serialization.XmlElementAttribute("Lang")]
        public string Lang { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Abbreviation")]
        public string Abbreviation { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AuthorityRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("AuthorityRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class AuthorityRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BaselineVersionFrameRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("BaselineVersionFrameRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class BaselineVersionFrameRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Elements for an ACCESSIBILITY ASSESSMENT.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for an ACCESSIBILITY ASSESSMENT.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AccessibilityAssessmentStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("AccessibilityAssessment", Namespace="http://www.netex.org.uk/netex")]
    public partial class AccessibilityAssessmentStructure : IVersionedChildElementGroup, IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="AccessibilityAssessmentStructure" /> class.</para>
        /// </summary>
        public AccessibilityAssessmentStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        /// <summary>
        /// <para>Summary indication as to whether the component is considered to be accessible or not.
        ///Note that in the context of EPIP, whenever a "partial" LimitationStatus is used, then a "ValidityCondition Description" shall be provided accordingly to explain why the accessibility is only partial. The contained textual information shall be suitable for presentation to the public without further editing.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Summary indication as to whether the component is considered to be accessible or not. Note that in the context of EPIP, whenever a ""partial"" LimitationStatus is used, then a ""ValidityCondition Description"" shall be provided accordingly to explain why the accessibility is only partial. The contained textual information shall be suitable for presentation to the public without further editing.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("MobilityImpairedAccess")]
        public LimitationStatusEnumeration MobilityImpairedAccess { get; set; }
        
        /// <summary>
        /// <para>The ACCESSIBILITY LIMITATIONs that apply to component.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The ACCESSIBILITY LIMITATIONs that apply to component.")]
        [System.Xml.Serialization.XmlElementAttribute("limitations")]
        public AccessibilityLimitationsRelStructure Limitations { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IVersionedChildElementGroup : IEntityInVersionElementGroup
    {
    }
    
    /// <summary>
    /// <para>Allowed values for an accessibility value.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for an accessibility value.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LimitationStatusEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("AudibleSignalsAvailable", Namespace="http://www.netex.org.uk/netex")]
    public enum LimitationStatusEnumeration
    {
        
        /// <summary>
        /// <para>All of PLACE is accessible for criteria.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("All of PLACE is accessible for criteria.")]
        [System.Xml.Serialization.XmlEnumAttribute("true")]
        True,
        
        /// <summary>
        /// <para>PLACE is not considered to meet accessibility criteria.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("PLACE is not considered to meet accessibility criteria.")]
        [System.Xml.Serialization.XmlEnumAttribute("false")]
        False,
        
        /// <summary>
        /// <para>It is not known whether PLACE meets accessibility  criteria.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("It is not known whether PLACE meets accessibility criteria.")]
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        /// <summary>
        /// <para>Some areas of PLACE are not considered to meet accessibility criteria.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Some areas of PLACE are not considered to meet accessibility criteria.")]
        [System.Xml.Serialization.XmlEnumAttribute("partial")]
        Partial,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("accessibilityLimitations_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AccessibilityLimitationsRelStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<AccessibilityLimitationStructure> _accessibilityLimitation;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("AccessibilityLimitation")]
        public System.Collections.ObjectModel.Collection<AccessibilityLimitationStructure> AccessibilityLimitation
        {
            get
            {
                return _accessibilityLimitation;
            }
            private set
            {
                _accessibilityLimitation = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="AccessibilityLimitationsRelStructure" /> class.</para>
        /// </summary>
        public AccessibilityLimitationsRelStructure()
        {
            this._accessibilityLimitation = new System.Collections.ObjectModel.Collection<AccessibilityLimitationStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AccessibilityLimitationStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("AccessibilityLimitation", Namespace="http://www.netex.org.uk/netex")]
    public partial class AccessibilityLimitationStructure : IMobilityLimitationGroup, ISensoryLimitationGroup, IEntityAttributeGroup
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("WheelchairAccess")]
        public LimitationStatusEnumeration WheelchairAccess { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("StepFreeAccess")]
        public LimitationStatusEnumeration StepFreeAccess { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StepFreeAccess property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StepFreeAccessSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("EscalatorFreeAccess")]
        public LimitationStatusEnumeration EscalatorFreeAccess { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EscalatorFreeAccess property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EscalatorFreeAccessSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("LiftFreeAccess")]
        public LimitationStatusEnumeration LiftFreeAccess { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LiftFreeAccess property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LiftFreeAccessSpecified { get; set; }
        
        /// <summary>
        /// <para>Whether a PLACE has audible signals for the visually impaired.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether a PLACE has audible signals for the visually impaired.")]
        [System.Xml.Serialization.XmlElementAttribute("AudibleSignalsAvailable")]
        public LimitationStatusEnumeration AudibleSignalsAvailable { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AudibleSignalsAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AudibleSignalsAvailableSpecified { get; set; }
        
        /// <summary>
        /// <para>Whether a PLACE has visual signals for the hearing impaired.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether a PLACE has visual signals for the hearing impaired.")]
        [System.Xml.Serialization.XmlElementAttribute("VisualSignsAvailable")]
        public LimitationStatusEnumeration VisualSignsAvailable { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VisualSignsAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VisualSignsAvailableSpecified { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    /// <summary>
    /// <para>Mobility limitations.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Mobility limitations.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IMobilityLimitationGroup
    {
        
        LimitationStatusEnumeration WheelchairAccess
        {
            get;
            set;
        }
        
        LimitationStatusEnumeration StepFreeAccess
        {
            get;
            set;
        }
        
        LimitationStatusEnumeration EscalatorFreeAccess
        {
            get;
            set;
        }
        
        LimitationStatusEnumeration LiftFreeAccess
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Group of sensory limitations.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Group of sensory limitations.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ISensoryLimitationGroup
    {
        
        /// <summary>
        /// <para>Whether a PLACE has audible signals for the visually impaired.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether a PLACE has audible signals for the visually impaired.")]
        LimitationStatusEnumeration AudibleSignalsAvailable
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether a PLACE has visual signals for the hearing impaired.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether a PLACE has visual signals for the hearing impaired.")]
        LimitationStatusEnumeration VisualSignsAvailable
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Authority_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Authority", Namespace="http://www.netex.org.uk/netex")]
    public partial class AuthorityVersionStructure : IDataManagedObjectElementGroup, IOrganisationContentGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="AuthorityVersionStructure" /> class.</para>
        /// </summary>
        public AuthorityVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._organisationType = new System.Collections.ObjectModel.Collection<string>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Public code to use for ORGANISATION</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Public code to use for ORGANISATION")]
        [System.Xml.Serialization.XmlElementAttribute("PublicCode")]
        public string PublicCode { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        /// <summary>
        /// <para>Company registration number including Country prefix.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Company registration number including Country prefix.")]
        [System.Xml.Serialization.XmlElementAttribute("CompanyNumber")]
        public string CompanyNumber { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. Used for VDV compatibility.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Used for VDV compatibility.")]
        [System.Xml.Serialization.XmlElementAttribute("ExternalOperatorRef")]
        public ExternalObjectRefStructure ExternalOperatorRef { get; set; }
        
        /// <summary>
        /// <para>The name of the ORGANISATION</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The name of the ORGANISATION")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>A short name of the ORGANISATION.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A short name of the ORGANISATION.")]
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        /// <summary>
        /// <para>The legal name of the ORGANISATION, if different from Name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The legal name of the ORGANISATION, if different from Name.")]
        [System.Xml.Serialization.XmlElementAttribute("LegalName")]
        public MultilingualString LegalName { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("TradingName")]
        public MultilingualString TradingName { get; set; }
        
        /// <summary>
        /// <para>Dedicated to aliases (where AlternativeText is
        ///more focused on translations).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Dedicated to aliases (where AlternativeText is more focused on translations).")]
        [System.Xml.Serialization.XmlElementAttribute("alternativeNames")]
        public AlternativeNamesStructure AlternativeNames { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Locale")]
        public LocaleStructure Locale { get; set; }
        
        /// <summary>
        /// <para>Mandatory in EPIP. Contact details for public use.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP. Contact details for public use.")]
        [System.Xml.Serialization.XmlElementAttribute("ContactDetails")]
        public ContactDetailsStructure ContactDetails { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _organisationType;
        
        /// <summary>
        /// <para>Mandatory in EPIP. Type of ORGANISATION.</para>
        /// <para>List of Allowed values for ORGANISATION TYPE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP. Type of ORGANISATION.")]
        [System.Xml.Serialization.XmlElementAttribute("OrganisationType")]
        public System.Collections.ObjectModel.Collection<string> OrganisationType
        {
            get
            {
                return _organisationType;
            }
            private set
            {
                _organisationType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OrganisationType collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OrganisationTypeSpecified
        {
            get
            {
                return (this.OrganisationType.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("parts")]
        public OrganisationPartsRelStructure Parts { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Address")]
        public PostalAddressVersionStructure Address { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IOrganisationContentGroup
    {
        
        /// <summary>
        /// <para>Public code to use for ORGANISATION</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Public code to use for ORGANISATION")]
        string PublicCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        PrivateCodeStructure PrivateCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Company registration number including Country prefix.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Company registration number including Country prefix.")]
        string CompanyNumber
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP. Used for VDV compatibility.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Used for VDV compatibility.")]
        ExternalObjectRefStructure ExternalOperatorRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>The name of the ORGANISATION</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The name of the ORGANISATION")]
        MultilingualString Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>A short name of the ORGANISATION.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A short name of the ORGANISATION.")]
        MultilingualString ShortName
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>The legal name of the ORGANISATION, if different from Name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The legal name of the ORGANISATION, if different from Name.")]
        MultilingualString LegalName
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        MultilingualString TradingName
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Dedicated to aliases (where AlternativeText is
        ///more focused on translations).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Dedicated to aliases (where AlternativeText is more focused on translations).")]
        AlternativeNamesStructure AlternativeNames
        {
            get;
            set;
        }
        
        MultilingualString Description
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        LocaleStructure Locale
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Mandatory in EPIP. Contact details for public use.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP. Contact details for public use.")]
        ContactDetailsStructure ContactDetails
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Mandatory in EPIP. Type of ORGANISATION.</para>
        /// <para>List of Allowed values for ORGANISATION TYPE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP. Type of ORGANISATION.")]
        System.Collections.ObjectModel.Collection<string> OrganisationType
        {
            get;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        OrganisationPartsRelStructure Parts
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Type describing a private code.</para>
    /// <para>A private code that uniquely identifies the element.  May be used for inter-operating with other (legacy) systems.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type describing a private code.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PrivateCodeStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("PrivateCode", Namespace="http://www.netex.org.uk/netex")]
    public partial class PrivateCodeStructure
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Nature of code.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of code.")]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public string Type { get; set; }
    }
    
    /// <summary>
    /// <para>Type for a reference.to an external object.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a reference.to an external object.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ExternalObjectRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExternalObjectRefStructure
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Type of reference.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type of reference.")]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public string Type { get; set; }
        
        /// <summary>
        /// <para>Reference to an entity in an external system.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to an entity in an external system.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("alternativeNamesStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("alternativeNames", Namespace="http://www.netex.org.uk/netex")]
    public partial class AlternativeNamesStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<AlternativeNameStructure> _alternativeName;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("AlternativeName")]
        public System.Collections.ObjectModel.Collection<AlternativeNameStructure> AlternativeName
        {
            get
            {
                return _alternativeName;
            }
            private set
            {
                _alternativeName = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="AlternativeNamesStructure" /> class.</para>
        /// </summary>
        public AlternativeNamesStructure()
        {
            this._alternativeName = new System.Collections.ObjectModel.Collection<AlternativeNameStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LocaleStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefaultLocale))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Locale))]
    public partial class LocaleStructure
    {
        
        /// <summary>
        /// <para>Timezone offset from Greenwich at LOCALE.</para>
        /// <para>Offset from Greenwich in hours. e.g. +5 ,- 2</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Timezone offset from Greenwich at LOCALE.")]
        [System.Xml.Serialization.XmlElementAttribute("TimeZoneOffset")]
        public decimal TimeZoneOffset { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TimeZoneOffset property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeZoneOffsetSpecified { get; set; }
        
        /// <summary>
        /// <para>Timezone name at LOCALE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Timezone name at LOCALE.")]
        [System.Xml.Serialization.XmlElementAttribute("TimeZone")]
        public string TimeZone { get; set; }
        
        /// <summary>
        /// <para>Summer timezone offset if different from Time zone offset.</para>
        /// <para>Offset from Greenwich in hours. e.g. +5 ,- 2</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Summer timezone offset if different from Time zone offset.")]
        [System.Xml.Serialization.XmlElementAttribute("SummerTimeZoneOffset")]
        public decimal SummerTimeZoneOffset { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SummerTimeZoneOffset property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SummerTimeZoneOffsetSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.                Summer Time zone name at LOCALE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Summer Time zone name at LOCALE.")]
        [System.Xml.Serialization.XmlElementAttribute("SummerTimeZone")]
        public string SummerTimeZone { get; set; }
        
        /// <summary>
        /// <para>Default Language for LOCALE. Assume language use is "normally used"</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default Language for LOCALE. Assume language use is \"normally used\"")]
        [System.Xml.Serialization.XmlElementAttribute("DefaultLanguage")]
        public string DefaultLanguage { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LanguageUsageStructure> _languages;
        
        /// <summary>
        /// <para>Languages supported at LOCALE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Languages supported at LOCALE.")]
        [System.Xml.Serialization.XmlArrayAttribute("languages")]
        [System.Xml.Serialization.XmlArrayItemAttribute("LanguageUsage", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<LanguageUsageStructure> Languages
        {
            get
            {
                return _languages;
            }
            private set
            {
                _languages = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Languages collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LanguagesSpecified
        {
            get
            {
                return (this.Languages.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LocaleStructure" /> class.</para>
        /// </summary>
        public LocaleStructure()
        {
            this._languages = new System.Collections.ObjectModel.Collection<LanguageUsageStructure>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LocaleStructureLanguages", Namespace="http://www.netex.org.uk/netex", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LocaleStructureLanguages
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LanguageUsageStructure> _languageUsage;
        
        /// <summary>
        /// <para>Language usage.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Language usage.")]
        [System.Xml.Serialization.XmlElementAttribute("LanguageUsage")]
        public System.Collections.ObjectModel.Collection<LanguageUsageStructure> LanguageUsage
        {
            get
            {
                return _languageUsage;
            }
            private set
            {
                _languageUsage = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LanguageUsage collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LanguageUsageSpecified
        {
            get
            {
                return (this.LanguageUsage.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LocaleStructureLanguages" /> class.</para>
        /// </summary>
        public LocaleStructureLanguages()
        {
            this._languageUsage = new System.Collections.ObjectModel.Collection<LanguageUsageStructure>();
        }
    }
    
    /// <summary>
    /// <para>Type describing language usage properties.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type describing language usage properties.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LanguageUsageStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LanguageUsageStructure
    {
        
        /// <summary>
        /// <para>Language whose usage is described.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Language whose usage is described.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Language")]
        public string Language { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _languageUse;
        
        /// <summary>
        /// <para>Usages of language supported. Based on UN terms.</para>
        /// <para>List of of Uses of language.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Usages of language supported. Based on UN terms.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("LanguageUse")]
        public System.Collections.ObjectModel.Collection<string> LanguageUse
        {
            get
            {
                return _languageUse;
            }
            private set
            {
                _languageUse = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LanguageUsageStructure" /> class.</para>
        /// </summary>
        public LanguageUsageStructure()
        {
            this._languageUse = new System.Collections.ObjectModel.Collection<string>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ContactDetailsStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ContactDetails", Namespace="http://www.netex.org.uk/netex")]
    public partial class ContactDetailsStructure
    {
        
        [System.Xml.Serialization.XmlElementAttribute("Email")]
        public string Email { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Phone")]
        public string Phone { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Url")]
        public string Url { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("organisationParts_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OrganisationPartsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<OrganisationPartStructure> _organisationPart;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("OrganisationPart")]
        public System.Collections.ObjectModel.Collection<OrganisationPartStructure> OrganisationPart
        {
            get
            {
                return _organisationPart;
            }
            private set
            {
                _organisationPart = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="OrganisationPartsRelStructure" /> class.</para>
        /// </summary>
        public OrganisationPartsRelStructure()
        {
            this._organisationPart = new System.Collections.ObjectModel.Collection<OrganisationPartStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OrganisationPartStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("OrganisationPart", Namespace="http://www.netex.org.uk/netex")]
    public partial class OrganisationPartStructure : IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    /// <summary>
    /// <para>A POSTAL ADDRESS to which mail can be sent.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A POSTAL ADDRESS to which mail can be sent.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PostalAddress_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("PostalAddress", Namespace="http://www.netex.org.uk/netex")]
    public partial class PostalAddressVersionStructure : IPlaceObjectElementGroup, IAddressGroup, IPostalAddressGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PostalAddressVersionStructure" /> class.</para>
        /// </summary>
        public PostalAddressVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PurposeOfGroupingRef")]
        public PurposeOfGroupingRefStructure PurposeOfGroupingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("members")]
        public PlaceObjectMembers Members { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Centroid")]
        public CentroidStructure Centroid { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Polygon", Namespace="http://www.opengis.net/gml/3.2")]
        public Gml.TPolygon Polygon { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("placeTypes")]
        public PlaceTypesStructure PlaceTypes { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("CountryRef")]
        public CountryRefStructure CountryRef { get; set; }
        
        /// <summary>
        /// <para>Name of Counntry, derivedable from Country Ref.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Counntry, derivedable from Country Ref.")]
        [System.Xml.Serialization.XmlElementAttribute("CountryName")]
        public MultilingualString CountryName { get; set; }
        
        /// <summary>
        /// <para>Number of house on street.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Number of house on street.")]
        [System.Xml.Serialization.XmlElementAttribute("HouseNumber")]
        public string HouseNumber { get; set; }
        
        /// <summary>
        /// <para>Name of Building.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Building.")]
        [System.Xml.Serialization.XmlElementAttribute("BuildingName")]
        public MultilingualString BuildingName { get; set; }
        
        /// <summary>
        /// <para>First line of Address.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("First line of Address.")]
        [System.Xml.Serialization.XmlElementAttribute("AddressLine1")]
        public MultilingualString AddressLine1 { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine2")]
        public MultilingualString AddressLine2 { get; set; }
        
        /// <summary>
        /// <para>Street on which building is found.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Street on which building is found.")]
        [System.Xml.Serialization.XmlElementAttribute("Street")]
        public MultilingualString Street { get; set; }
        
        /// <summary>
        /// <para>Town, City, Village or other named settlement.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Town, City, Village or other named settlement.")]
        [System.Xml.Serialization.XmlElementAttribute("Town")]
        public MultilingualString Town { get; set; }
        
        /// <summary>
        /// <para>Subarea of Town.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Subarea of Town.")]
        [System.Xml.Serialization.XmlElementAttribute("Suburb")]
        public MultilingualString Suburb { get; set; }
        
        /// <summary>
        /// <para>Postcode or Zip code of address.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Postcode or Zip code of address.")]
        [System.Xml.Serialization.XmlElementAttribute("PostCode")]
        public string PostCode { get; set; }
        
        /// <summary>
        /// <para>Post code extension.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Post code extension.")]
        [System.Xml.Serialization.XmlElementAttribute("PostCodeExtension")]
        public string PostCodeExtension { get; set; }
        
        /// <summary>
        /// <para>Postal Region.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Postal Region.")]
        [System.Xml.Serialization.XmlElementAttribute("PostalRegion")]
        public string PostalRegion { get; set; }
        
        /// <summary>
        /// <para>Province or State of Country.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Province or State of Country.")]
        [System.Xml.Serialization.XmlElementAttribute("Province")]
        public MultilingualString Province { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("RoadAddressRef")]
        public RoadAddressRefStructure RoadAddressRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IPlaceObjectElementGroup : IDataManagedObjectElementGroup, IPlaceInternalGroup, IPlaceInternal2Group
    {
        
        PlaceObjectMembers Members
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PlaceObjectMembers", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PlaceObjectMembers
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PointRefStructure> _pointRef;
        
        [System.Xml.Serialization.XmlElementAttribute("PointRef")]
        public System.Collections.ObjectModel.Collection<PointRefStructure> PointRef
        {
            get
            {
                return _pointRef;
            }
            private set
            {
                _pointRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PointRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PointRefSpecified
        {
            get
            {
                return (this.PointRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PlaceObjectMembers" /> class.</para>
        /// </summary>
        public PlaceObjectMembers()
        {
            this._pointRef = new System.Collections.ObjectModel.Collection<PointRefStructure>();
            this._scheduledStopPointRef = new System.Collections.ObjectModel.Collection<ScheduledStopPointRefStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ScheduledStopPointRefStructure> _scheduledStopPointRef;
        
        [System.Xml.Serialization.XmlElementAttribute("ScheduledStopPointRef")]
        public System.Collections.ObjectModel.Collection<ScheduledStopPointRefStructure> ScheduledStopPointRef
        {
            get
            {
                return _scheduledStopPointRef;
            }
            private set
            {
                _scheduledStopPointRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ScheduledStopPointRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ScheduledStopPointRefSpecified
        {
            get
            {
                return (this.ScheduledStopPointRef.Count != 0);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PointRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("PointRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class PointRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ScheduledStopPointRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FromPointRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScheduledStopPointRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ToPointRef))]
    public partial class ScheduledStopPointRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IPlaceInternalGroup
    {
        
        MultilingualString Name
        {
            get;
            set;
        }
        
        MultilingualString ShortName
        {
            get;
            set;
        }
        
        MultilingualString Description
        {
            get;
            set;
        }
        
        PurposeOfGroupingRefStructure PurposeOfGroupingRef
        {
            get;
            set;
        }
        
        PrivateCodeStructure PrivateCode
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PurposeOfGroupingRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("PurposeOfGroupingRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class PurposeOfGroupingRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IPlaceInternal2Group
    {
        
        CentroidStructure Centroid
        {
            get;
            set;
        }
        
        Gml.TPolygon Polygon
        {
            get;
            set;
        }
        
        PlaceTypesStructure PlaceTypes
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CentroidStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Centroid", Namespace="http://www.netex.org.uk/netex")]
    public partial class CentroidStructure
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Location")]
        public LocationStructure Location { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LocationStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Location", Namespace="http://www.netex.org.uk/netex")]
    public partial class LocationStructure
    {
        
        /// <summary>
        /// <para>Longitude from Greenwich Meridian. -180 (East) to +180 (West). Decimal degrees. e.g. 2.356</para>
        /// <para>Longitude from Greenwich.</para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Longitude from Greenwich Meridian. -180 (East) to +180 (West). Decimal degrees. e" +
            ".g. 2.356")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-180", "180")]
        [System.Xml.Serialization.XmlElementAttribute("Longitude")]
        public decimal Longitude { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Longitude property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LongitudeSpecified { get; set; }
        
        /// <summary>
        /// <para>Latitude from equator. -90 (South) to +90 (North). Decimal degrees. e.g. 56.356</para>
        /// <para>Latitude from equator.</para>
        /// <para xml:lang="en">Minimum inclusive value: -90.</para>
        /// <para xml:lang="en">Maximum inclusive value: 90.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Latitude from equator. -90 (South) to +90 (North). Decimal degrees. e.g. 56.356")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-90", "90")]
        [System.Xml.Serialization.XmlElementAttribute("Latitude")]
        public decimal Latitude { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Latitude property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LatitudeSpecified { get; set; }
        
        /// <summary>
        /// <para>Altitude (metres) Above sea level.</para>
        /// <para>Altitude metres from sea level.</para>
        /// <para xml:lang="en">Minimum inclusive value: -1000.</para>
        /// <para xml:lang="en">Maximum inclusive value: +5000.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Altitude (metres) Above sea level.")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-1000", "+5000")]
        [System.Xml.Serialization.XmlElementAttribute("Altitude")]
        public decimal Altitude { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Altitude property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AltitudeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("pos", Namespace="http://www.opengis.net/gml/3.2")]
        public Gml.TPos Pos { get; set; }
        
        /// <summary>
        /// <para>Precision for point measurement. In meters.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Precision for point measurement. In meters.")]
        [System.Xml.Serialization.XmlElementAttribute("Precision")]
        public decimal Precision { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Precision property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrecisionSpecified { get; set; }
        
        /// <summary>
        /// <para>Note: WGS84 highly recommedended fro EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: WGS84 highly recommedended fro EPIP")]
        [System.Xml.Serialization.XmlAttributeAttribute("srsName")]
        public string SrsName { get; set; }
    }
    
    /// <summary>
    /// <para>Categorisation of PLACE.
    ///In EPIP STOP PLACEs shall be assigned
    ///one of the following two values:
    /// •monomodal_stop_place
    /// •general_stop_place
    ///E.g.
    ///ref="epip:monomodal_stop_place"</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Categorisation of PLACE. In EPIP STOP PLACEs shall be assigned one of the followi" +
        "ng two values: •monomodal_stop_place •general_stop_place E.g. ref=\"epip:monomoda" +
        "l_stop_place\"")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("placeTypes_Structure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("placeTypes", Namespace="http://www.netex.org.uk/netex")]
    public partial class PlaceTypesStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TypeOfPlaceRefStructure> _typeOfPlaceRef;
        
        [System.Xml.Serialization.XmlElementAttribute("TypeOfPlaceRef")]
        public System.Collections.ObjectModel.Collection<TypeOfPlaceRefStructure> TypeOfPlaceRef
        {
            get
            {
                return _typeOfPlaceRef;
            }
            private set
            {
                _typeOfPlaceRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TypeOfPlaceRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeOfPlaceRefSpecified
        {
            get
            {
                return (this.TypeOfPlaceRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PlaceTypesStructure" /> class.</para>
        /// </summary>
        public PlaceTypesStructure()
        {
            this._typeOfPlaceRef = new System.Collections.ObjectModel.Collection<TypeOfPlaceRefStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TypeOfPlaceRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TypeOfPlaceRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TypeOfPlaceRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Elements for an ADDRESS.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for an ADDRESS.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IAddressGroup
    {
        
        CountryRefStructure CountryRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Name of Counntry, derivedable from Country Ref.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Counntry, derivedable from Country Ref.")]
        MultilingualString CountryName
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Elements for a POSTAL ADDRESS.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for a POSTAL ADDRESS.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IPostalAddressGroup
    {
        
        /// <summary>
        /// <para>Number of house on street.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Number of house on street.")]
        string HouseNumber
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Name of Building.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Building.")]
        MultilingualString BuildingName
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>First line of Address.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("First line of Address.")]
        MultilingualString AddressLine1
        {
            get;
            set;
        }
        
        MultilingualString AddressLine2
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Street on which building is found.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Street on which building is found.")]
        MultilingualString Street
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Town, City, Village or other named settlement.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Town, City, Village or other named settlement.")]
        MultilingualString Town
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Subarea of Town.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Subarea of Town.")]
        MultilingualString Suburb
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Postcode or Zip code of address.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Postcode or Zip code of address.")]
        string PostCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Post code extension.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Post code extension.")]
        string PostCodeExtension
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Postal Region.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Postal Region.")]
        string PostalRegion
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Province or State of Country.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Province or State of Country.")]
        MultilingualString Province
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("RoadAddressRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("RoadAddressRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class RoadAddressRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Type for BOOKING ARRANGEMENTs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for BOOKING ARRANGEMENTs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BookingArrangementsStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BookingArrangementsStructure : IBookingArrangementsGroup
    {
        
        /// <summary>
        /// <para>Contact for Booking. +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Contact for Booking. +v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("BookingContact")]
        public ContactDetailsStructure BookingContact { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _bookingMethods;
        
        /// <summary>
        /// <para>Allowed Ways of Making a BOOKING.</para>
        /// <para>List of values for Flexible Booking values.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Allowed Ways of Making a BOOKING.")]
        [System.Xml.Serialization.XmlElementAttribute("BookingMethods")]
        public System.Collections.ObjectModel.Collection<string> BookingMethods
        {
            get
            {
                return _bookingMethods;
            }
            private set
            {
                _bookingMethods = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BookingMethods collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BookingMethodsSpecified
        {
            get
            {
                return (this.BookingMethods.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="BookingArrangementsStructure" /> class.</para>
        /// </summary>
        public BookingArrangementsStructure()
        {
            this._bookingMethods = new System.Collections.ObjectModel.Collection<string>();
            this._buyWhen = new System.Collections.ObjectModel.Collection<string>();
        }
        
        /// <summary>
        /// <para>Who can make a booking. Default is public.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Who can make a booking. Default is public.")]
        [System.Xml.Serialization.XmlElementAttribute("BookingAccess")]
        public BookingAccessEnumeration BookingAccess { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BookingAccess property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BookingAccessSpecified { get; set; }
        
        /// <summary>
        /// <para>When Booking can be made. +V1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("When Booking can be made. +V1.1")]
        [System.Xml.Serialization.XmlElementAttribute("BookWhen")]
        public PurchaseWhenEnumeration BookWhen { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BookWhen property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BookWhenSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _buyWhen;
        
        /// <summary>
        /// <para>When purchase can be made.  +V1.1</para>
        /// <para>List of Purchase Moment. values.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("When purchase can be made. +V1.1")]
        [System.Xml.Serialization.XmlElementAttribute("BuyWhen")]
        public System.Collections.ObjectModel.Collection<string> BuyWhen
        {
            get
            {
                return _buyWhen;
            }
            private set
            {
                _buyWhen = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BuyWhen collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BuyWhenSpecified
        {
            get
            {
                return (this.BuyWhen.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Latest time in day that booking can be made.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Latest time in day that booking can be made.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("LatestBookingTime")]
        public string LatestBookingTime { get; set; }
        
        /// <summary>
        /// <para>Minimum interval in advance of departure day or time that Service may be ordered.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Minimum interval in advance of departure day or time that Service may be ordered." +
            "")]
        [System.Xml.Serialization.XmlElementAttribute("MinimumBookingPeriod")]
        public string MinimumBookingPeriod { get; set; }
        
        /// <summary>
        /// <para>URL for booking. +V1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("URL for booking. +V1.1")]
        [System.Xml.Serialization.XmlElementAttribute("BookingUrl")]
        public string BookingUrl { get; set; }
        
        /// <summary>
        /// <para>Note about booking the FLEXIBLE LINE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note about booking the FLEXIBLE LINE.")]
        [System.Xml.Serialization.XmlElementAttribute("BookingNote")]
        public MultilingualString BookingNote { get; set; }
    }
    
    /// <summary>
    /// <para>Elements for BOOKING ARRANGEMENTs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for BOOKING ARRANGEMENTs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IBookingArrangementsGroup
    {
        
        /// <summary>
        /// <para>Contact for Booking. +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Contact for Booking. +v1.1")]
        ContactDetailsStructure BookingContact
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Allowed Ways of Making a BOOKING.</para>
        /// <para>List of values for Flexible Booking values.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Allowed Ways of Making a BOOKING.")]
        System.Collections.ObjectModel.Collection<string> BookingMethods
        {
            get;
        }
        
        /// <summary>
        /// <para>Who can make a booking. Default is public.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Who can make a booking. Default is public.")]
        BookingAccessEnumeration BookingAccess
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>When Booking can be made. +V1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("When Booking can be made. +V1.1")]
        PurchaseWhenEnumeration BookWhen
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>When purchase can be made.  +V1.1</para>
        /// <para>List of Purchase Moment. values.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("When purchase can be made. +V1.1")]
        System.Collections.ObjectModel.Collection<string> BuyWhen
        {
            get;
        }
        
        /// <summary>
        /// <para>Latest time in day that booking can be made.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Latest time in day that booking can be made.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        string LatestBookingTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Minimum interval in advance of departure day or time that Service may be ordered.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Minimum interval in advance of departure day or time that Service may be ordered." +
            "")]
        string MinimumBookingPeriod
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>URL for booking. +V1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("URL for booking. +V1.1")]
        string BookingUrl
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Note about booking the FLEXIBLE LINE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note about booking the FLEXIBLE LINE.")]
        MultilingualString BookingNote
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Allowed values for Booking Access.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Booking Access.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BookingAccessEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum BookingAccessEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("public")]
        Public,
        
        [System.Xml.Serialization.XmlEnumAttribute("authorisedPublic")]
        AuthorisedPublic,
        
        [System.Xml.Serialization.XmlEnumAttribute("staff")]
        Staff,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Allowed values for Purchase when.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Purchase when.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PurchaseWhenEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum PurchaseWhenEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("advanceOnly")]
        AdvanceOnly,
        
        [System.Xml.Serialization.XmlEnumAttribute("untilPreviousDay")]
        UntilPreviousDay,
        
        [System.Xml.Serialization.XmlEnumAttribute("dayOfTravelOnly")]
        DayOfTravelOnly,
        
        [System.Xml.Serialization.XmlEnumAttribute("advanceAndDayOfTravel")]
        AdvanceAndDayOfTravel,
        
        [System.Xml.Serialization.XmlEnumAttribute("timeOfTravelOnly")]
        TimeOfTravelOnly,
        
        [System.Xml.Serialization.XmlEnumAttribute("subscriptionChargeMoment")]
        SubscriptionChargeMoment,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ClassAttributeInFrameStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ClassAttributeInFrame", Namespace="http://www.netex.org.uk/netex")]
    public partial class ClassAttributeInFrameStructure
    {
        
        [System.Xml.Serialization.XmlElementAttribute("Type")]
        public string Type { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Mandatory")]
        public MandatoryEnumeration Mandatory { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Mandatory property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MandatorySpecified { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("name")]
        public System.Xml.XmlQualifiedName Name { get; set; }
    }
    
    /// <summary>
    /// <para>Allowed values for Mandatory.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Mandatory.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MandatoryEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("Mandatory", Namespace="http://www.netex.org.uk/netex")]
    public enum MandatoryEnumeration
    {
        
        /// <summary>
        /// <para>Include elements that meet selection criteria (e.g. validity condition).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Include elements that meet selection criteria (e.g. validity condition).")]
        [System.Xml.Serialization.XmlEnumAttribute("required")]
        Required,
        
        /// <summary>
        /// <para>Include elements that are referenced by primary element. E.g. TYPES OF VALUE, OPERATOR etc.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Include elements that are referenced by primary element. E.g. TYPES OF VALUE, OPE" +
            "RATOR etc.")]
        [System.Xml.Serialization.XmlEnumAttribute("optional")]
        Optional,
        
        /// <summary>
        /// <para>Include all elements.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Include all elements.")]
        [System.Xml.Serialization.XmlEnumAttribute("notAllowed")]
        NotAllowed,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ClassInFrameStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ClassInFrame", Namespace="http://www.netex.org.uk/netex")]
    public partial class ClassInFrameStructure
    {
        
        [System.Xml.Serialization.XmlElementAttribute("ClassRefType")]
        public ClassRefTypeEnumeration ClassRefType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ClassRefType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ClassRefTypeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Mandatory")]
        public MandatoryEnumeration Mandatory { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Mandatory property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MandatorySpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ClassAttributeInFrameStructure> _attributes;
        
        [System.Xml.Serialization.XmlArrayAttribute("attributes")]
        [System.Xml.Serialization.XmlArrayItemAttribute("ClassAttributeInFrame", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<ClassAttributeInFrameStructure> Attributes
        {
            get
            {
                return _attributes;
            }
            private set
            {
                _attributes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Attributes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AttributesSpecified
        {
            get
            {
                return (this.Attributes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ClassInFrameStructure" /> class.</para>
        /// </summary>
        public ClassInFrameStructure()
        {
            this._attributes = new System.Collections.ObjectModel.Collection<ClassAttributeInFrameStructure>();
            this._relationships = new System.Collections.ObjectModel.Collection<ClassRelationshipInFrameStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ClassRelationshipInFrameStructure> _relationships;
        
        [System.Xml.Serialization.XmlArrayAttribute("relationships")]
        [System.Xml.Serialization.XmlArrayItemAttribute("ClassRelationshipInFrame", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<ClassRelationshipInFrameStructure> Relationships
        {
            get
            {
                return _relationships;
            }
            private set
            {
                _relationships = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Relationships collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelationshipsSpecified
        {
            get
            {
                return (this.Relationships.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
    }
    
    /// <summary>
    /// <para>Allowed values for nature of reference.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for nature of reference.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ClassRefTypeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("ClassRefType", Namespace="http://www.netex.org.uk/netex")]
    public enum ClassRefTypeEnumeration
    {
        
        /// <summary>
        /// <para>Include elements that meet selection criteria (e.g. validity condition).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Include elements that meet selection criteria (e.g. validity condition).")]
        [System.Xml.Serialization.XmlEnumAttribute("members")]
        Members,
        
        /// <summary>
        /// <para>Include elements that are referenced by primary element. E.g. TYPES OF VALUE, OPERATOR etc.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Include elements that are referenced by primary element. E.g. TYPES OF VALUE, OPE" +
            "RATOR etc.")]
        [System.Xml.Serialization.XmlEnumAttribute("memberReferences")]
        MemberReferences,
        
        /// <summary>
        /// <para>Include all elements.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Include all elements.")]
        [System.Xml.Serialization.XmlEnumAttribute("all")]
        All,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("attributesStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("attributes", Namespace="http://www.netex.org.uk/netex")]
    public partial class AttributesStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ClassAttributeInFrameStructure> _classAttributeInFrame;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ClassAttributeInFrame")]
        public System.Collections.ObjectModel.Collection<ClassAttributeInFrameStructure> ClassAttributeInFrame
        {
            get
            {
                return _classAttributeInFrame;
            }
            private set
            {
                _classAttributeInFrame = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="AttributesStructure" /> class.</para>
        /// </summary>
        public AttributesStructure()
        {
            this._classAttributeInFrame = new System.Collections.ObjectModel.Collection<ClassAttributeInFrameStructure>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("relationships_SpecRelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("relationships", Namespace="http://www.netex.org.uk/netex")]
    public partial class RelationshipsSpecRelStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ClassRelationshipInFrameStructure> _classRelationshipInFrame;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ClassRelationshipInFrame")]
        public System.Collections.ObjectModel.Collection<ClassRelationshipInFrameStructure> ClassRelationshipInFrame
        {
            get
            {
                return _classRelationshipInFrame;
            }
            private set
            {
                _classRelationshipInFrame = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="RelationshipsSpecRelStructure" /> class.</para>
        /// </summary>
        public RelationshipsSpecRelStructure()
        {
            this._classRelationshipInFrame = new System.Collections.ObjectModel.Collection<ClassRelationshipInFrameStructure>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ClassRelationshipInFrameStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ClassRelationshipInFrame", Namespace="http://www.netex.org.uk/netex")]
    public partial class ClassRelationshipInFrameStructure
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("RelationshipRef")]
        public RelationshipRefStructure RelationshipRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Mandatory")]
        public MandatoryEnumeration Mandatory { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Mandatory property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MandatorySpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Containment")]
        public string Containment { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ModificationSet")]
        public ModificationSetEnumeration ModificationSet { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ModificationSet property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSetSpecified { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("name")]
        public string Name { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("RelationshipRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("RelationshipRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class RelationshipRefStructure
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ClassInFrameRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ClassInFrameRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ClassInFrameRefStructure
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("classRefType")]
        public ClassRefTypeEnumeration ClassRefType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ClassRefType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ClassRefTypeSpecified { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CodespaceStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Codespace", Namespace="http://www.netex.org.uk/netex")]
    public partial class CodespaceStructure
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Xmlns")]
        public string Xmlns { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("XmlnsUrl")]
        public string XmlnsUrl { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Mandatory in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    /// <summary>
    /// <para>The physical (spatial) possibility for a passenger to change from one public transport vehicle to another to continue the trip. Different times may be necessary to cover this link, depending on the kind of passenger</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The physical (spatial) possibility for a passenger to change from one public tran" +
        "sport vehicle to another to continue the trip. Different times may be necessary " +
        "to cover this link, depending on the kind of passenger")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Connection_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Connection", Namespace="http://www.netex.org.uk/netex")]
    public partial class ConnectionVersionStructure : IDataManagedObjectElementGroup, ITransferGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ConnectionVersionStructure" /> class.</para>
        /// </summary>
        public ConnectionVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of TRANSFER</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of TRANSFER")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Reference to TYPE OF TRANSFER.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to TYPE OF TRANSFER.")]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfTransferRef")]
        public TypeOfTransferRefStructure TypeOfTransferRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Distance of TRANSFER link.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Distance of TRANSFER link.")]
        [System.Xml.Serialization.XmlElementAttribute("Distance")]
        public decimal Distance { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Distance property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DistanceSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("TransferDuration")]
        public TransferDurationStructure TransferDuration { get; set; }
        
        /// <summary>
        /// <para>Walking TRANSFER TIMEs that apply to TRANSFER.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Walking TRANSFER TIMEs that apply to TRANSFER.")]
        [System.Xml.Serialization.XmlElementAttribute("WalkTransferDuration")]
        public TransferDurationStructure WalkTransferDuration { get; set; }
        
        /// <summary>
        /// <para>Whether timings and validity applies to both directions (true) or just to the from-to direction of the TRANSFER.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether timings and validity applies to both directions (true) or just to the fro" +
            "m-to direction of the TRANSFER.")]
        [System.Xml.Serialization.XmlElementAttribute("BothWays")]
        public bool BothWays { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BothWays property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BothWaysSpecified { get; set; }
        
        /// <summary>
        /// <para>Origin end of CONNECTION.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Origin end of CONNECTION.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("From")]
        public ConnectionEndStructure From { get; set; }
        
        /// <summary>
        /// <para>Destination end of CONNECTION.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Destination end of CONNECTION.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("To")]
        public ConnectionEndStructure To { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ITransferGroup
    {
        
        /// <summary>
        /// <para>Name of TRANSFER</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of TRANSFER")]
        MultilingualString Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Reference to TYPE OF TRANSFER.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to TYPE OF TRANSFER.")]
        TypeOfTransferRefStructure TypeOfTransferRef
        {
            get;
            set;
        }
        
        MultilingualString Description
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Distance of TRANSFER link.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Distance of TRANSFER link.")]
        decimal Distance
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        TransferDurationStructure TransferDuration
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Walking TRANSFER TIMEs that apply to TRANSFER.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Walking TRANSFER TIMEs that apply to TRANSFER.")]
        TransferDurationStructure WalkTransferDuration
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether timings and validity applies to both directions (true) or just to the from-to direction of the TRANSFER.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether timings and validity applies to both directions (true) or just to the fro" +
            "m-to direction of the TRANSFER.")]
        bool BothWays
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TypeOfTransferRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TypeOfTransferRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TypeOfTransferRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TransferDurationStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransferDuration))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WalkTransferDuration))]
    public partial class TransferDurationStructure
    {
        
        /// <summary>
        /// <para>Mandatory in EPIP. Default time needed for a traveller to make a TRANSFER.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP. Default time needed for a traveller to make a TRANSFER.")]
        [System.Xml.Serialization.XmlElementAttribute("DefaultDuration")]
        public string DefaultDuration { get; set; }
        
        /// <summary>
        /// <para>Time for a traveller familiar with the journey to make transfer.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Time for a traveller familiar with the journey to make transfer.")]
        [System.Xml.Serialization.XmlElementAttribute("FrequentTravellerDuration")]
        public string FrequentTravellerDuration { get; set; }
        
        /// <summary>
        /// <para>Time for an Occasional Traveller to make a TRANSFER.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Time for an Occasional Traveller to make a TRANSFER.")]
        [System.Xml.Serialization.XmlElementAttribute("OccasionalTravellerDuration")]
        public string OccasionalTravellerDuration { get; set; }
        
        /// <summary>
        /// <para>Time for a Mobility Restricted traveller to make a TRANSFER.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Time for a Mobility Restricted traveller to make a TRANSFER.")]
        [System.Xml.Serialization.XmlElementAttribute("MobilityRestrictedTravellerDuration")]
        public string MobilityRestrictedTravellerDuration { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ConnectionEndStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConnectionEndStructure
    {
        
        /// <summary>
        /// <para>Mandatory in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("ScheduledStopPointRef")]
        public ScheduledStopPointRefStructure ScheduledStopPointRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ConnectionRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ConnectionRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ConnectionRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CodespaceRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("DefaultCodespaceRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class CodespaceRefStructure
    {
        
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Not in EPIP</para>
    /// <para>Not in EPIP</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CustomerServiceContactDetailsStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("CustomerServiceContactDetails", Namespace="http://www.netex.org.uk/netex")]
    public partial class CustomerServiceContactDetailsStructure
    {
        
        [System.Xml.Serialization.XmlElementAttribute("Email")]
        public string Email { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Phone")]
        public string Phone { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Url")]
        public string Url { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DataSourceStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("DataSource", Namespace="http://www.netex.org.uk/netex")]
    public partial class DataSourceStructure : IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Unclear if in EPIP or not. Conflicting info in documentation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Unclear if in EPIP or not. Conflicting info in documentation.")]
        [System.Xml.Serialization.XmlElementAttribute("Email")]
        public string Email { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    /// <summary>
    /// <para>In EPIP each DAY TYPE is assigned to a OPERATING PERIOD that defines a set of OPERATING DAY dates.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("In EPIP each DAY TYPE is assigned to a OPERATING PERIOD that defines a set of OPE" +
        "RATING DAY dates.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DayTypeAssignmentStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("DayTypeAssignment", Namespace="http://www.netex.org.uk/netex")]
    public partial class DayTypeAssignmentStructure : IEntityAttributeGroup
    {
        
        /// <summary>
        /// <para>Allowed, but not needed in EPIP as already in scope of the only relevant ServiceCalendar</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Allowed, but not needed in EPIP as already in scope of the only relevant ServiceC" +
            "alendar")]
        [System.Xml.Serialization.XmlElementAttribute("ServiceCalendarRef")]
        public ServiceCalendarRefStructure ServiceCalendarRef { get; set; }
        
        /// <summary>
        /// <para>Reference to an OPERATING PERIOD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to an OPERATING PERIOD.")]
        [System.Xml.Serialization.XmlElementAttribute("OperatingPeriodRef")]
        public OperatingPeriodRefStructure OperatingPeriodRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. IN EPIP this is instead done using an OPERATING PERIOD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. IN EPIP this is instead done using an OPERATING PERIOD.")]
        [System.Xml.Serialization.XmlElementAttribute("OperatingDayRef")]
        public OperatingDayRefStructure OperatingDayRef { get; set; }
        
        /// <summary>
        /// <para>Calendar date of assignment.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Calendar date of assignment.")]
        [System.Xml.Serialization.XmlElementAttribute("Date", DataType="date")]
        public System.DateTime Date { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Date property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateSpecified { get; set; }
        
        /// <summary>
        /// <para>Reference to a DAY TYPE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a DAY TYPE.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("DayTypeRef")]
        public DayTypeRefStructure DayTypeRef { get; set; }
        
        /// <summary>
        /// <para>Whether available on assigned day. Defaults to true. Note that if the value is 'false' it overrides and removes otherwise stated validity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether available on assigned day. Defaults to true. Note that if the value is \'f" +
            "alse\' it overrides and removes otherwise stated validity.")]
        [System.Xml.Serialization.XmlElementAttribute("isAvailable")]
        public bool IsAvailable { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IsAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsAvailableSpecified { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public string Order { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OperatingPeriodRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("OperatingPeriodRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class OperatingPeriodRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OperatingDayRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("OperatingDayRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class OperatingDayRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DefaultConnection_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("DefaultConnection", Namespace="http://www.netex.org.uk/netex")]
    public partial class DefaultConnectionVersionStructure : IDataManagedObjectElementGroup, ITransferGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DefaultConnectionVersionStructure" /> class.</para>
        /// </summary>
        public DefaultConnectionVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of TRANSFER</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of TRANSFER")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Reference to TYPE OF TRANSFER.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to TYPE OF TRANSFER.")]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfTransferRef")]
        public TypeOfTransferRefStructure TypeOfTransferRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Distance of TRANSFER link.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Distance of TRANSFER link.")]
        [System.Xml.Serialization.XmlElementAttribute("Distance")]
        public decimal Distance { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Distance property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DistanceSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("TransferDuration")]
        public TransferDurationStructure TransferDuration { get; set; }
        
        /// <summary>
        /// <para>Walking TRANSFER TIMEs that apply to TRANSFER.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Walking TRANSFER TIMEs that apply to TRANSFER.")]
        [System.Xml.Serialization.XmlElementAttribute("WalkTransferDuration")]
        public TransferDurationStructure WalkTransferDuration { get; set; }
        
        /// <summary>
        /// <para>Whether timings and validity applies to both directions (true) or just to the from-to direction of the TRANSFER.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether timings and validity applies to both directions (true) or just to the fro" +
            "m-to direction of the TRANSFER.")]
        [System.Xml.Serialization.XmlElementAttribute("BothWays")]
        public bool BothWays { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BothWays property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BothWaysSpecified { get; set; }
        
        /// <summary>
        /// <para>DEFAULT CONNECTION applies if transferring from this TRANSPORT MODE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("DEFAULT CONNECTION applies if transferring from this TRANSPORT MODE.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("From")]
        public DefaultConnectionEndStructure From { get; set; }
        
        /// <summary>
        /// <para>DEFAULT CONNECTION applies if transferring to this TRANSPORT MODE.  Note that the from and to attribute can refer the same TRANSPORT MODE,
        ///therefore meaning that the default connection information is valid for all connections internal to the
        ///referenced place (sic?!).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"DEFAULT CONNECTION applies if transferring to this TRANSPORT MODE. Note that the from and to attribute can refer the same TRANSPORT MODE, therefore meaning that the default connection information is valid for all connections internal to the referenced place (sic?!).")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("To")]
        public DefaultConnectionEndStructure To { get; set; }
        
        /// <summary>
        /// <para>TOPOGRAPHIC PLACE to which DEFAULT CONNECTION
        ///applies.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("TOPOGRAPHIC PLACE to which DEFAULT CONNECTION applies.")]
        [System.Xml.Serialization.XmlElementAttribute("TopographicPlaceView")]
        public TopographicPlaceViewStructure TopographicPlaceView { get; set; }
        
        /// <summary>
        /// <para>SITE ELEMENT to which DEFAULT CONNECTION
        ///applies.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("SITE ELEMENT to which DEFAULT CONNECTION applies.")]
        [System.Xml.Serialization.XmlElementAttribute("SiteElementRef")]
        public SiteElementRefStructure SiteElementRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DefaultConnectionEndStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DefaultConnectionEndStructure
    {
        
        /// <summary>
        /// <para>Identifier of MODE of end point of TRANSFER.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of MODE of end point of TRANSFER.")]
        [System.Xml.Serialization.XmlElementAttribute("TransportMode")]
        public VehicleModeEnumeration TransportMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransportMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TransportModeSpecified { get; set; }
        
        /// <summary>
        /// <para>Not part of EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not part of EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("OperatorView")]
        public OperatorViewStructure OperatorView { get; set; }
    }
    
    /// <summary>
    /// <para>Allowed values for MODES of Public Transport applicable to timetabled public transport.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for MODES of Public Transport applicable to timetabled public tran" +
        "sport.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("VehicleModeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("PrimaryMode", Namespace="http://www.netex.org.uk/netex")]
    public enum VehicleModeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("air")]
        Air,
        
        [System.Xml.Serialization.XmlEnumAttribute("bus")]
        Bus,
        
        [System.Xml.Serialization.XmlEnumAttribute("coach")]
        Coach,
        
        [System.Xml.Serialization.XmlEnumAttribute("ferry")]
        Ferry,
        
        [System.Xml.Serialization.XmlEnumAttribute("metro")]
        Metro,
        
        [System.Xml.Serialization.XmlEnumAttribute("rail")]
        Rail,
        
        [System.Xml.Serialization.XmlEnumAttribute("trolleyBus")]
        TrolleyBus,
        
        [System.Xml.Serialization.XmlEnumAttribute("tram")]
        Tram,
        
        [System.Xml.Serialization.XmlEnumAttribute("water")]
        Water,
        
        [System.Xml.Serialization.XmlEnumAttribute("cableway")]
        Cableway,
        
        [System.Xml.Serialization.XmlEnumAttribute("funicular")]
        Funicular,
        
        [System.Xml.Serialization.XmlEnumAttribute("lift")]
        Lift,
        
        [System.Xml.Serialization.XmlEnumAttribute("snowAndIce")]
        SnowAndIce,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OperatorViewStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("OperatorView", Namespace="http://www.netex.org.uk/netex")]
    public partial class OperatorViewStructure
    {
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("OperatorRef")]
        public OperatorRefStructure OperatorRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeNames")]
        public AlternativeNamesStructure AlternativeNames { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OperatorRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("OperatorRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class OperatorRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TopographicPlaceViewStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TopographicPlaceView", Namespace="http://www.netex.org.uk/netex")]
    public partial class TopographicPlaceViewStructure
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TopographicPlaceRef")]
        public TopographicPlaceRefStructure TopographicPlaceRef { get; set; }
    }
    
    /// <summary>
    /// <para>Reference to a TOPOGRAPHIC PLACE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Reference to a TOPOGRAPHIC PLACE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TopographicPlaceRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TopographicPlaceRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TopographicPlaceRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SiteElementRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("SiteElementRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class SiteElementRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DefaultDataSourceRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("DefaultDataSourceRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class DefaultDataSourceRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("QualifyStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QualifyStructure
    {
        
        /// <summary>
        /// <para>Qualifying name. Place name characters only allowed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Qualifying name. Place name characters only allowed.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("QualifierName")]
        public MultilingualString QualifierName { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DescriptorStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DescriptorStructure
    {
        
        /// <summary>
        /// <para>Not in EPIP. Name of the TOPOGRAPHIC PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Name of the TOPOGRAPHIC PLACE.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. Qualifier to use when presenting name to distinguish it from other similarly named elements.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Qualifier to use when presenting name to distinguish it from other s" +
            "imilarly named elements.")]
        [System.Xml.Serialization.XmlElementAttribute("Qualify")]
        public QualifyStructure Qualify { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DestinationViewStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DestinationViewStructure
    {
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ScheduledStopPointRef")]
        public ScheduledStopPointRefStructure ScheduledStopPointRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("DestinationDisplayRef")]
        public DestinationDisplayRefStructure DestinationDisplayRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TopographicPlaceView")]
        public TopographicPlaceViewStructure TopographicPlaceView { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DestinationDisplayRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("DestinationDisplayRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class DestinationDisplayRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DestinationDisplay_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("DestinationDisplay", Namespace="http://www.netex.org.uk/netex")]
    public partial class DestinationDisplayVersionStructure : IDataManagedObjectElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DestinationDisplayVersionStructure" /> class.</para>
        /// </summary>
        public DestinationDisplayVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Not part of EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not part of EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        /// <summary>
        /// <para>Name of destination to show on side of VEHICLE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of destination to show on side of VEHICLE.")]
        [System.Xml.Serialization.XmlElementAttribute("SideText")]
        public MultilingualString SideText { get; set; }
        
        /// <summary>
        /// <para>Name of destination to show on front of VEHICLE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of destination to show on front of VEHICLE.")]
        [System.Xml.Serialization.XmlElementAttribute("FrontText")]
        public MultilingualString FrontText { get; set; }
        
        /// <summary>
        /// <para>Public code to show for Destination.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Public code to show for Destination.")]
        [System.Xml.Serialization.XmlElementAttribute("PublicCode")]
        public string PublicCode { get; set; }
        
        /// <summary>
        /// <para>Headings that distinguish the route by which the service runs to the Destination  Name .</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Headings that distinguish the route by which the service runs to the Destination " +
            "Name .")]
        [System.Xml.Serialization.XmlElementAttribute("vias")]
        public ViasStructure Vias { get; set; }
        
        /// <summary>
        /// <para>DEITINATION DISPLAY VARIANT for DESTINATION DISPLAY. Variants may  be for use in a specifc context or on a specifc media, or a combination of both.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("DEITINATION DISPLAY VARIANT for DESTINATION DISPLAY. Variants may be for use in a" +
            " specifc context or on a specifc media, or a combination of both.")]
        [System.Xml.Serialization.XmlElementAttribute("variants")]
        public DestinationDisplayVariantsRelStructure Variants { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("viasStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("vias", Namespace="http://www.netex.org.uk/netex")]
    public partial class ViasStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ViaStructure> _via;
        
        /// <summary>
        /// <para>A secondary heading  (e.g. ROUTE POINT or other place) showing intermediate places on the way to a destination.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A secondary heading (e.g. ROUTE POINT or other place) showing intermediate places" +
            " on the way to a destination.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Via")]
        public System.Collections.ObjectModel.Collection<ViaStructure> Via
        {
            get
            {
                return _via;
            }
            private set
            {
                _via = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ViasStructure" /> class.</para>
        /// </summary>
        public ViasStructure()
        {
            this._via = new System.Collections.ObjectModel.Collection<ViaStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ViaStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Via", Namespace="http://www.netex.org.uk/netex")]
    public partial class ViaStructure : IVersionedChildElementGroup, IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ViaStructure" /> class.</para>
        /// </summary>
        public ViaStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("DestinationDisplayRef")]
        public DestinationDisplayRefStructure DestinationDisplayRef { get; set; }
        
        /// <summary>
        /// <para>Mandatory in EPIP. Arbitrary text name of VIA point. May be place name or other string.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP. Arbitrary text name of VIA point. May be place name or other s" +
            "tring.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("destinationDisplayVariants_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DestinationDisplayVariantsRelStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DestinationDisplayVariantVersionStructure> _destinationDisplayVariant;
        
        /// <summary>
        /// <para>A variant text of a DESTINATION DISPLAY for informational purposes.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A variant text of a DESTINATION DISPLAY for informational purposes.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("DestinationDisplayVariant")]
        public System.Collections.ObjectModel.Collection<DestinationDisplayVariantVersionStructure> DestinationDisplayVariant
        {
            get
            {
                return _destinationDisplayVariant;
            }
            private set
            {
                _destinationDisplayVariant = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DestinationDisplayVariantsRelStructure" /> class.</para>
        /// </summary>
        public DestinationDisplayVariantsRelStructure()
        {
            this._destinationDisplayVariant = new System.Collections.ObjectModel.Collection<DestinationDisplayVariantVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DestinationDisplayVariant_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("DestinationDisplayVariant", Namespace="http://www.netex.org.uk/netex")]
    public partial class DestinationDisplayVariantVersionStructure : IDataManagedObjectElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DestinationDisplayVariantVersionStructure" /> class.</para>
        /// </summary>
        public DestinationDisplayVariantVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private DeliveryVariantTypeEnumeration _destinationDisplayVariantMediaType = Netex.DeliveryVariantTypeEnumeration.Any;
        
        /// <summary>
        /// <para>Type of DESTINATION DISPLAY VARIANT. Default is 'any'.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type of DESTINATION DISPLAY VARIANT. Default is \'any\'.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("DestinationDisplayVariantMediaType")]
        public DeliveryVariantTypeEnumeration DestinationDisplayVariantMediaType
        {
            get
            {
                return _destinationDisplayVariantMediaType;
            }
            set
            {
                _destinationDisplayVariantMediaType = value;
            }
        }
        
        /// <summary>
        /// <para>Text to display on the side of the vehicle associated with
        ///DESTINATION DISPLAY VARIANT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Text to display on the side of the vehicle associated with DESTINATION DISPLAY VA" +
            "RIANT.")]
        [System.Xml.Serialization.XmlElementAttribute("SideText")]
        public MultilingualString SideText { get; set; }
        
        /// <summary>
        /// <para>Front of vehicle text associated with DESTINATION DISPLAY
        ///VARIANT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Front of vehicle text associated with DESTINATION DISPLAY VARIANT.")]
        [System.Xml.Serialization.XmlElementAttribute("FrontText")]
        public MultilingualString FrontText { get; set; }
        
        /// <summary>
        /// <para>Destinations that the Service goes via.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Destinations that the Service goes via.")]
        [System.Xml.Serialization.XmlElementAttribute("vias")]
        public ViasStructure Vias { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Allowed values for Notice delivery media type.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Notice delivery media type.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DeliveryVariantTypeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum DeliveryVariantTypeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("any")]
        Any,
        
        [System.Xml.Serialization.XmlEnumAttribute("printed")]
        Printed,
        
        [System.Xml.Serialization.XmlEnumAttribute("textToSpeech")]
        TextToSpeech,
        
        [System.Xml.Serialization.XmlEnumAttribute("recordedAnnouncement")]
        RecordedAnnouncement,
        
        [System.Xml.Serialization.XmlEnumAttribute("web")]
        Web,
        
        [System.Xml.Serialization.XmlEnumAttribute("mobile")]
        Mobile,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>A classification for the general orientation of ROUTEs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A classification for the general orientation of ROUTEs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Direction_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Direction", Namespace="http://www.netex.org.uk/netex")]
    public partial class DirectionVersionStructure : IDataManagedObjectElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DirectionVersionStructure" /> class.</para>
        /// </summary>
        public DirectionVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        /// <summary>
        /// <para>A fixed value e.g. ‘outbound’, ‘inbound’, ‘clockwise’,
        ///‘anticlockwise’ associated with this direction.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A fixed value e.g. ‘outbound’, ‘inbound’, ‘clockwise’, ‘anticlockwise’ associated" +
            " with this direction.")]
        [System.Xml.Serialization.XmlElementAttribute("DirectionType")]
        public DirectionTypeEnumeration DirectionType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DirectionType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirectionTypeSpecified { get; set; }
        
        /// <summary>
        /// <para>Reference to a DIRECTION that runs counter to this
        ///DIRECTION.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a DIRECTION that runs counter to this DIRECTION.")]
        [System.Xml.Serialization.XmlElementAttribute("OppositeDirectionRef")]
        public DirectionRefStructure OppositeDirectionRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Allowed values for DIRECTION.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for DIRECTION.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DirectionTypeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("DirectionType", Namespace="http://www.netex.org.uk/netex")]
    public enum DirectionTypeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("inbound")]
        Inbound,
        
        [System.Xml.Serialization.XmlEnumAttribute("outbound")]
        Outbound,
        
        [System.Xml.Serialization.XmlEnumAttribute("clockwise")]
        Clockwise,
        
        [System.Xml.Serialization.XmlEnumAttribute("anticlockwise")]
        Anticlockwise,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DynamicStopAssignment_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("DynamicStopAssignment", Namespace="http://www.netex.org.uk/netex")]
    public partial class DynamicStopAssignmentVersionStructure : IDataManagedObjectElementGroup, IPassengerStopAssignmentContentGroup, IJourneyPatternRefGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DynamicStopAssignmentVersionStructure" /> class.</para>
        /// </summary>
        public DynamicStopAssignmentVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._trainElements = new System.Collections.ObjectModel.Collection<TrainStopAssignmentVersionStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Mandatory in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("ScheduledStopPointRef")]
        public ScheduledStopPointRefStructure ScheduledStopPointRef { get; set; }
        
        /// <summary>
        /// <para>Should be mandatory according to EPIP. STOP PLACE to which SCHEDULED STOP POINT is to be  assigned.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Should be mandatory according to EPIP. STOP PLACE to which SCHEDULED STOP POINT i" +
            "s to be assigned.")]
        [System.Xml.Serialization.XmlElementAttribute("StopPlaceRef")]
        public StopPlaceRefStructure StopPlaceRef { get; set; }
        
        /// <summary>
        /// <para>QUAY to which SCHEDULED STOP POINT is to be assigned.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("QUAY to which SCHEDULED STOP POINT is to be assigned.")]
        [System.Xml.Serialization.XmlElementAttribute("QuayRef")]
        public QuayRefStructure QuayRef { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TrainStopAssignmentVersionStructure> _trainElements;
        
        /// <summary>
        /// <para>Train elements to which SCHEDULED STOP POINT is to be assigned.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Train elements to which SCHEDULED STOP POINT is to be assigned.")]
        [System.Xml.Serialization.XmlArrayAttribute("trainElements")]
        [System.Xml.Serialization.XmlArrayItemAttribute("TrainStopAssignment", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<TrainStopAssignmentVersionStructure> TrainElements
        {
            get
            {
                return _trainElements;
            }
            private set
            {
                _trainElements = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TrainElements collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TrainElementsSpecified
        {
            get
            {
                return (this.TrainElements.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("JourneyPatternRef")]
        public JourneyPatternRefStructure JourneyPatternRef { get; set; }
        
        /// <summary>
        /// <para>The only concrete JourneyPatternRef in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The only concrete JourneyPatternRef in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("ServiceJourneyPatternRef")]
        public ServiceJourneyPatternRefStructure ServiceJourneyPatternRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("ServicePatternRef")]
        public JourneyPatternRefStructure ServicePatternRef { get; set; }
        
        /// <summary>
        /// <para>PASSENGER STOP ASSIGNMENT that DYNAMIC STOP
        ///ASSIGNMENT overrides.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("PASSENGER STOP ASSIGNMENT that DYNAMIC STOP ASSIGNMENT overrides.")]
        [System.Xml.Serialization.XmlElementAttribute("PassengerStopAssignmentRef")]
        public PassengerStopAssignmentRefStructure PassengerStopAssignmentRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
        
        /// <summary>
        /// <para>EPIP: Mandatory in StopAssignment</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("EPIP: Mandatory in StopAssignment")]
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public string Order { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IPassengerStopAssignmentContentGroup
    {
        
        /// <summary>
        /// <para>Mandatory in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP")]
        ScheduledStopPointRefStructure ScheduledStopPointRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Should be mandatory according to EPIP. STOP PLACE to which SCHEDULED STOP POINT is to be  assigned.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Should be mandatory according to EPIP. STOP PLACE to which SCHEDULED STOP POINT i" +
            "s to be assigned.")]
        StopPlaceRefStructure StopPlaceRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>QUAY to which SCHEDULED STOP POINT is to be assigned.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("QUAY to which SCHEDULED STOP POINT is to be assigned.")]
        QuayRefStructure QuayRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Train elements to which SCHEDULED STOP POINT is to be assigned.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Train elements to which SCHEDULED STOP POINT is to be assigned.")]
        System.Collections.ObjectModel.Collection<TrainStopAssignmentVersionStructure> TrainElements
        {
            get;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("StopPlaceRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("StopPlaceRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class StopPlaceRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("QuayRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParentQuayRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(QuayRef))]
    public partial class QuayRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PassengerStopAssignmentContentGroupTrainElements", Namespace="http://www.netex.org.uk/netex", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PassengerStopAssignmentContentGroupTrainElements
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TrainStopAssignmentVersionStructure> _trainStopAssignment;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TrainStopAssignment")]
        public System.Collections.ObjectModel.Collection<TrainStopAssignmentVersionStructure> TrainStopAssignment
        {
            get
            {
                return _trainStopAssignment;
            }
            private set
            {
                _trainStopAssignment = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PassengerStopAssignmentContentGroupTrainElements" /> class.</para>
        /// </summary>
        public PassengerStopAssignmentContentGroupTrainElements()
        {
            this._trainStopAssignment = new System.Collections.ObjectModel.Collection<TrainStopAssignmentVersionStructure>();
        }
    }
    
    /// <summary>
    /// <para>Assignment of a scheduled train stop point to a STOP PLACE and quay. etc.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Assignment of a scheduled train stop point to a STOP PLACE and quay. etc.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TrainStopAssignment_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TrainStopAssignment", Namespace="http://www.netex.org.uk/netex")]
    public partial class TrainStopAssignmentVersionStructure : IDataManagedObjectElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TrainStopAssignmentVersionStructure" /> class.</para>
        /// </summary>
        public TrainStopAssignmentVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Mandatory in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ScheduledStopPointRef")]
        public ScheduledStopPointRefStructure ScheduledStopPointRef { get; set; }
        
        /// <summary>
        /// <para>PASSENGER STOP ASSIGNMENT that this is part of.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("PASSENGER STOP ASSIGNMENT that this is part of.")]
        [System.Xml.Serialization.XmlElementAttribute("PassengerStopAssignmentRef")]
        public PassengerStopAssignmentRefStructure PassengerStopAssignmentRef { get; set; }
        
        /// <summary>
        /// <para>TRAIN to which TRAIN STOP ASSIGNMENT applies.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("TRAIN to which TRAIN STOP ASSIGNMENT applies.")]
        [System.Xml.Serialization.XmlElementAttribute("TrainRef")]
        public TrainRefStructure TrainRef { get; set; }
        
        /// <summary>
        /// <para>TRAIN COMPONENT to which TRAIN STOP
        ///ASSIGNMENT applies.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("TRAIN COMPONENT to which TRAIN STOP ASSIGNMENT applies.")]
        [System.Xml.Serialization.XmlElementAttribute("TrainComponentRef")]
        public TrainComponentRefStructure TrainComponentRef { get; set; }
        
        /// <summary>
        /// <para>Relative position of TRAIN ELEMENT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Relative position of TRAIN ELEMENT.")]
        [System.Xml.Serialization.XmlElementAttribute("PositionOfTrainElement")]
        public string PositionOfTrainElement { get; set; }
        
        /// <summary>
        /// <para>A specific ENTRANCE to the VEHICLE. E.g. Front, rear.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A specific ENTRANCE to the VEHICLE. E.g. Front, rear.")]
        [System.Xml.Serialization.XmlElementAttribute("EntranceToVehicle")]
        public MultilingualString EntranceToVehicle { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
        
        /// <summary>
        /// <para>EPIP: Mandatory in StopAssignment</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("EPIP: Mandatory in StopAssignment")]
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public string Order { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PassengerStopAssignmentRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("PassengerStopAssignmentRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class PassengerStopAssignmentRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TrainRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TrainRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TrainRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TrainComponentRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TrainComponentRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TrainComponentRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IJourneyPatternRefGroup
    {
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        JourneyPatternRefStructure JourneyPatternRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>The only concrete JourneyPatternRef in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The only concrete JourneyPatternRef in EPIP.")]
        ServiceJourneyPatternRefStructure ServiceJourneyPatternRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        JourneyPatternRefStructure ServicePatternRef
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("JourneyPatternRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(JourneyPatternRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServicePatternRef))]
    public partial class JourneyPatternRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ServiceJourneyPatternRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ServiceJourneyPatternRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ServiceJourneyPatternRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("EntranceRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("EntranceRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class EntranceRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Type for FLEXIBLE LINE.</para>
    /// <para>A group of FLEXIBLE ROUTEs of which is generally known to the public by a similar name or number and which have common booking arrangements.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for FLEXIBLE LINE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("FlexibleLineViewStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("FlexibleLineView", Namespace="http://www.netex.org.uk/netex")]
    public partial class FlexibleLineViewStructure : IBookingArrangementsGroup
    {
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("LineRef")]
        public LineRefStructure LineRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of LINE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of LINE.")]
        [System.Xml.Serialization.XmlElementAttribute("PublicCode")]
        public string PublicCode { get; set; }
        
        /// <summary>
        /// <para>Name of LINE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of LINE.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Short name of LINE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Short name of LINE.")]
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        /// <summary>
        /// <para>TRANSPORT MODE of LINE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("TRANSPORT MODE of LINE.")]
        [System.Xml.Serialization.XmlElementAttribute("TransportMode")]
        public AllVehicleModesOfTransportEnumeration TransportMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransportMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TransportModeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TransportSubmode")]
        public TransportSubmodeStructure TransportSubmode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("OperatorRef")]
        public OperatorRefStructure OperatorRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TypeOfLineRef")]
        public TypeOfLineRefStructure TypeOfLineRef { get; set; }
        
        /// <summary>
        /// <para>Type of FLEXIBLE LINE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type of FLEXIBLE LINE.")]
        [System.Xml.Serialization.XmlElementAttribute("FlexibleLineType")]
        public FlexibleLineTypeEnumeration FlexibleLineType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FlexibleLineType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FlexibleLineTypeSpecified { get; set; }
        
        /// <summary>
        /// <para>Contact for Booking. +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Contact for Booking. +v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("BookingContact")]
        public ContactDetailsStructure BookingContact { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _bookingMethods;
        
        /// <summary>
        /// <para>Allowed Ways of Making a BOOKING.</para>
        /// <para>List of values for Flexible Booking values.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Allowed Ways of Making a BOOKING.")]
        [System.Xml.Serialization.XmlElementAttribute("BookingMethods")]
        public System.Collections.ObjectModel.Collection<string> BookingMethods
        {
            get
            {
                return _bookingMethods;
            }
            private set
            {
                _bookingMethods = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BookingMethods collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BookingMethodsSpecified
        {
            get
            {
                return (this.BookingMethods.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="FlexibleLineViewStructure" /> class.</para>
        /// </summary>
        public FlexibleLineViewStructure()
        {
            this._bookingMethods = new System.Collections.ObjectModel.Collection<string>();
            this._buyWhen = new System.Collections.ObjectModel.Collection<string>();
        }
        
        /// <summary>
        /// <para>Who can make a booking. Default is public.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Who can make a booking. Default is public.")]
        [System.Xml.Serialization.XmlElementAttribute("BookingAccess")]
        public BookingAccessEnumeration BookingAccess { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BookingAccess property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BookingAccessSpecified { get; set; }
        
        /// <summary>
        /// <para>When Booking can be made. +V1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("When Booking can be made. +V1.1")]
        [System.Xml.Serialization.XmlElementAttribute("BookWhen")]
        public PurchaseWhenEnumeration BookWhen { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BookWhen property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BookWhenSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _buyWhen;
        
        /// <summary>
        /// <para>When purchase can be made.  +V1.1</para>
        /// <para>List of Purchase Moment. values.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("When purchase can be made. +V1.1")]
        [System.Xml.Serialization.XmlElementAttribute("BuyWhen")]
        public System.Collections.ObjectModel.Collection<string> BuyWhen
        {
            get
            {
                return _buyWhen;
            }
            private set
            {
                _buyWhen = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BuyWhen collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BuyWhenSpecified
        {
            get
            {
                return (this.BuyWhen.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Latest time in day that booking can be made.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Latest time in day that booking can be made.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("LatestBookingTime")]
        public string LatestBookingTime { get; set; }
        
        /// <summary>
        /// <para>Minimum interval in advance of departure day or time that Service may be ordered.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Minimum interval in advance of departure day or time that Service may be ordered." +
            "")]
        [System.Xml.Serialization.XmlElementAttribute("MinimumBookingPeriod")]
        public string MinimumBookingPeriod { get; set; }
        
        /// <summary>
        /// <para>URL for booking. +V1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("URL for booking. +V1.1")]
        [System.Xml.Serialization.XmlElementAttribute("BookingUrl")]
        public string BookingUrl { get; set; }
        
        /// <summary>
        /// <para>Note about booking the FLEXIBLE LINE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note about booking the FLEXIBLE LINE.")]
        [System.Xml.Serialization.XmlElementAttribute("BookingNote")]
        public MultilingualString BookingNote { get; set; }
    }
    
    /// <summary>
    /// <para>Reference to a LINE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Reference to a LINE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LineRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("LineRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class LineRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Allowed values for MODES of Transport : TPEG pti_table 01.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for MODES of Transport : TPEG pti_table 01.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AllVehicleModesOfTransportEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum AllVehicleModesOfTransportEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("all")]
        All,
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("bus")]
        Bus,
        
        [System.Xml.Serialization.XmlEnumAttribute("trolleyBus")]
        TrolleyBus,
        
        [System.Xml.Serialization.XmlEnumAttribute("tram")]
        Tram,
        
        [System.Xml.Serialization.XmlEnumAttribute("coach")]
        Coach,
        
        [System.Xml.Serialization.XmlEnumAttribute("rail")]
        Rail,
        
        [System.Xml.Serialization.XmlEnumAttribute("intercityRail")]
        IntercityRail,
        
        [System.Xml.Serialization.XmlEnumAttribute("urbanRail")]
        UrbanRail,
        
        [System.Xml.Serialization.XmlEnumAttribute("metro")]
        Metro,
        
        [System.Xml.Serialization.XmlEnumAttribute("air")]
        Air,
        
        [System.Xml.Serialization.XmlEnumAttribute("water")]
        Water,
        
        [System.Xml.Serialization.XmlEnumAttribute("cableway")]
        Cableway,
        
        [System.Xml.Serialization.XmlEnumAttribute("funicular")]
        Funicular,
        
        [System.Xml.Serialization.XmlEnumAttribute("snowAndIce")]
        SnowAndIce,
        
        [System.Xml.Serialization.XmlEnumAttribute("taxi")]
        Taxi,
        
        /// <summary>
        /// <para>See pti12_x.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("See pti12_x.")]
        [System.Xml.Serialization.XmlEnumAttribute("selfDrive")]
        SelfDrive,
    }
    
    /// <summary>
    /// <para>Type for Transport Sub mode.</para>
    /// <para>A submode of a Public Transport MODE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for Transport Sub mode.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TransportSubmodeStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TransportSubmode", Namespace="http://www.netex.org.uk/netex")]
    public partial class TransportSubmodeStructure : IPtSubmodeChoiceGroup
    {
        
        [System.Xml.Serialization.XmlElementAttribute("AirSubmode")]
        public AirSubmodeEnumeration AirSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AirSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AirSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("BusSubmode")]
        public BusSubmodeEnumeration BusSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BusSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BusSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("CoachSubmode")]
        public CoachSubmodeEnumeration CoachSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CoachSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CoachSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("FunicularSubmode")]
        public FunicularSubmodeEnumeration FunicularSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FunicularSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FunicularSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("MetroSubmode")]
        public MetroSubmodeEnumeration MetroSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MetroSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MetroSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TramSubmode")]
        public TramSubmodeEnumeration TramSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TramSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TramSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TelecabinSubmode")]
        public TelecabinSubmodeEnumeration TelecabinSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TelecabinSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TelecabinSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("RailSubmode")]
        public RailSubmodeEnumeration RailSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RailSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RailSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("WaterSubmode")]
        public WaterSubmodeEnumeration WaterSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WaterSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WaterSubmodeSpecified { get; set; }
        
        /// <summary>
        /// <para>Extra: Snow and Ice Submode. +v1.1s</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Extra: Snow and Ice Submode. +v1.1s")]
        [System.Xml.Serialization.XmlElementAttribute("SnowAndIceSubmode")]
        public SnowAndIceSubmodeEnumeration SnowAndIceSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SnowAndIceSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SnowAndIceSubmodeSpecified { get; set; }
    }
    
    /// <summary>
    /// <para>PT Transport Sub Modes.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("PT Transport Sub Modes.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IPtSubmodeChoiceGroup
    {
        
        AirSubmodeEnumeration AirSubmode
        {
            get;
            set;
        }
        
        BusSubmodeEnumeration BusSubmode
        {
            get;
            set;
        }
        
        CoachSubmodeEnumeration CoachSubmode
        {
            get;
            set;
        }
        
        FunicularSubmodeEnumeration FunicularSubmode
        {
            get;
            set;
        }
        
        MetroSubmodeEnumeration MetroSubmode
        {
            get;
            set;
        }
        
        TramSubmodeEnumeration TramSubmode
        {
            get;
            set;
        }
        
        TelecabinSubmodeEnumeration TelecabinSubmode
        {
            get;
            set;
        }
        
        RailSubmodeEnumeration RailSubmode
        {
            get;
            set;
        }
        
        WaterSubmodeEnumeration WaterSubmode
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Extra: Snow and Ice Submode. +v1.1s</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Extra: Snow and Ice Submode. +v1.1s")]
        SnowAndIceSubmodeEnumeration SnowAndIceSubmode
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Values for Air MODEs of TRANSPORT: TPEG pti_table_08.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Values for Air MODEs of TRANSPORT: TPEG pti_table_08.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AirSubmodeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("AirSubmode", Namespace="http://www.netex.org.uk/netex")]
    public enum AirSubmodeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("undefined")]
        Undefined,
        
        [System.Xml.Serialization.XmlEnumAttribute("internationalFlight")]
        InternationalFlight,
        
        [System.Xml.Serialization.XmlEnumAttribute("domesticFlight")]
        DomesticFlight,
        
        [System.Xml.Serialization.XmlEnumAttribute("intercontinentalFlight")]
        IntercontinentalFlight,
        
        [System.Xml.Serialization.XmlEnumAttribute("domesticScheduledFlight")]
        DomesticScheduledFlight,
        
        [System.Xml.Serialization.XmlEnumAttribute("shuttleFlight")]
        ShuttleFlight,
        
        [System.Xml.Serialization.XmlEnumAttribute("intercontinentalCharterFlight")]
        IntercontinentalCharterFlight,
        
        [System.Xml.Serialization.XmlEnumAttribute("internationalCharterFlight")]
        InternationalCharterFlight,
        
        [System.Xml.Serialization.XmlEnumAttribute("roundTripCharterFlight")]
        RoundTripCharterFlight,
        
        [System.Xml.Serialization.XmlEnumAttribute("sightseeingFlight")]
        SightseeingFlight,
        
        [System.Xml.Serialization.XmlEnumAttribute("helicopterService")]
        HelicopterService,
        
        [System.Xml.Serialization.XmlEnumAttribute("domesticCharterFlight")]
        DomesticCharterFlight,
        
        SchengenAreaFlight,
        
        [System.Xml.Serialization.XmlEnumAttribute("airshipService")]
        AirshipService,
        
        [System.Xml.Serialization.XmlEnumAttribute("shortHaulInternationalFlight")]
        ShortHaulInternationalFlight,
    }
    
    /// <summary>
    /// <para>Values for Bus MODEs of TRANSPORT: TPEG pti_table_05, col_table_10.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Values for Bus MODEs of TRANSPORT: TPEG pti_table_05, col_table_10.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BusSubmodeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("BusSubmode", Namespace="http://www.netex.org.uk/netex")]
    public enum BusSubmodeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("undefined")]
        Undefined,
        
        [System.Xml.Serialization.XmlEnumAttribute("localBus")]
        LocalBus,
        
        [System.Xml.Serialization.XmlEnumAttribute("regionalBus")]
        RegionalBus,
        
        [System.Xml.Serialization.XmlEnumAttribute("expressBus")]
        ExpressBus,
        
        [System.Xml.Serialization.XmlEnumAttribute("nightBus")]
        NightBus,
        
        [System.Xml.Serialization.XmlEnumAttribute("postBus")]
        PostBus,
        
        [System.Xml.Serialization.XmlEnumAttribute("specialNeedsBus")]
        SpecialNeedsBus,
        
        [System.Xml.Serialization.XmlEnumAttribute("mobilityBus")]
        MobilityBus,
        
        [System.Xml.Serialization.XmlEnumAttribute("mobilityBusForRegisteredDisabled")]
        MobilityBusForRegisteredDisabled,
        
        [System.Xml.Serialization.XmlEnumAttribute("sightseeingBus")]
        SightseeingBus,
        
        [System.Xml.Serialization.XmlEnumAttribute("shuttleBus")]
        ShuttleBus,
        
        [System.Xml.Serialization.XmlEnumAttribute("highFrequencyBus")]
        HighFrequencyBus,
        
        [System.Xml.Serialization.XmlEnumAttribute("dedicatedLaneBus")]
        DedicatedLaneBus,
        
        [System.Xml.Serialization.XmlEnumAttribute("schoolBus")]
        SchoolBus,
        
        [System.Xml.Serialization.XmlEnumAttribute("schoolAndPublicServiceBus")]
        SchoolAndPublicServiceBus,
        
        [System.Xml.Serialization.XmlEnumAttribute("railReplacementBus")]
        RailReplacementBus,
        
        [System.Xml.Serialization.XmlEnumAttribute("demandAndResponseBus")]
        DemandAndResponseBus,
        
        [System.Xml.Serialization.XmlEnumAttribute("airportLinkBus")]
        AirportLinkBus,
    }
    
    /// <summary>
    /// <para>Values for Coach MODEs of TRANSPORT: TPEG pti_table_03.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Values for Coach MODEs of TRANSPORT: TPEG pti_table_03.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CoachSubmodeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("CoachSubmode", Namespace="http://www.netex.org.uk/netex")]
    public enum CoachSubmodeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("undefined")]
        Undefined,
        
        [System.Xml.Serialization.XmlEnumAttribute("internationalCoach")]
        InternationalCoach,
        
        [System.Xml.Serialization.XmlEnumAttribute("nationalCoach")]
        NationalCoach,
        
        [System.Xml.Serialization.XmlEnumAttribute("shuttleCoach")]
        ShuttleCoach,
        
        [System.Xml.Serialization.XmlEnumAttribute("regionalCoach")]
        RegionalCoach,
        
        [System.Xml.Serialization.XmlEnumAttribute("specialCoach")]
        SpecialCoach,
        
        [System.Xml.Serialization.XmlEnumAttribute("schoolCoach")]
        SchoolCoach,
        
        [System.Xml.Serialization.XmlEnumAttribute("sightseeingCoach")]
        SightseeingCoach,
        
        [System.Xml.Serialization.XmlEnumAttribute("touristCoach")]
        TouristCoach,
        
        [System.Xml.Serialization.XmlEnumAttribute("commuterCoach")]
        CommuterCoach,
    }
    
    /// <summary>
    /// <para>Values for Funicular MODEs of TRANSPORT: TPEG pti_table_10.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Values for Funicular MODEs of TRANSPORT: TPEG pti_table_10.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("FunicularSubmodeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("FunicularSubmode", Namespace="http://www.netex.org.uk/netex")]
    public enum FunicularSubmodeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("funicular")]
        Funicular,
        
        [System.Xml.Serialization.XmlEnumAttribute("streetCableCar")]
        StreetCableCar,
        
        [System.Xml.Serialization.XmlEnumAttribute("allFunicularServices")]
        AllFunicularServices,
        
        [System.Xml.Serialization.XmlEnumAttribute("undefinedFunicular")]
        UndefinedFunicular,
    }
    
    /// <summary>
    /// <para>Values for Metro MODEs of TRANSPORT: TPEG pti_table_04.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Values for Metro MODEs of TRANSPORT: TPEG pti_table_04.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MetroSubmodeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("MetroSubmode", Namespace="http://www.netex.org.uk/netex")]
    public enum MetroSubmodeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("undefined")]
        Undefined,
        
        [System.Xml.Serialization.XmlEnumAttribute("metro")]
        Metro,
        
        [System.Xml.Serialization.XmlEnumAttribute("tube")]
        Tube,
        
        [System.Xml.Serialization.XmlEnumAttribute("urbanRailway")]
        UrbanRailway,
    }
    
    /// <summary>
    /// <para>Values for Tram MODEs of TRANSPORT: TPEG pti_table_06, col_table_12.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Values for Tram MODEs of TRANSPORT: TPEG pti_table_06, col_table_12.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TramSubmodeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("TramSubmode", Namespace="http://www.netex.org.uk/netex")]
    public enum TramSubmodeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("undefined")]
        Undefined,
        
        [System.Xml.Serialization.XmlEnumAttribute("cityTram")]
        CityTram,
        
        [System.Xml.Serialization.XmlEnumAttribute("localTram")]
        LocalTram,
        
        [System.Xml.Serialization.XmlEnumAttribute("regionalTram")]
        RegionalTram,
        
        [System.Xml.Serialization.XmlEnumAttribute("sightseeingTram")]
        SightseeingTram,
        
        [System.Xml.Serialization.XmlEnumAttribute("shuttleTram")]
        ShuttleTram,
        
        [System.Xml.Serialization.XmlEnumAttribute("trainTram")]
        TrainTram,
    }
    
    /// <summary>
    /// <para>Values for Telecabin MODEs of TRANSPORT: TPEG pti_table_09, col_table_14.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Values for Telecabin MODEs of TRANSPORT: TPEG pti_table_09, col_table_14.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TelecabinSubmodeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("TelecabinSubmode", Namespace="http://www.netex.org.uk/netex")]
    public enum TelecabinSubmodeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("undefined")]
        Undefined,
        
        [System.Xml.Serialization.XmlEnumAttribute("telecabin")]
        Telecabin,
        
        [System.Xml.Serialization.XmlEnumAttribute("cableCar")]
        CableCar,
        
        [System.Xml.Serialization.XmlEnumAttribute("lift")]
        Lift,
        
        [System.Xml.Serialization.XmlEnumAttribute("chairLift")]
        ChairLift,
        
        [System.Xml.Serialization.XmlEnumAttribute("dragLift")]
        DragLift,
        
        [System.Xml.Serialization.XmlEnumAttribute("telecabinLink")]
        TelecabinLink,
    }
    
    /// <summary>
    /// <para>Values for Rail MODEs of TRANSPORT: TPEG pti_table_02, train link loc_table_13.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Values for Rail MODEs of TRANSPORT: TPEG pti_table_02, train link loc_table_13.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("RailSubmodeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("RailSubmode", Namespace="http://www.netex.org.uk/netex")]
    public enum RailSubmodeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("local")]
        Local,
        
        /// <summary>
        /// <para>See ERA B.4.7009 - Name: Item description code: (8 high speed train).
        ///Long distance train formed by a unit capable for high speed running on high speed or normal lines most modern train unit</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("See ERA B.4.7009 - Name: Item description code: (8 high speed train). Long distan" +
            "ce train formed by a unit capable for high speed running on high speed or normal" +
            " lines most modern train unit")]
        [System.Xml.Serialization.XmlEnumAttribute("highSpeedRail")]
        HighSpeedRail,
        
        /// <summary>
        /// <para>See ERA B.4.7009 - Name: Item description code: . (12 suburban)
        ///Regional train organised by the regional government public transport in and around cities, running on its own freeways underground or overground, operational running with signals</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("See ERA B.4.7009 - Name: Item description code: . (12 suburban) Regional train or" +
            "ganised by the regional government public transport in and around cities, runnin" +
            "g on its own freeways underground or overground, operational running with signal" +
            "s")]
        [System.Xml.Serialization.XmlEnumAttribute("suburbanRailway")]
        SuburbanRailway,
        
        /// <summary>
        /// <para>See ERA B.4.7009 - Name: Item description code. (11 Regional)
        ///Regional train organised by the regional government even if formed by a unit capable for high speed running on high speed lines</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("See ERA B.4.7009 - Name: Item description code. (11 Regional) Regional train orga" +
            "nised by the regional government even if formed by a unit capable for high speed" +
            " running on high speed lines")]
        [System.Xml.Serialization.XmlEnumAttribute("regionalRail")]
        RegionalRail,
        
        /// <summary>
        /// <para>See ERA B.4.7009 - Name: Item description code: (10 Interregional)
        ///Regional train running in more than one region.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("See ERA B.4.7009 - Name: Item description code: (10 Interregional) Regional train" +
            " running in more than one region.")]
        [System.Xml.Serialization.XmlEnumAttribute("interregionalRail")]
        InterregionalRail,
        
        /// <summary>
        /// <para>See ERA B.4.7009 - Name: Item description code: (9 Intercity).
        ///Long distance train formed by a unit capable for high speed or not running on high speed or normal lines modern train unit high quality service restricted stopping pattern</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("See ERA B.4.7009 - Name: Item description code: (9 Intercity). Long distance trai" +
            "n formed by a unit capable for high speed or not running on high speed or normal" +
            " lines modern train unit high quality service restricted stopping pattern")]
        [System.Xml.Serialization.XmlEnumAttribute("longDistance")]
        LongDistance,
        
        [System.Xml.Serialization.XmlEnumAttribute("international")]
        International,
        
        [System.Xml.Serialization.XmlEnumAttribute("sleeperRailService")]
        SleeperRailService,
        
        [System.Xml.Serialization.XmlEnumAttribute("nightRail")]
        NightRail,
        
        /// <summary>
        /// <para>See ERA B.4.7009 - Name: Item description code: (14 Motor rail)
        ///Service transporting passenger's motor vehicle passengers are admitted either with vehicle only or with or without vehicle
        ///Service mode</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("See ERA B.4.7009 - Name: Item description code: (14 Motor rail) Service transport" +
            "ing passenger\'s motor vehicle passengers are admitted either with vehicle only o" +
            "r with or without vehicle Service mode")]
        [System.Xml.Serialization.XmlEnumAttribute("carTransportRailService")]
        CarTransportRailService,
        
        /// <summary>
        /// <para>See ERA B.4.7009 - Name: Item description code: (16 Historic train).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("See ERA B.4.7009 - Name: Item description code: (16 Historic train).")]
        [System.Xml.Serialization.XmlEnumAttribute("touristRailway")]
        TouristRailway,
        
        [System.Xml.Serialization.XmlEnumAttribute("airportLinkRail")]
        AirportLinkRail,
        
        [System.Xml.Serialization.XmlEnumAttribute("railShuttle")]
        RailShuttle,
        
        [System.Xml.Serialization.XmlEnumAttribute("replacementRailService")]
        ReplacementRailService,
        
        [System.Xml.Serialization.XmlEnumAttribute("specialTrain")]
        SpecialTrain,
        
        [System.Xml.Serialization.XmlEnumAttribute("crossCountryRail")]
        CrossCountryRail,
        
        /// <summary>
        /// <para>See ERA B.4.7009 - Name: Item description code: (15 Mountain train)
        ///Local train adapted for running in mountain railway lines.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("See ERA B.4.7009 - Name: Item description code: (15 Mountain train) Local train a" +
            "dapted for running in mountain railway lines.")]
        [System.Xml.Serialization.XmlEnumAttribute("rackAndPinionRailway")]
        RackAndPinionRailway,
    }
    
    /// <summary>
    /// <para>Values for Water MODEs of TRANSPORT: TPEG pti_table_07.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Values for Water MODEs of TRANSPORT: TPEG pti_table_07.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("WaterSubmodeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("WaterSubmode", Namespace="http://www.netex.org.uk/netex")]
    public enum WaterSubmodeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("undefined")]
        Undefined,
        
        [System.Xml.Serialization.XmlEnumAttribute("internationalCarFerry")]
        InternationalCarFerry,
        
        [System.Xml.Serialization.XmlEnumAttribute("nationalCarFerry")]
        NationalCarFerry,
        
        [System.Xml.Serialization.XmlEnumAttribute("regionalCarFerry")]
        RegionalCarFerry,
        
        [System.Xml.Serialization.XmlEnumAttribute("localCarFerry")]
        LocalCarFerry,
        
        [System.Xml.Serialization.XmlEnumAttribute("internationalPassengerFerry")]
        InternationalPassengerFerry,
        
        [System.Xml.Serialization.XmlEnumAttribute("nationalPassengerFerry")]
        NationalPassengerFerry,
        
        [System.Xml.Serialization.XmlEnumAttribute("regionalPassengerFerry")]
        RegionalPassengerFerry,
        
        [System.Xml.Serialization.XmlEnumAttribute("localPassengerFerry")]
        LocalPassengerFerry,
        
        [System.Xml.Serialization.XmlEnumAttribute("postBoat")]
        PostBoat,
        
        [System.Xml.Serialization.XmlEnumAttribute("trainFerry")]
        TrainFerry,
        
        [System.Xml.Serialization.XmlEnumAttribute("roadFerryLink")]
        RoadFerryLink,
        
        [System.Xml.Serialization.XmlEnumAttribute("airportBoatLink")]
        AirportBoatLink,
        
        [System.Xml.Serialization.XmlEnumAttribute("highSpeedVehicleService")]
        HighSpeedVehicleService,
        
        [System.Xml.Serialization.XmlEnumAttribute("highSpeedPassengerService")]
        HighSpeedPassengerService,
        
        [System.Xml.Serialization.XmlEnumAttribute("sightseeingService")]
        SightseeingService,
        
        [System.Xml.Serialization.XmlEnumAttribute("schoolBoat")]
        SchoolBoat,
        
        [System.Xml.Serialization.XmlEnumAttribute("cableFerry")]
        CableFerry,
        
        [System.Xml.Serialization.XmlEnumAttribute("riverBus")]
        RiverBus,
        
        [System.Xml.Serialization.XmlEnumAttribute("scheduledFerry")]
        ScheduledFerry,
        
        [System.Xml.Serialization.XmlEnumAttribute("shuttleFerryService")]
        ShuttleFerryService,
        
        [System.Xml.Serialization.XmlEnumAttribute("canalBarge")]
        CanalBarge,
    }
    
    /// <summary>
    /// <para>Values for Snow and Ice SUBMODEs of TRANSPORT</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Values for Snow and Ice SUBMODEs of TRANSPORT")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SnowAndIceSubmodeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("SnowAndIceSubmode", Namespace="http://www.netex.org.uk/netex")]
    public enum SnowAndIceSubmodeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("undefined")]
        Undefined,
        
        [System.Xml.Serialization.XmlEnumAttribute("snowMobile")]
        SnowMobile,
        
        [System.Xml.Serialization.XmlEnumAttribute("snowCat")]
        SnowCat,
        
        [System.Xml.Serialization.XmlEnumAttribute("snowCoach")]
        SnowCoach,
        
        [System.Xml.Serialization.XmlEnumAttribute("terraBus")]
        TerraBus,
        
        [System.Xml.Serialization.XmlEnumAttribute("windSled")]
        WindSled,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TypeOfLineRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TypeOfLineRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TypeOfLineRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Allowed values for FlexibleLINE  TYPE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for FlexibleLINE TYPE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("FlexibleLineTypeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum FlexibleLineTypeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("corridorService")]
        CorridorService,
        
        [System.Xml.Serialization.XmlEnumAttribute("mainRouteWithFlexibleEnds")]
        MainRouteWithFlexibleEnds,
        
        [System.Xml.Serialization.XmlEnumAttribute("flexibleAreasOnly")]
        FlexibleAreasOnly,
        
        [System.Xml.Serialization.XmlEnumAttribute("hailAndRideSections")]
        HailAndRideSections,
        
        [System.Xml.Serialization.XmlEnumAttribute("fixedStopAreaWide")]
        FixedStopAreaWide,
        
        [System.Xml.Serialization.XmlEnumAttribute("freeAreaAreaWide")]
        FreeAreaAreaWide,
        
        [System.Xml.Serialization.XmlEnumAttribute("mixedFlexible")]
        MixedFlexible,
        
        [System.Xml.Serialization.XmlEnumAttribute("mixedFlexibleAndFixed")]
        MixedFlexibleAndFixed,
        
        [System.Xml.Serialization.XmlEnumAttribute("fixed")]
        Fixed,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Flexible properties of a POINT.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Flexible properties of a POINT.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("FlexiblePointPropertiesStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("FlexiblePointProperties", Namespace="http://www.netex.org.uk/netex")]
    public partial class FlexiblePointPropertiesStructure : IVersionedChildElementGroup, IFlexiblePointPropertiesGroup, IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="FlexiblePointPropertiesStructure" /> class.</para>
        /// </summary>
        public FlexiblePointPropertiesStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PointOnRouteRef")]
        public PointOnRouteRefStructure PointOnRouteRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ScheduledStopPointRef")]
        public ScheduledStopPointRefStructure ScheduledStopPointRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("PointRef")]
        public ScheduledStopPointRefStructure PointRef { get; set; }
        
        /// <summary>
        /// <para>Whether the POINT may be skipped.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether the POINT may be skipped.")]
        [System.Xml.Serialization.XmlElementAttribute("MayBeSkipped")]
        public bool MayBeSkipped { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MayBeSkipped property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MayBeSkippedSpecified { get; set; }
        
        /// <summary>
        /// <para>Whether the POINT is on the main ROUTE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether the POINT is on the main ROUTE.")]
        [System.Xml.Serialization.XmlElementAttribute("OnMainRoute")]
        public bool OnMainRoute { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OnMainRoute property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OnMainRouteSpecified { get; set; }
        
        /// <summary>
        /// <para>Whether the POINT represents a FLEXIBLE ZONE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether the POINT represents a FLEXIBLE ZONE.")]
        [System.Xml.Serialization.XmlElementAttribute("PointStandingForAZone")]
        public bool PointStandingForAZone { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PointStandingForAZone property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PointStandingForAZoneSpecified { get; set; }
        
        /// <summary>
        /// <para>Whether the ZONE is defined by a GROUP of POINT (true) or a geographical zone defined by its boundary.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether the ZONE is defined by a GROUP of POINT (true) or a geographical zone def" +
            "ined by its boundary.")]
        [System.Xml.Serialization.XmlElementAttribute("ZoneContainingStops")]
        public bool ZoneContainingStops { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ZoneContainingStops property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ZoneContainingStopsSpecified { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    /// <summary>
    /// <para>Elements for a FLEXIBLE POINT PROPERTies.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for a FLEXIBLE POINT PROPERTies.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IFlexiblePointPropertiesGroup
    {
        
        PointOnRouteRefStructure PointOnRouteRef
        {
            get;
            set;
        }
        
        ScheduledStopPointRefStructure ScheduledStopPointRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        ScheduledStopPointRefStructure PointRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether the POINT may be skipped.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether the POINT may be skipped.")]
        bool MayBeSkipped
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether the POINT is on the main ROUTE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether the POINT is on the main ROUTE.")]
        bool OnMainRoute
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether the POINT represents a FLEXIBLE ZONE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether the POINT represents a FLEXIBLE ZONE.")]
        bool PointStandingForAZone
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether the ZONE is defined by a GROUP of POINT (true) or a geographical zone defined by its boundary.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether the ZONE is defined by a GROUP of POINT (true) or a geographical zone def" +
            "ined by its boundary.")]
        bool ZoneContainingStops
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PointOnRouteRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("PointOnRouteRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class PointOnRouteRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>A group of FLEXIBLE ROUTEs of which is generally known to the public by a similar name or number and which have common booking arrangements.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A group of FLEXIBLE ROUTEs of which is generally known to the public by a similar" +
        " name or number and which have common booking arrangements.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("FlexibleLineStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("FlexibleLine", Namespace="http://www.netex.org.uk/netex")]
    public partial class FlexibleLineStructure : IDataManagedObjectElementGroup, ILineGroup, IBookingArrangementsGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="FlexibleLineStructure" /> class.</para>
        /// </summary>
        public FlexibleLineStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._otherModes = new System.Collections.ObjectModel.Collection<ModeRefStructure>();
            this._documentLinks = new System.Collections.ObjectModel.Collection<InfoLinkStructure>();
            this._bookingMethods = new System.Collections.ObjectModel.Collection<string>();
            this._buyWhen = new System.Collections.ObjectModel.Collection<string>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TransportMode")]
        public AllVehicleModesOfTransportEnumeration TransportMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransportMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TransportModeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TransportSubmode")]
        public TransportSubmodeStructure TransportSubmode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Url")]
        public string Url { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PublicCode")]
        public string PublicCode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. Used for VDV compatibility.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Used for VDV compatibility.")]
        [System.Xml.Serialization.XmlElementAttribute("ExternalLineRef")]
        public ExternalObjectRefStructure ExternalLineRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("OperatorRef")]
        public OperatorRefStructure OperatorRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("AuthorityRef")]
        public AuthorityRefStructure AuthorityRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("additionalOperators")]
        public AdditionalOperatorsRelStructure AdditionalOperators { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ModeRefStructure> _otherModes;
        
        /// <summary>
        /// <para>Additional transport MODEs for LINE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Additional transport MODEs for LINE.")]
        [System.Xml.Serialization.XmlArrayAttribute("otherModes")]
        [System.Xml.Serialization.XmlArrayItemAttribute("ModeRef", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<ModeRefStructure> OtherModes
        {
            get
            {
                return _otherModes;
            }
            private set
            {
                _otherModes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OtherModes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OtherModesSpecified
        {
            get
            {
                return (this.OtherModes.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("TypeOfLineRef")]
        public TypeOfLineRefStructure TypeOfLineRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfServiceRef")]
        public TypeOfServiceRefStructure TypeOfServiceRef { get; set; }
        
        /// <summary>
        /// <para>Whether real-time data is normally available for LINE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether real-time data is normally available for LINE.")]
        [System.Xml.Serialization.XmlElementAttribute("Monitored")]
        public bool Monitored { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Monitored property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MonitoredSpecified { get; set; }
        
        /// <summary>
        /// <para>Not required in EPIP as data may not be available. However note that it is possible to align with SERVICE PATTERN, thus using the SCHEDULED STOP POINTs as a base for creating ROUTE POINTs, the POINTs IN JOURNEY
        ///PATTERN for POINTs ON ROUTE, and the SERVICE LINKs for ROUTE LINKs</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Not required in EPIP as data may not be available. However note that it is possible to align with SERVICE PATTERN, thus using the SCHEDULED STOP POINTs as a base for creating ROUTE POINTs, the POINTs IN JOURNEY PATTERN for POINTs ON ROUTE, and the SERVICE LINKs for ROUTE LINKs")]
        [System.Xml.Serialization.XmlElementAttribute("routes")]
        public RouteRefsRelStructure Routes { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("RepresentedByGroupRef")]
        public RepresentedByGroupRefStructure RepresentedByGroupRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Presentation")]
        public PresentationStructure Presentation { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("AccessibilityAssessment")]
        public AccessibilityAssessmentStructure AccessibilityAssessment { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("allowedDirections")]
        public AllowedDirectionsRelStructure AllowedDirections { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("noticeAssignments")]
        public NoticeAssignmentsRelStructure NoticeAssignments { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<InfoLinkStructure> _documentLinks;
        
        /// <summary>
        /// <para>Timetable documents associated with the LINE, e.g pdf files</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Timetable documents associated with the LINE, e.g pdf files")]
        [System.Xml.Serialization.XmlArrayAttribute("documentLinks")]
        [System.Xml.Serialization.XmlArrayItemAttribute("InfoLink", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<InfoLinkStructure> DocumentLinks
        {
            get
            {
                return _documentLinks;
            }
            private set
            {
                _documentLinks = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DocumentLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DocumentLinksSpecified
        {
            get
            {
                return (this.DocumentLinks.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Type of FLEXIBLE LINE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type of FLEXIBLE LINE.")]
        [System.Xml.Serialization.XmlElementAttribute("FlexibleLineType")]
        public FlexibleLineTypeEnumeration FlexibleLineType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FlexibleLineType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FlexibleLineTypeSpecified { get; set; }
        
        /// <summary>
        /// <para>Contact for Booking. +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Contact for Booking. +v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("BookingContact")]
        public ContactDetailsStructure BookingContact { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _bookingMethods;
        
        /// <summary>
        /// <para>Allowed Ways of Making a BOOKING.</para>
        /// <para>List of values for Flexible Booking values.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Allowed Ways of Making a BOOKING.")]
        [System.Xml.Serialization.XmlElementAttribute("BookingMethods")]
        public System.Collections.ObjectModel.Collection<string> BookingMethods
        {
            get
            {
                return _bookingMethods;
            }
            private set
            {
                _bookingMethods = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BookingMethods collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BookingMethodsSpecified
        {
            get
            {
                return (this.BookingMethods.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Who can make a booking. Default is public.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Who can make a booking. Default is public.")]
        [System.Xml.Serialization.XmlElementAttribute("BookingAccess")]
        public BookingAccessEnumeration BookingAccess { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BookingAccess property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BookingAccessSpecified { get; set; }
        
        /// <summary>
        /// <para>When Booking can be made. +V1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("When Booking can be made. +V1.1")]
        [System.Xml.Serialization.XmlElementAttribute("BookWhen")]
        public PurchaseWhenEnumeration BookWhen { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BookWhen property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BookWhenSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _buyWhen;
        
        /// <summary>
        /// <para>When purchase can be made.  +V1.1</para>
        /// <para>List of Purchase Moment. values.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("When purchase can be made. +V1.1")]
        [System.Xml.Serialization.XmlElementAttribute("BuyWhen")]
        public System.Collections.ObjectModel.Collection<string> BuyWhen
        {
            get
            {
                return _buyWhen;
            }
            private set
            {
                _buyWhen = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BuyWhen collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BuyWhenSpecified
        {
            get
            {
                return (this.BuyWhen.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Latest time in day that booking can be made.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Latest time in day that booking can be made.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("LatestBookingTime")]
        public string LatestBookingTime { get; set; }
        
        /// <summary>
        /// <para>Minimum interval in advance of departure day or time that Service may be ordered.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Minimum interval in advance of departure day or time that Service may be ordered." +
            "")]
        [System.Xml.Serialization.XmlElementAttribute("MinimumBookingPeriod")]
        public string MinimumBookingPeriod { get; set; }
        
        /// <summary>
        /// <para>URL for booking. +V1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("URL for booking. +V1.1")]
        [System.Xml.Serialization.XmlElementAttribute("BookingUrl")]
        public string BookingUrl { get; set; }
        
        /// <summary>
        /// <para>Note about booking the FLEXIBLE LINE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note about booking the FLEXIBLE LINE.")]
        [System.Xml.Serialization.XmlElementAttribute("BookingNote")]
        public MultilingualString BookingNote { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ILineGroup
    {
        
        MultilingualString Name
        {
            get;
            set;
        }
        
        MultilingualString ShortName
        {
            get;
            set;
        }
        
        MultilingualString Description
        {
            get;
            set;
        }
        
        AllVehicleModesOfTransportEnumeration TransportMode
        {
            get;
            set;
        }
        
        TransportSubmodeStructure TransportSubmode
        {
            get;
            set;
        }
        
        string Url
        {
            get;
            set;
        }
        
        string PublicCode
        {
            get;
            set;
        }
        
        PrivateCodeStructure PrivateCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP. Used for VDV compatibility.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Used for VDV compatibility.")]
        ExternalObjectRefStructure ExternalLineRef
        {
            get;
            set;
        }
        
        OperatorRefStructure OperatorRef
        {
            get;
            set;
        }
        
        AuthorityRefStructure AuthorityRef
        {
            get;
            set;
        }
        
        AdditionalOperatorsRelStructure AdditionalOperators
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Additional transport MODEs for LINE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Additional transport MODEs for LINE.")]
        System.Collections.ObjectModel.Collection<ModeRefStructure> OtherModes
        {
            get;
        }
        
        TypeOfLineRefStructure TypeOfLineRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        TypeOfServiceRefStructure TypeOfServiceRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether real-time data is normally available for LINE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether real-time data is normally available for LINE.")]
        bool Monitored
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not required in EPIP as data may not be available. However note that it is possible to align with SERVICE PATTERN, thus using the SCHEDULED STOP POINTs as a base for creating ROUTE POINTs, the POINTs IN JOURNEY
        ///PATTERN for POINTs ON ROUTE, and the SERVICE LINKs for ROUTE LINKs</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Not required in EPIP as data may not be available. However note that it is possible to align with SERVICE PATTERN, thus using the SCHEDULED STOP POINTs as a base for creating ROUTE POINTs, the POINTs IN JOURNEY PATTERN for POINTs ON ROUTE, and the SERVICE LINKs for ROUTE LINKs")]
        RouteRefsRelStructure Routes
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        RepresentedByGroupRefStructure RepresentedByGroupRef
        {
            get;
            set;
        }
        
        PresentationStructure Presentation
        {
            get;
            set;
        }
        
        AccessibilityAssessmentStructure AccessibilityAssessment
        {
            get;
            set;
        }
        
        AllowedDirectionsRelStructure AllowedDirections
        {
            get;
            set;
        }
        
        NoticeAssignmentsRelStructure NoticeAssignments
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Timetable documents associated with the LINE, e.g pdf files</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Timetable documents associated with the LINE, e.g pdf files")]
        System.Collections.ObjectModel.Collection<InfoLinkStructure> DocumentLinks
        {
            get;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("additionalOperators_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("additionalOperators", Namespace="http://www.netex.org.uk/netex")]
    public partial class AdditionalOperatorsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<OperatorRefStructure> _operatorRef;
        
        [System.Xml.Serialization.XmlElementAttribute("OperatorRef")]
        public System.Collections.ObjectModel.Collection<OperatorRefStructure> OperatorRef
        {
            get
            {
                return _operatorRef;
            }
            private set
            {
                _operatorRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OperatorRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OperatorRefSpecified
        {
            get
            {
                return (this.OperatorRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="AdditionalOperatorsRelStructure" /> class.</para>
        /// </summary>
        public AdditionalOperatorsRelStructure()
        {
            this._operatorRef = new System.Collections.ObjectModel.Collection<OperatorRefStructure>();
            this._authorityRef = new System.Collections.ObjectModel.Collection<AuthorityRefStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<AuthorityRefStructure> _authorityRef;
        
        [System.Xml.Serialization.XmlElementAttribute("AuthorityRef")]
        public System.Collections.ObjectModel.Collection<AuthorityRefStructure> AuthorityRef
        {
            get
            {
                return _authorityRef;
            }
            private set
            {
                _authorityRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AuthorityRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AuthorityRefSpecified
        {
            get
            {
                return (this.AuthorityRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LineGroupOtherModes", Namespace="http://www.netex.org.uk/netex", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LineGroupOtherModes
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ModeRefStructure> _modeRef;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ModeRef")]
        public System.Collections.ObjectModel.Collection<ModeRefStructure> ModeRef
        {
            get
            {
                return _modeRef;
            }
            private set
            {
                _modeRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LineGroupOtherModes" /> class.</para>
        /// </summary>
        public LineGroupOtherModes()
        {
            this._modeRef = new System.Collections.ObjectModel.Collection<ModeRefStructure>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ModeRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ModeRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ModeRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("mode")]
        public AllVehicleModesOfTransportEnumeration Mode { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TypeOfServiceRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TypeOfServiceRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TypeOfServiceRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("routeRefs_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RouteRefsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<RouteRefStructure> _routeRef;
        
        [System.Xml.Serialization.XmlElementAttribute("RouteRef")]
        public System.Collections.ObjectModel.Collection<RouteRefStructure> RouteRef
        {
            get
            {
                return _routeRef;
            }
            private set
            {
                _routeRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RouteRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RouteRefSpecified
        {
            get
            {
                return (this.RouteRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="RouteRefsRelStructure" /> class.</para>
        /// </summary>
        public RouteRefsRelStructure()
        {
            this._routeRef = new System.Collections.ObjectModel.Collection<RouteRefStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("RouteRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("RouteRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class RouteRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("RepresentedByGroupRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("RepresentedByGroupRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class RepresentedByGroupRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Types describing common presentation properties for Display.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Types describing common presentation properties for Display.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PresentationStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Presentation", Namespace="http://www.netex.org.uk/netex")]
    public partial class PresentationStructure
    {
        
        /// <summary>
        /// <para>Default RGB colour value for graphics associated with ENTITY - e.g. for a LINE.</para>
        /// <para>Type for a Colour Value.</para>
        /// <para xml:lang="en">Maximum length: 6.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default RGB colour value for graphics associated with ENTITY - e.g. for a LINE.")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(6)]
        [System.Xml.Serialization.XmlElementAttribute("Colour", DataType="hexBinary")]
        public byte[] Colour { get; set; }
        
        /// <summary>
        /// <para>Name of default colour value for graphics associated with ENTITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of default colour value for graphics associated with ENTITY.")]
        [System.Xml.Serialization.XmlElementAttribute("ColourName")]
        public string ColourName { get; set; }
        
        /// <summary>
        /// <para>Name of colour system used for ColourName and TextColourName: for example, 
        ///					- RAL, https://en.wikipedia.org/wiki/RAL_colour_standard;
        ///					- DIN 6164 http://www.dtpstudio.de/atlas/farbsysteme/DIN%206164_bs00_3.htm; 
        ///					- Pantone (be aware that Pantone is proprietary), etc.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Name of colour system used for ColourName and TextColourName: for example, - RAL, https://en.wikipedia.org/wiki/RAL_colour_standard; - DIN 6164 http://www.dtpstudio.de/atlas/farbsysteme/DIN%206164_bs00_3.htm; - Pantone (be aware that Pantone is proprietary), etc.")]
        [System.Xml.Serialization.XmlElementAttribute("ColourSystem")]
        public string ColourSystem { get; set; }
        
        /// <summary>
        /// <para>Default RGB background colour value for text and graphics associated with ENTITY - e.g. of a LINE.</para>
        /// <para>Type for a Colour Value.</para>
        /// <para xml:lang="en">Maximum length: 6.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default RGB background colour value for text and graphics associated with ENTITY " +
            "- e.g. of a LINE.")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(6)]
        [System.Xml.Serialization.XmlElementAttribute("BackGroundColour", DataType="hexBinary")]
        public byte[] BackGroundColour { get; set; }
        
        /// <summary>
        /// <para>Name of the background colour (in ColourSystem) for text and graphics associated with entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of the background colour (in ColourSystem) for text and graphics associated " +
            "with entity.")]
        [System.Xml.Serialization.XmlElementAttribute("BackgroundColourName")]
        public string BackgroundColourName { get; set; }
        
        /// <summary>
        /// <para>Default colour value for text associated with ENTITY.</para>
        /// <para>Type for a Colour Value.</para>
        /// <para xml:lang="en">Maximum length: 6.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default colour value for text associated with ENTITY.")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(6)]
        [System.Xml.Serialization.XmlElementAttribute("TextColour", DataType="hexBinary")]
        public byte[] TextColour { get; set; }
        
        /// <summary>
        /// <para>Name of default colour value (in ColourSystem) for text associated with ENTITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of default colour value (in ColourSystem) for text associated with ENTITY.")]
        [System.Xml.Serialization.XmlElementAttribute("TextColourName")]
        public string TextColourName { get; set; }
        
        /// <summary>
        /// <para>Identifier of font for text.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of font for text.")]
        [System.Xml.Serialization.XmlElementAttribute("TextFont")]
        public string TextFont { get; set; }
        
        /// <summary>
        /// <para>Name of font for text.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of font for text.")]
        [System.Xml.Serialization.XmlElementAttribute("TextFontName")]
        public string TextFontName { get; set; }
        
        /// <summary>
        /// <para>Default language for text.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default language for text.")]
        [System.Xml.Serialization.XmlElementAttribute("TextLanguage")]
        public string TextLanguage { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<InfoLinkStructure> _infoLinks;
        
        /// <summary>
        /// <para>Hyperlinks associated with presentation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Hyperlinks associated with presentation.")]
        [System.Xml.Serialization.XmlArrayAttribute("infoLinks")]
        [System.Xml.Serialization.XmlArrayItemAttribute("InfoLink", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<InfoLinkStructure> InfoLinks
        {
            get
            {
                return _infoLinks;
            }
            private set
            {
                _infoLinks = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the InfoLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InfoLinksSpecified
        {
            get
            {
                return (this.InfoLinks.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PresentationStructure" /> class.</para>
        /// </summary>
        public PresentationStructure()
        {
            this._infoLinks = new System.Collections.ObjectModel.Collection<InfoLinkStructure>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("infoLinks_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("infoLinks", Namespace="http://www.netex.org.uk/netex")]
    public partial class InfoLinksRelStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<InfoLinkStructure> _infoLink;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("InfoLink")]
        public System.Collections.ObjectModel.Collection<InfoLinkStructure> InfoLink
        {
            get
            {
                return _infoLink;
            }
            private set
            {
                _infoLink = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="InfoLinksRelStructure" /> class.</para>
        /// </summary>
        public InfoLinksRelStructure()
        {
            this._infoLink = new System.Collections.ObjectModel.Collection<InfoLinkStructure>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("allowedDirections_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("allowedDirections", Namespace="http://www.netex.org.uk/netex")]
    public partial class AllowedDirectionsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<AllowedLineDirectionRefStructure> _allowedLineDirectionRef;
        
        [System.Xml.Serialization.XmlElementAttribute("AllowedLineDirectionRef")]
        public System.Collections.ObjectModel.Collection<AllowedLineDirectionRefStructure> AllowedLineDirectionRef
        {
            get
            {
                return _allowedLineDirectionRef;
            }
            private set
            {
                _allowedLineDirectionRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AllowedLineDirectionRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllowedLineDirectionRefSpecified
        {
            get
            {
                return (this.AllowedLineDirectionRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="AllowedDirectionsRelStructure" /> class.</para>
        /// </summary>
        public AllowedDirectionsRelStructure()
        {
            this._allowedLineDirectionRef = new System.Collections.ObjectModel.Collection<AllowedLineDirectionRefStructure>();
            this._allowedLineDirection = new System.Collections.ObjectModel.Collection<AllowedLineDirectionVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<AllowedLineDirectionVersionStructure> _allowedLineDirection;
        
        [System.Xml.Serialization.XmlElementAttribute("AllowedLineDirection")]
        public System.Collections.ObjectModel.Collection<AllowedLineDirectionVersionStructure> AllowedLineDirection
        {
            get
            {
                return _allowedLineDirection;
            }
            private set
            {
                _allowedLineDirection = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AllowedLineDirection collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllowedLineDirectionSpecified
        {
            get
            {
                return (this.AllowedLineDirection.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("noticeAssignments_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NoticeAssignmentsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<NoticeAssignmentVersionStructure> _noticeAssignment;
        
        /// <summary>
        /// <para>The assignment of a NOTICE showing an exception in a JOURNEY PATTERN, a COMMON SECTION, or a VEHICLE JOURNEY, possibly specifying at which POINT IN JOURNEY PATTERN the validity of the NOTICE starts and ends respectively.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The assignment of a NOTICE showing an exception in a JOURNEY PATTERN, a COMMON SE" +
            "CTION, or a VEHICLE JOURNEY, possibly specifying at which POINT IN JOURNEY PATTE" +
            "RN the validity of the NOTICE starts and ends respectively.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("NoticeAssignment")]
        public System.Collections.ObjectModel.Collection<NoticeAssignmentVersionStructure> NoticeAssignment
        {
            get
            {
                return _noticeAssignment;
            }
            private set
            {
                _noticeAssignment = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="NoticeAssignmentsRelStructure" /> class.</para>
        /// </summary>
        public NoticeAssignmentsRelStructure()
        {
            this._noticeAssignment = new System.Collections.ObjectModel.Collection<NoticeAssignmentVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NoticeAssignment_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("NoticeAssignment", Namespace="http://www.netex.org.uk/netex")]
    public partial class NoticeAssignmentVersionStructure : IDataManagedObjectElementGroup, INoticeLinkSequenceRefGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="NoticeAssignmentVersionStructure" /> class.</para>
        /// </summary>
        public NoticeAssignmentVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>In EPIP only to be used towards a previoulsy embedded Notice</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("In EPIP only to be used towards a previoulsy embedded Notice")]
        [System.Xml.Serialization.XmlElementAttribute("NoticeRef")]
        public NoticeRefStructure NoticeRef { get; set; }
        
        /// <summary>
        /// <para>A note or footnote about any aspect of a service, e.g. an announcement, notice, etc.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A note or footnote about any aspect of a service, e.g. an announcement, notice, e" +
            "tc.")]
        [System.Xml.Serialization.XmlElementAttribute("Notice")]
        public NoticeVersionStructure Notice { get; set; }
        
        /// <summary>
        /// <para>Object with which NOTICE is associated. If given by
        ///context can be omitted.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Object with which NOTICE is associated. If given by context can be omitted.")]
        [System.Xml.Serialization.XmlElementAttribute("NoticedObjectRef")]
        public NoticedObjectRefStructure NoticedObjectRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("JourneyPatternRef")]
        public JourneyPatternRefStructure JourneyPatternRef { get; set; }
        
        /// <summary>
        /// <para>The only concrete JourneyPatternRef in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The only concrete JourneyPatternRef in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("ServiceJourneyPatternRef")]
        public ServiceJourneyPatternRefStructure ServiceJourneyPatternRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("ServicePatternRef")]
        public JourneyPatternRefStructure ServicePatternRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ServiceJourneyRef")]
        public ServiceJourneyRefStructure ServiceJourneyRef { get; set; }
        
        /// <summary>
        /// <para>POINT at which applicability of NOTICE starts.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("POINT at which applicability of NOTICE starts.")]
        [System.Xml.Serialization.XmlElementAttribute("StartPointInPatternRef")]
        public PointInSequenceRefStructure StartPointInPatternRef { get; set; }
        
        /// <summary>
        /// <para>POINT at which applicability of NOTICE ends. If absent
        ///same as Start Point</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("POINT at which applicability of NOTICE ends. If absent same as Start Point")]
        [System.Xml.Serialization.XmlElementAttribute("EndPointInPatternRef")]
        public PointInSequenceRefStructure EndPointInPatternRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public string Order { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface INoticeLinkSequenceRefGroup : IJourneyPatternRefGroup
    {
        
        ServiceJourneyRefStructure ServiceJourneyRef
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ServiceJourneyRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FromJourneyRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceJourneyRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TemplateServiceJourneyRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ToJourneyRef))]
    public partial class ServiceJourneyRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NoticeRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("NoticeRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class NoticeRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Notice_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Notice", Namespace="http://www.netex.org.uk/netex")]
    public partial class NoticeVersionStructure : IDataManagedObjectElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="NoticeVersionStructure" /> class.</para>
        /// </summary>
        public NoticeVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of Notice. Use Text for content.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Notice. Use Text for content.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Text content of NOTICe.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Text content of NOTICe.")]
        [System.Xml.Serialization.XmlElementAttribute("Text")]
        public MultilingualString Text { get; set; }
        
        /// <summary>
        /// <para>Alternative code associated with Notice.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Alternative code associated with Notice.")]
        [System.Xml.Serialization.XmlElementAttribute("PublicCode")]
        public string PublicCode { get; set; }
        
        /// <summary>
        /// <para>Reference to a TYPE OF NOTICe.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a TYPE OF NOTICe.")]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfNoticeRef")]
        public TypeOfNoticeRefStructure TypeOfNoticeRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("CanBeAdvertised")]
        public bool CanBeAdvertised { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CanBeAdvertised property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CanBeAdvertisedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TypeOfNoticeRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TypeOfNoticeRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TypeOfNoticeRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NoticedObjectRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("NoticedObjectRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class NoticedObjectRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PointInSequenceRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PointInSequenceRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Type for FLEXIBLE SERVICE PROPERTies.</para>
    /// <para>Additional characteristics of a FLEXIBLE SERVICE. A service may be partly fixed, partly flexible.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for FLEXIBLE SERVICE PROPERTies.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("FlexibleServiceProperties_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("FlexibleServiceProperties", Namespace="http://www.netex.org.uk/netex")]
    public partial class FlexibleServicePropertiesVersionStructure : IDataManagedObjectElementGroup, IBookingArrangementsGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="FlexibleServicePropertiesVersionStructure" /> class.</para>
        /// </summary>
        public FlexibleServicePropertiesVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._bookingMethods = new System.Collections.ObjectModel.Collection<string>();
            this._buyWhen = new System.Collections.ObjectModel.Collection<string>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TypeOfFlexibleServiceRef")]
        public TypeOfFlexibleServiceRefStructure TypeOfFlexibleServiceRef { get; set; }
        
        /// <summary>
        /// <para>Flexible service type is FixedPassingTimes/DynamicPassingTimes/FixedHeadwayFrequency (in the last value, this provides a maximum waiting time, but no passing time is defined, all is done dynamically depending on the demand). A NotFlexible value is probably also required to clearly state that a Stop (i.e. Point in JP) is not flexible when others are.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Flexible service type is FixedPassingTimes/DynamicPassingTimes/FixedHeadwayFrequency (in the last value, this provides a maximum waiting time, but no passing time is defined, all is done dynamically depending on the demand). A NotFlexible value is probably also required to clearly state that a Stop (i.e. Point in JP) is not flexible when others are.")]
        [System.Xml.Serialization.XmlElementAttribute("FlexibleServiceType")]
        public FlexibleServiceEnumeration FlexibleServiceType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FlexibleServiceType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FlexibleServiceTypeSpecified { get; set; }
        
        /// <summary>
        /// <para>Whether cancellation is always possible (meaning the Operator can decided to cancel, usually because there are not enough people, or they are too busy to run service).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether cancellation is always possible (meaning the Operator can decided to canc" +
            "el, usually because there are not enough people, or they are too busy to run ser" +
            "vice).")]
        [System.Xml.Serialization.XmlElementAttribute("CancellationPossible")]
        public bool CancellationPossible { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CancellationPossible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CancellationPossibleSpecified { get; set; }
        
        /// <summary>
        /// <para>Whether the time of the service may be altered.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether the time of the service may be altered.")]
        [System.Xml.Serialization.XmlElementAttribute("ChangeOfTimePossible")]
        public bool ChangeOfTimePossible { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChangeOfTimePossible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangeOfTimePossibleSpecified { get; set; }
        
        /// <summary>
        /// <para>Contact for Booking. +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Contact for Booking. +v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("BookingContact")]
        public ContactDetailsStructure BookingContact { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _bookingMethods;
        
        /// <summary>
        /// <para>Allowed Ways of Making a BOOKING.</para>
        /// <para>List of values for Flexible Booking values.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Allowed Ways of Making a BOOKING.")]
        [System.Xml.Serialization.XmlElementAttribute("BookingMethods")]
        public System.Collections.ObjectModel.Collection<string> BookingMethods
        {
            get
            {
                return _bookingMethods;
            }
            private set
            {
                _bookingMethods = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BookingMethods collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BookingMethodsSpecified
        {
            get
            {
                return (this.BookingMethods.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Who can make a booking. Default is public.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Who can make a booking. Default is public.")]
        [System.Xml.Serialization.XmlElementAttribute("BookingAccess")]
        public BookingAccessEnumeration BookingAccess { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BookingAccess property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BookingAccessSpecified { get; set; }
        
        /// <summary>
        /// <para>When Booking can be made. +V1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("When Booking can be made. +V1.1")]
        [System.Xml.Serialization.XmlElementAttribute("BookWhen")]
        public PurchaseWhenEnumeration BookWhen { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BookWhen property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BookWhenSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _buyWhen;
        
        /// <summary>
        /// <para>When purchase can be made.  +V1.1</para>
        /// <para>List of Purchase Moment. values.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("When purchase can be made. +V1.1")]
        [System.Xml.Serialization.XmlElementAttribute("BuyWhen")]
        public System.Collections.ObjectModel.Collection<string> BuyWhen
        {
            get
            {
                return _buyWhen;
            }
            private set
            {
                _buyWhen = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BuyWhen collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BuyWhenSpecified
        {
            get
            {
                return (this.BuyWhen.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Latest time in day that booking can be made.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Latest time in day that booking can be made.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("LatestBookingTime")]
        public string LatestBookingTime { get; set; }
        
        /// <summary>
        /// <para>Minimum interval in advance of departure day or time that Service may be ordered.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Minimum interval in advance of departure day or time that Service may be ordered." +
            "")]
        [System.Xml.Serialization.XmlElementAttribute("MinimumBookingPeriod")]
        public string MinimumBookingPeriod { get; set; }
        
        /// <summary>
        /// <para>URL for booking. +V1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("URL for booking. +V1.1")]
        [System.Xml.Serialization.XmlElementAttribute("BookingUrl")]
        public string BookingUrl { get; set; }
        
        /// <summary>
        /// <para>Note about booking the FLEXIBLE LINE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note about booking the FLEXIBLE LINE.")]
        [System.Xml.Serialization.XmlElementAttribute("BookingNote")]
        public MultilingualString BookingNote { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TypeOfFlexibleServiceRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TypeOfFlexibleServiceRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TypeOfFlexibleServiceRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Allowed values for flexible service type: FixedPassingTimes, DynamicPassingTimes, FixedHeadwayFrequency.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for flexible service type: FixedPassingTimes, DynamicPassingTimes," +
        " FixedHeadwayFrequency.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("FlexibleServiceEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum FlexibleServiceEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("dynamicPassingTimes")]
        DynamicPassingTimes,
        
        [System.Xml.Serialization.XmlEnumAttribute("fixedHeadwayFrequency")]
        FixedHeadwayFrequency,
        
        [System.Xml.Serialization.XmlEnumAttribute("fixedPassingTimes")]
        FixedPassingTimes,
        
        [System.Xml.Serialization.XmlEnumAttribute("notFlexible")]
        NotFlexible,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("FrameClassRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("FrameClassRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class FrameClassRefStructure
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("FrameDefaultsStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("FrameDefaults", Namespace="http://www.netex.org.uk/netex")]
    public partial class FrameDefaultsStructure
    {
        
        [System.Xml.Serialization.XmlElementAttribute("DefaultCodespaceRef")]
        public CodespaceRefStructure DefaultCodespaceRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("DefaultDataSourceRef")]
        public DefaultDataSourceRefStructure DefaultDataSourceRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("DefaultResponsibilitySetRef")]
        public ResponsibilitySetRefStructure DefaultResponsibilitySetRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("DefaultLocale")]
        public LocaleStructure DefaultLocale { get; set; }
        
        /// <summary>
        /// <para>For EPIP WGS84 is recommended.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("For EPIP WGS84 is recommended.")]
        [System.Xml.Serialization.XmlElementAttribute("DefaultLocationSystem")]
        public string DefaultLocationSystem { get; set; }
        
        /// <summary>
        /// <para>SiMetresAndKilometres (only value accepted in EPIP)</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("SiMetresAndKilometres (only value accepted in EPIP)")]
        [System.Xml.Serialization.XmlElementAttribute("DefaultSystemOfUnits")]
        public SystemOfUnits DefaultSystemOfUnits { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultSystemOfUnits property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultSystemOfUnitsSpecified { get; set; }
        
        /// <summary>
        /// <para>Type for a Currency . Based on ISO 4717 values.</para>
        /// <para xml:lang="en">Minimum length: 3.</para>
        /// <para xml:lang="en">Maximum length: 3.</para>
        /// <para xml:lang="en">Pattern: [A-Z][A-Z][A-Z].</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MinLengthAttribute(3)]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(3)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Z][A-Z][A-Z]")]
        [System.Xml.Serialization.XmlElementAttribute("DefaultCurrency")]
        public string DefaultCurrency { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ResponsibilitySetRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefaultResponsibilitySetRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ResponsibilitySetRef))]
    public partial class ResponsibilitySetRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>System of units.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("System of units.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SystemOfUnits", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("DefaultSystemOfUnits", Namespace="http://www.netex.org.uk/netex")]
    public enum SystemOfUnits
    {
        
        /// <summary>
        /// <para>All measurements are SI metric. 
        ///Distance = Metres
        ///Length = Metres
        ///Weight = Kilos
        ///Speed = Metres per second.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("All measurements are SI metric. Distance = Metres Length = Metres Weight = Kilos " +
            "Speed = Metres per second.")]
        SiMetres,
        
        /// <summary>
        /// <para>All measurements are SI 
        ///Distance = Kilometres
        ///Length = Metres
        ///Weight = Kilos
        ///Speed = Metres per second.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("All measurements are SI Distance = Kilometres Length = Metres Weight = Kilos Spee" +
            "d = Metres per second.")]
        SiKilometresAndMetres,
        
        Other,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("FrequencyStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Frequency", Namespace="http://www.netex.org.uk/netex")]
    public partial class FrequencyStructure : IHeadwayIntervalGroup
    {
        
        /// <summary>
        /// <para>Scheduled normal headway interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Scheduled normal headway interval.")]
        [System.Xml.Serialization.XmlElementAttribute("ScheduledHeadwayInterval")]
        public string ScheduledHeadwayInterval { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. Minimum headway interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Minimum headway interval.")]
        [System.Xml.Serialization.XmlElementAttribute("MinimumHeadwayInterval")]
        public string MinimumHeadwayInterval { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. Maximum headway interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum headway interval.")]
        [System.Xml.Serialization.XmlElementAttribute("MaximumHeadwayInterval")]
        public string MaximumHeadwayInterval { get; set; }
    }
    
    /// <summary>
    /// <para>Elements of a JOURNEY HEADWAY Interval.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements of a JOURNEY HEADWAY Interval.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IHeadwayIntervalGroup
    {
        
        /// <summary>
        /// <para>Scheduled normal headway interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Scheduled normal headway interval.")]
        string ScheduledHeadwayInterval
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP. Minimum headway interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Minimum headway interval.")]
        string MinimumHeadwayInterval
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP. Maximum headway interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum headway interval.")]
        string MaximumHeadwayInterval
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GroupOfLines_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("GroupOfLines", Namespace="http://www.netex.org.uk/netex")]
    public partial class GroupOfLinesVersionStructure : IGroupOfEntitiesElementGroup, IGroupOfLinesGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="GroupOfLinesVersionStructure" /> class.</para>
        /// </summary>
        public GroupOfLinesVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._infoLinks = new System.Collections.ObjectModel.Collection<InfoLinkStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>For EPIP note that Name should be considered as mandatory when in scope of NETWORK.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("For EPIP note that Name should be considered as mandatory when in scope of NETWOR" +
            "K.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PurposeOfGroupingRef")]
        public PurposeOfGroupingRefStructure PurposeOfGroupingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<InfoLinkStructure> _infoLinks;
        
        /// <summary>
        /// <para>Not in EPIP.                      Hyperlinks associated with presentation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Hyperlinks associated with presentation.")]
        [System.Xml.Serialization.XmlArrayAttribute("infoLinks")]
        [System.Xml.Serialization.XmlArrayItemAttribute("InfoLink", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<InfoLinkStructure> InfoLinks
        {
            get
            {
                return _infoLinks;
            }
            private set
            {
                _infoLinks = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the InfoLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InfoLinksSpecified
        {
            get
            {
                return (this.InfoLinks.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>LINEs in GROUP OF LINEs</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("LINEs in GROUP OF LINEs")]
        [System.Xml.Serialization.XmlElementAttribute("members")]
        public LineRefsRelStructure Members { get; set; }
        
        /// <summary>
        /// <para>Primary LINE in GROUP OF LINEs, if relevant.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Primary LINE in GROUP OF LINEs, if relevant.")]
        [System.Xml.Serialization.XmlElementAttribute("MainLineRef")]
        public LineRefStructure MainLineRef { get; set; }
        
        /// <summary>
        /// <para>Primary Transport MODE of GROUP OF LINES.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Primary Transport MODE of GROUP OF LINES.")]
        [System.Xml.Serialization.XmlElementAttribute("TransportMode")]
        public AllVehicleModesOfTransportEnumeration TransportMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransportMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TransportModeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>adapted members structure provide separately below:</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("adapted members structure provide separately below:")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IGroupOfEntitiesElementGroup : IDataManagedObjectElementGroup
    {
        
        /// <summary>
        /// <para>For EPIP note that Name should be considered as mandatory when in scope of NETWORK.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("For EPIP note that Name should be considered as mandatory when in scope of NETWOR" +
            "K.")]
        MultilingualString Name
        {
            get;
            set;
        }
        
        MultilingualString ShortName
        {
            get;
            set;
        }
        
        MultilingualString Description
        {
            get;
            set;
        }
        
        PurposeOfGroupingRefStructure PurposeOfGroupingRef
        {
            get;
            set;
        }
        
        PrivateCodeStructure PrivateCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.                      Hyperlinks associated with presentation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Hyperlinks associated with presentation.")]
        System.Collections.ObjectModel.Collection<InfoLinkStructure> InfoLinks
        {
            get;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IGroupOfLinesGroup
    {
        
        /// <summary>
        /// <para>LINEs in GROUP OF LINEs</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("LINEs in GROUP OF LINEs")]
        LineRefsRelStructure Members
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Primary LINE in GROUP OF LINEs, if relevant.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Primary LINE in GROUP OF LINEs, if relevant.")]
        LineRefStructure MainLineRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Primary Transport MODE of GROUP OF LINES.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Primary Transport MODE of GROUP OF LINES.")]
        AllVehicleModesOfTransportEnumeration TransportMode
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("lineRefs_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LineRefsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LineRefStructure> _lineRef;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("LineRef")]
        public System.Collections.ObjectModel.Collection<LineRefStructure> LineRef
        {
            get
            {
                return _lineRef;
            }
            private set
            {
                _lineRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LineRefsRelStructure" /> class.</para>
        /// </summary>
        public LineRefsRelStructure()
        {
            this._lineRef = new System.Collections.ObjectModel.Collection<LineRefStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>A group of SERVICEs, often known to its users by a name or a number.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A group of SERVICEs, often known to its users by a name or a number.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GroupOfServices_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("GroupOfServices", Namespace="http://www.netex.org.uk/netex")]
    public partial class GroupOfServicesVersionStructure : IGroupOfEntitiesElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="GroupOfServicesVersionStructure" /> class.</para>
        /// </summary>
        public GroupOfServicesVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._infoLinks = new System.Collections.ObjectModel.Collection<InfoLinkStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>For EPIP note that Name should be considered as mandatory when in scope of NETWORK.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("For EPIP note that Name should be considered as mandatory when in scope of NETWOR" +
            "K.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PurposeOfGroupingRef")]
        public PurposeOfGroupingRefStructure PurposeOfGroupingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<InfoLinkStructure> _infoLinks;
        
        /// <summary>
        /// <para>Not in EPIP.                      Hyperlinks associated with presentation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Hyperlinks associated with presentation.")]
        [System.Xml.Serialization.XmlArrayAttribute("infoLinks")]
        [System.Xml.Serialization.XmlArrayItemAttribute("InfoLink", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<InfoLinkStructure> InfoLinks
        {
            get
            {
                return _infoLinks;
            }
            private set
            {
                _infoLinks = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the InfoLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InfoLinksSpecified
        {
            get
            {
                return (this.InfoLinks.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Origin associated with this GROUP OF SERVICEs.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Origin associated with this GROUP OF SERVICEs.")]
        [System.Xml.Serialization.XmlElementAttribute("Origin")]
        public OriginViewStructure Origin { get; set; }
        
        /// <summary>
        /// <para>Destination associated with this GROUP OF SERVICEs</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Destination associated with this GROUP OF SERVICEs")]
        [System.Xml.Serialization.XmlElementAttribute("Destination")]
        public DestinationViewStructure Destination { get; set; }
        
        /// <summary>
        /// <para>Destinations associated with this GROUP OF SERVICEs, including via points.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Destinations associated with this GROUP OF SERVICEs, including via points.")]
        [System.Xml.Serialization.XmlElementAttribute("destinationDisplays")]
        public DestinationDisplayRefsRelStructure DestinationDisplays { get; set; }
        
        /// <summary>
        /// <para>Services in GROUP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Services in GROUP.")]
        [System.Xml.Serialization.XmlElementAttribute("members")]
        public GroupOfServicesMembersRelStructure Members { get; set; }
        
        /// <summary>
        /// <para>NOTICEs  relevant for the whole GROUP OF SERVICEs.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("NOTICEs relevant for the whole GROUP OF SERVICEs.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("noticeAssignments")]
        public NoticeAssignmentViewsRelStructure NoticeAssignments { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OriginViewStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OriginViewStructure
    {
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of Stop Point.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Stop Point.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ScheduledStopPointRef")]
        public ScheduledStopPointRefStructure ScheduledStopPointRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("DestinationDisplayRef")]
        public DestinationDisplayRefStructure DestinationDisplayRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TopographicPlaceView")]
        public TopographicPlaceViewStructure TopographicPlaceView { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("destinationDisplayRefs_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DestinationDisplayRefsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DestinationDisplayRefStructure> _destinationDisplayRef;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("DestinationDisplayRef")]
        public System.Collections.ObjectModel.Collection<DestinationDisplayRefStructure> DestinationDisplayRef
        {
            get
            {
                return _destinationDisplayRef;
            }
            private set
            {
                _destinationDisplayRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DestinationDisplayRefsRelStructure" /> class.</para>
        /// </summary>
        public DestinationDisplayRefsRelStructure()
        {
            this._destinationDisplayRef = new System.Collections.ObjectModel.Collection<DestinationDisplayRefStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("groupOfServicesMembers_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GroupOfServicesMembersRelStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<GroupOfServicesMemberStructure> _groupOfServicesMember;
        
        /// <summary>
        /// <para>Member of GROUP OF SERVICE members.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Member of GROUP OF SERVICE members.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("GroupOfServicesMember")]
        public System.Collections.ObjectModel.Collection<GroupOfServicesMemberStructure> GroupOfServicesMember
        {
            get
            {
                return _groupOfServicesMember;
            }
            private set
            {
                _groupOfServicesMember = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="GroupOfServicesMembersRelStructure" /> class.</para>
        /// </summary>
        public GroupOfServicesMembersRelStructure()
        {
            this._groupOfServicesMember = new System.Collections.ObjectModel.Collection<GroupOfServicesMemberStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GroupOfServicesMemberStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("GroupOfServicesMember", Namespace="http://www.netex.org.uk/netex")]
    public partial class GroupOfServicesMemberStructure : IVersionedChildElementGroup, IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="GroupOfServicesMemberStructure" /> class.</para>
        /// </summary>
        public GroupOfServicesMemberStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ServiceJourneyRef")]
        public ServiceJourneyRefStructure ServiceJourneyRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TemplateServiceJourneyRef")]
        public ServiceJourneyRefStructure TemplateServiceJourneyRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("VehicleJourneyRef")]
        public VehicleJourneyRefStructure VehicleJourneyRef { get; set; }
        
        /// <summary>
        /// <para>NOTICEs  Relevant for this grouping.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("NOTICEs Relevant for this grouping.")]
        [System.Xml.Serialization.XmlElementAttribute("noticeAssignments")]
        public NoticeAssignmentViewsRelStructure NoticeAssignments { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public string Order { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("VehicleJourneyRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("VehicleJourneyRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class VehicleJourneyRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("noticeAssignmentViews_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NoticeAssignmentViewsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<NoticeAssignmentViewStructure> _noticeAssignmentView;
        
        [System.Xml.Serialization.XmlElementAttribute("NoticeAssignmentView")]
        public System.Collections.ObjectModel.Collection<NoticeAssignmentViewStructure> NoticeAssignmentView
        {
            get
            {
                return _noticeAssignmentView;
            }
            private set
            {
                _noticeAssignmentView = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the NoticeAssignmentView collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NoticeAssignmentViewSpecified
        {
            get
            {
                return (this.NoticeAssignmentView.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="NoticeAssignmentViewsRelStructure" /> class.</para>
        /// </summary>
        public NoticeAssignmentViewsRelStructure()
        {
            this._noticeAssignmentView = new System.Collections.ObjectModel.Collection<NoticeAssignmentViewStructure>();
            this._noticeAssignment = new System.Collections.ObjectModel.Collection<NoticeAssignmentVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<NoticeAssignmentVersionStructure> _noticeAssignment;
        
        /// <summary>
        /// <para>Not allowed in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not allowed in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("NoticeAssignment")]
        public System.Collections.ObjectModel.Collection<NoticeAssignmentVersionStructure> NoticeAssignment
        {
            get
            {
                return _noticeAssignment;
            }
            private set
            {
                _noticeAssignment = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the NoticeAssignment collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NoticeAssignmentSpecified
        {
            get
            {
                return (this.NoticeAssignment.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>View of a NOTICE ASSIGNMENT. for use in a specific context. This can be used to embed the notice itself in the context.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("View of a NOTICE ASSIGNMENT. for use in a specific context. This can be used to e" +
        "mbed the notice itself in the context.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NoticeAssignmentViewStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("NoticeAssignmentView", Namespace="http://www.netex.org.uk/netex")]
    public partial class NoticeAssignmentViewStructure
    {
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>In EPIP only to be used towards a previoulsy embedded Notice</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("In EPIP only to be used towards a previoulsy embedded Notice")]
        [System.Xml.Serialization.XmlElementAttribute("NoticeRef")]
        public NoticeRefStructure NoticeRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Text")]
        public MultilingualString Text { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PublicCode")]
        public string PublicCode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TypeOfNoticeRef")]
        public TypeOfNoticeRefStructure TypeOfNoticeRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("CanBeAdvertised")]
        public bool CanBeAdvertised { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CanBeAdvertised property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CanBeAdvertisedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public string Order { get; set; }
    }
    
    /// <summary>
    /// <para>Group of STOP PLACEs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Group of STOP PLACEs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GroupOfStopPlaces_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("GroupOfStopPlaces", Namespace="http://www.netex.org.uk/netex")]
    public partial class GroupOfStopPlacesVersionStructure : IGroupOfEntitiesElementGroup, IPtSubmodeChoiceGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="GroupOfStopPlacesVersionStructure" /> class.</para>
        /// </summary>
        public GroupOfStopPlacesVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._infoLinks = new System.Collections.ObjectModel.Collection<InfoLinkStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>For EPIP note that Name should be considered as mandatory when in scope of NETWORK.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("For EPIP note that Name should be considered as mandatory when in scope of NETWOR" +
            "K.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PurposeOfGroupingRef")]
        public PurposeOfGroupingRefStructure PurposeOfGroupingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<InfoLinkStructure> _infoLinks;
        
        /// <summary>
        /// <para>Not in EPIP.                      Hyperlinks associated with presentation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Hyperlinks associated with presentation.")]
        [System.Xml.Serialization.XmlArrayAttribute("infoLinks")]
        [System.Xml.Serialization.XmlArrayItemAttribute("InfoLink", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<InfoLinkStructure> InfoLinks
        {
            get
            {
                return _infoLinks;
            }
            private set
            {
                _infoLinks = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the InfoLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InfoLinksSpecified
        {
            get
            {
                return (this.InfoLinks.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PublicCode")]
        public string PublicCode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("members")]
        public StopPlaceMembersRelStructure Members { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("Centroid")]
        public CentroidStructure Centroid { get; set; }
        
        /// <summary>
        /// <para>Primary TRANSPORT MODE of the
        ///group.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Primary TRANSPORT MODE of the group.")]
        [System.Xml.Serialization.XmlElementAttribute("TransportMode")]
        public VehicleModeEnumeration TransportMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransportMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TransportModeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("AirSubmode")]
        public AirSubmodeEnumeration AirSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AirSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AirSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("BusSubmode")]
        public BusSubmodeEnumeration BusSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BusSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BusSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("CoachSubmode")]
        public CoachSubmodeEnumeration CoachSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CoachSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CoachSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("FunicularSubmode")]
        public FunicularSubmodeEnumeration FunicularSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FunicularSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FunicularSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("MetroSubmode")]
        public MetroSubmodeEnumeration MetroSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MetroSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MetroSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TramSubmode")]
        public TramSubmodeEnumeration TramSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TramSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TramSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TelecabinSubmode")]
        public TelecabinSubmodeEnumeration TelecabinSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TelecabinSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TelecabinSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("RailSubmode")]
        public RailSubmodeEnumeration RailSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RailSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RailSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("WaterSubmode")]
        public WaterSubmodeEnumeration WaterSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WaterSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WaterSubmodeSpecified { get; set; }
        
        /// <summary>
        /// <para>Extra: Snow and Ice Submode. +v1.1s</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Extra: Snow and Ice Submode. +v1.1s")]
        [System.Xml.Serialization.XmlElementAttribute("SnowAndIceSubmode")]
        public SnowAndIceSubmodeEnumeration SnowAndIceSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SnowAndIceSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SnowAndIceSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("stopPlaceMembers_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StopPlaceMembersRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<StopPlaceRefStructure> _stopPlaceRef;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("StopPlaceRef")]
        public System.Collections.ObjectModel.Collection<StopPlaceRefStructure> StopPlaceRef
        {
            get
            {
                return _stopPlaceRef;
            }
            private set
            {
                _stopPlaceRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="StopPlaceMembersRelStructure" /> class.</para>
        /// </summary>
        public StopPlaceMembersRelStructure()
        {
            this._stopPlaceRef = new System.Collections.ObjectModel.Collection<StopPlaceRefStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>Frequency of service.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Frequency of service.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HeadwayIntervalStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Headway", Namespace="http://www.netex.org.uk/netex")]
    public partial class HeadwayIntervalStructure : IHeadwayIntervalGroup
    {
        
        /// <summary>
        /// <para>Scheduled normal headway interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Scheduled normal headway interval.")]
        [System.Xml.Serialization.XmlElementAttribute("ScheduledHeadwayInterval")]
        public string ScheduledHeadwayInterval { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. Minimum headway interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Minimum headway interval.")]
        [System.Xml.Serialization.XmlElementAttribute("MinimumHeadwayInterval")]
        public string MinimumHeadwayInterval { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. Maximum headway interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum headway interval.")]
        [System.Xml.Serialization.XmlElementAttribute("MaximumHeadwayInterval")]
        public string MaximumHeadwayInterval { get; set; }
    }
    
    /// <summary>
    /// <para>Type for a JOURNEY PART COUPLE.</para>
    /// <para>Two or more  JOURNEY PARTs of different VEHICLE JOURNEYs served simultaneously by a train set up by coupling their single vehicles.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a JOURNEY PART COUPLE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("JourneyPartCouple_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("JourneyPartCouple", Namespace="http://www.netex.org.uk/netex")]
    public partial class JourneyPartCoupleVersionStructure : IDataManagedObjectElementGroup, IJourneyPartCoupleGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyPartCoupleVersionStructure" /> class.</para>
        /// </summary>
        public JourneyPartCoupleVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Time of Departure.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Time of Departure.")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Start time of JOURNEY PART.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Start time of JOURNEY PART.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("StartTime")]
        public string StartTime { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _startTimeDayOffset = "0";
        
        /// <summary>
        /// <para>Number of days after journey start time that start time is.</para>
        /// <para>Offset in days.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("0")]
        [System.ComponentModel.DescriptionAttribute("Number of days after journey start time that start time is.")]
        [System.Xml.Serialization.XmlElementAttribute("StartTimeDayOffset")]
        public string StartTimeDayOffset
        {
            get
            {
                return _startTimeDayOffset;
            }
            set
            {
                _startTimeDayOffset = value;
            }
        }
        
        /// <summary>
        /// <para>End time of JOURNEY PART.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("End time of JOURNEY PART.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("EndTime")]
        public string EndTime { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _endTimeDayOffset = "0";
        
        /// <summary>
        /// <para>Number of days after journey start time that end time is.</para>
        /// <para>Offset in days.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("0")]
        [System.ComponentModel.DescriptionAttribute("Number of days after journey start time that end time is.")]
        [System.Xml.Serialization.XmlElementAttribute("EndTimeDayOffset")]
        public string EndTimeDayOffset
        {
            get
            {
                return _endTimeDayOffset;
            }
            set
            {
                _endTimeDayOffset = value;
            }
        }
        
        /// <summary>
        /// <para>Point at which this  JOURNEY PART starts.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Point at which this JOURNEY PART starts.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("FromStopPointRef")]
        public ScheduledStopPointRefStructure FromStopPointRef { get; set; }
        
        /// <summary>
        /// <para>Point at which this JOURNEY PART ends.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Point at which this JOURNEY PART ends.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ToStopPointRef")]
        public ScheduledStopPointRefStructure ToStopPointRef { get; set; }
        
        /// <summary>
        /// <para>Main Journey JOURNEY PART of coupling.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Main Journey JOURNEY PART of coupling.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("MainPartRef")]
        public JourneyPartCoupleRefStructure MainPartRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("BlockRef")]
        public BlockRefStructure BlockRef { get; set; }
        
        /// <summary>
        /// <para>JOURNEY PARTs in JOURNEY PART COUPLE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("JOURNEY PARTs in JOURNEY PART COUPLE.")]
        [System.Xml.Serialization.XmlElementAttribute("journeyParts")]
        public JourneyPartRefsRelStructure JourneyParts { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TrainNumberRef")]
        public TrainNumberRefStructure TrainNumberRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
        
        /// <summary>
        /// <para>Order of JOURNEY PART COUPLE. +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Order of JOURNEY PART COUPLE. +v1.1")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public string Order { get; set; }
    }
    
    /// <summary>
    /// <para>Elements for  JOURNEY PART COUPLe.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for JOURNEY PART COUPLe.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IJourneyPartCoupleGroup
    {
        
        /// <summary>
        /// <para>Time of Departure.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Time of Departure.")]
        MultilingualString Description
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Start time of JOURNEY PART.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Start time of JOURNEY PART.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        string StartTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Number of days after journey start time that start time is.</para>
        /// <para>Offset in days.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("0")]
        [System.ComponentModel.DescriptionAttribute("Number of days after journey start time that start time is.")]
        string StartTimeDayOffset
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>End time of JOURNEY PART.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("End time of JOURNEY PART.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        string EndTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Number of days after journey start time that end time is.</para>
        /// <para>Offset in days.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("0")]
        [System.ComponentModel.DescriptionAttribute("Number of days after journey start time that end time is.")]
        string EndTimeDayOffset
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Point at which this  JOURNEY PART starts.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Point at which this JOURNEY PART starts.")]
        ScheduledStopPointRefStructure FromStopPointRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Point at which this JOURNEY PART ends.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Point at which this JOURNEY PART ends.")]
        ScheduledStopPointRefStructure ToStopPointRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Main Journey JOURNEY PART of coupling.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Main Journey JOURNEY PART of coupling.")]
        JourneyPartCoupleRefStructure MainPartRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        BlockRefStructure BlockRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>JOURNEY PARTs in JOURNEY PART COUPLE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("JOURNEY PARTs in JOURNEY PART COUPLE.")]
        JourneyPartRefsRelStructure JourneyParts
        {
            get;
            set;
        }
        
        TrainNumberRefStructure TrainNumberRef
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("JourneyPartCoupleRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("JourneyPartCoupleRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class JourneyPartCoupleRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BlockRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("BlockRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class BlockRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("journeyPartRefs_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JourneyPartRefsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<JourneyPartRefStructure> _journeyPartRef;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("JourneyPartRef")]
        public System.Collections.ObjectModel.Collection<JourneyPartRefStructure> JourneyPartRef
        {
            get
            {
                return _journeyPartRef;
            }
            private set
            {
                _journeyPartRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyPartRefsRelStructure" /> class.</para>
        /// </summary>
        public JourneyPartRefsRelStructure()
        {
            this._journeyPartRef = new System.Collections.ObjectModel.Collection<JourneyPartRefStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("JourneyPartRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("JourneyPartRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class JourneyPartRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>TRAIN NUMBER reference.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("TRAIN NUMBER reference.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TrainNumberRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TrainNumberRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TrainNumberRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>A group of VEHICLE JOURNEYs following the same JOURNEY PATTERN and having the same headway interval between a specified start and end time (for example, ‘every 10 minutes’). This is especially useful for presenting passenger information.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A group of VEHICLE JOURNEYs following the same JOURNEY PATTERN and having the sam" +
        "e headway interval between a specified start and end time (for example, ‘every 1" +
        "0 minutes’). This is especially useful for presenting passenger information.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HeadwayJourneyGroup_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("HeadwayJourneyGroup", Namespace="http://www.netex.org.uk/netex")]
    public partial class HeadwayJourneyGroupVersionStructure : IGroupOfEntitiesElementGroup, IJourneyFrequencyGroupGroup, IHeadwayIntervalGroup, IOptionalIdDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="HeadwayJourneyGroupVersionStructure" /> class.</para>
        /// </summary>
        public HeadwayJourneyGroupVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._infoLinks = new System.Collections.ObjectModel.Collection<InfoLinkStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>For EPIP note that Name should be considered as mandatory when in scope of NETWORK.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("For EPIP note that Name should be considered as mandatory when in scope of NETWOR" +
            "K.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PurposeOfGroupingRef")]
        public PurposeOfGroupingRefStructure PurposeOfGroupingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<InfoLinkStructure> _infoLinks;
        
        /// <summary>
        /// <para>Not in EPIP.                      Hyperlinks associated with presentation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Hyperlinks associated with presentation.")]
        [System.Xml.Serialization.XmlArrayAttribute("infoLinks")]
        [System.Xml.Serialization.XmlArrayItemAttribute("InfoLink", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<InfoLinkStructure> InfoLinks
        {
            get
            {
                return _infoLinks;
            }
            private set
            {
                _infoLinks = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the InfoLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InfoLinksSpecified
        {
            get
            {
                return (this.InfoLinks.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Time of first departure in JOURNEY FREQUENCY GROUP.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Time of first departure in JOURNEY FREQUENCY GROUP.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("FirstDepartureTime")]
        public string FirstDepartureTime { get; set; }
        
        /// <summary>
        /// <para>Offset days for the start-time. Number of days after the starting operational day if journey does not start on same calendar day as OPERATING DAY date. Default is 0 for same day.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Offset days for the start-time. Number of days after the starting operational day" +
            " if journey does not start on same calendar day as OPERATING DAY date. Default i" +
            "s 0 for same day.")]
        [System.Xml.Serialization.XmlElementAttribute("FirstDayOffset")]
        public string FirstDayOffset { get; set; }
        
        /// <summary>
        /// <para>Time of last departure in JOURNEY FREQUENCY GROUP.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Time of last departure in JOURNEY FREQUENCY GROUP.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("LastDepartureTime")]
        public string LastDepartureTime { get; set; }
        
        /// <summary>
        /// <para>Offset days for end time. Number of days after the OPERATING DAY date of the template vehicle journey. Default is 0 for same day.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Offset days for end time. Number of days after the OPERATING DAY date of the temp" +
            "late vehicle journey. Default is 0 for same day.")]
        [System.Xml.Serialization.XmlElementAttribute("LastDayOffset")]
        public string LastDayOffset { get; set; }
        
        /// <summary>
        /// <para>Mandatory in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("journeys")]
        public JourneysStructure Journeys { get; set; }
        
        /// <summary>
        /// <para>Scheduled normal headway interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Scheduled normal headway interval.")]
        [System.Xml.Serialization.XmlElementAttribute("ScheduledHeadwayInterval")]
        public string ScheduledHeadwayInterval { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. Minimum headway interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Minimum headway interval.")]
        [System.Xml.Serialization.XmlElementAttribute("MinimumHeadwayInterval")]
        public string MinimumHeadwayInterval { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. Maximum headway interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum headway interval.")]
        [System.Xml.Serialization.XmlElementAttribute("MaximumHeadwayInterval")]
        public string MaximumHeadwayInterval { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that this attribute group is used when id is NOT a MANDATORY attribute in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that this attribute group is used when id is NOT a MANDATORY attribute in EP" +
            "IP.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IJourneyFrequencyGroupGroup
    {
        
        /// <summary>
        /// <para>Time of first departure in JOURNEY FREQUENCY GROUP.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Time of first departure in JOURNEY FREQUENCY GROUP.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        string FirstDepartureTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Offset days for the start-time. Number of days after the starting operational day if journey does not start on same calendar day as OPERATING DAY date. Default is 0 for same day.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Offset days for the start-time. Number of days after the starting operational day" +
            " if journey does not start on same calendar day as OPERATING DAY date. Default i" +
            "s 0 for same day.")]
        string FirstDayOffset
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Time of last departure in JOURNEY FREQUENCY GROUP.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Time of last departure in JOURNEY FREQUENCY GROUP.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        string LastDepartureTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Offset days for end time. Number of days after the OPERATING DAY date of the template vehicle journey. Default is 0 for same day.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Offset days for end time. Number of days after the OPERATING DAY date of the temp" +
            "late vehicle journey. Default is 0 for same day.")]
        string LastDayOffset
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Mandatory in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP.")]
        JourneysStructure Journeys
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("journeysStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JourneysStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ServiceJourneyRefStructure> _serviceJourneyRef;
        
        [System.Xml.Serialization.XmlElementAttribute("ServiceJourneyRef")]
        public System.Collections.ObjectModel.Collection<ServiceJourneyRefStructure> ServiceJourneyRef
        {
            get
            {
                return _serviceJourneyRef;
            }
            private set
            {
                _serviceJourneyRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ServiceJourneyRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceJourneyRefSpecified
        {
            get
            {
                return (this.ServiceJourneyRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneysStructure" /> class.</para>
        /// </summary>
        public JourneysStructure()
        {
            this._serviceJourneyRef = new System.Collections.ObjectModel.Collection<ServiceJourneyRefStructure>();
            this._templateServiceJourneyRef = new System.Collections.ObjectModel.Collection<ServiceJourneyRefStructure>();
            this._vehicleJourneyRef = new System.Collections.ObjectModel.Collection<VehicleJourneyRefStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ServiceJourneyRefStructure> _templateServiceJourneyRef;
        
        [System.Xml.Serialization.XmlElementAttribute("TemplateServiceJourneyRef")]
        public System.Collections.ObjectModel.Collection<ServiceJourneyRefStructure> TemplateServiceJourneyRef
        {
            get
            {
                return _templateServiceJourneyRef;
            }
            private set
            {
                _templateServiceJourneyRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TemplateServiceJourneyRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TemplateServiceJourneyRefSpecified
        {
            get
            {
                return (this.TemplateServiceJourneyRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<VehicleJourneyRefStructure> _vehicleJourneyRef;
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("VehicleJourneyRef")]
        public System.Collections.ObjectModel.Collection<VehicleJourneyRefStructure> VehicleJourneyRef
        {
            get
            {
                return _vehicleJourneyRef;
            }
            private set
            {
                _vehicleJourneyRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the VehicleJourneyRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VehicleJourneyRefSpecified
        {
            get
            {
                return (this.VehicleJourneyRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>Type for JOURNEY PART POSITION.</para>
    /// <para>Position in train of JOURNEY PART from a given stop. +v1.1.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for JOURNEY PART POSITION.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("JourneyPartPositionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("JourneyPartPosition", Namespace="http://www.netex.org.uk/netex")]
    public partial class JourneyPartPositionStructure : IJourneyPartPositionGroup, IEntityAttributeGroup
    {
        
        /// <summary>
        /// <para>Not in EPIP. Reference to parent of which this is part. If given by context does not need to be stated. Not relevant in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Reference to parent of which this is part. If given by context does " +
            "not need to be stated. Not relevant in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("ParentJourneyPartRef")]
        public JourneyPartRefStructure ParentJourneyPartRef { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ScheduledStopPointRefStructure> _scheduledStopPointRef;
        
        /// <summary>
        /// <para>Not more than one SCHEDULED STOP POINT reference allowed in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not more than one SCHEDULED STOP POINT reference allowed in EPIP.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ScheduledStopPointRef")]
        public System.Collections.ObjectModel.Collection<ScheduledStopPointRefStructure> ScheduledStopPointRef
        {
            get
            {
                return _scheduledStopPointRef;
            }
            private set
            {
                _scheduledStopPointRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyPartPositionStructure" /> class.</para>
        /// </summary>
        public JourneyPartPositionStructure()
        {
            this._scheduledStopPointRef = new System.Collections.ObjectModel.Collection<ScheduledStopPointRefStructure>();
        }
        
        /// <summary>
        /// <para>Position of JOURNEY PART in TRAIN - from specified SCHEDULED STOP POINT until otherwise stated.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Position of JOURNEY PART in TRAIN - from specified SCHEDULED STOP POINT until oth" +
            "erwise stated.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("PositionInTrain")]
        public string PositionInTrain { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Order of JOURNEY PART position within JOURNEY PART.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Order of JOURNEY PART position within JOURNEY PART.")]
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public string Order { get; set; }
    }
    
    /// <summary>
    /// <para>Elements for JOURNEY PART POSITION.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for JOURNEY PART POSITION.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IJourneyPartPositionGroup
    {
        
        /// <summary>
        /// <para>Not in EPIP. Reference to parent of which this is part. If given by context does not need to be stated. Not relevant in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Reference to parent of which this is part. If given by context does " +
            "not need to be stated. Not relevant in EPIP")]
        JourneyPartRefStructure ParentJourneyPartRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not more than one SCHEDULED STOP POINT reference allowed in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not more than one SCHEDULED STOP POINT reference allowed in EPIP.")]
        System.Collections.ObjectModel.Collection<ScheduledStopPointRefStructure> ScheduledStopPointRef
        {
            get;
        }
        
        /// <summary>
        /// <para>Position of JOURNEY PART in TRAIN - from specified SCHEDULED STOP POINT until otherwise stated.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Position of JOURNEY PART in TRAIN - from specified SCHEDULED STOP POINT until oth" +
            "erwise stated.")]
        string PositionInTrain
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("JourneyPattern_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(JourneyPattern))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceJourneyPattern))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServicePattern))]
    public partial class JourneyPatternVersionStructure : ILinkSequenceElementGroup, IJourneyPatternTimingsGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyPatternVersionStructure" /> class.</para>
        /// </summary>
        public JourneyPatternVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._projections = new System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure>();
            this._infoLinks = new System.Collections.ObjectModel.Collection<InfoLinkStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of LINK SEQUENCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of LINK SEQUENCE.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Units are as specified
        ///for Frame. Default is SI Metres.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Units are as specified for Frame. Default is SI Metres.")]
        [System.Xml.Serialization.XmlElementAttribute("Distance")]
        public decimal Distance { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Distance property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DistanceSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure> _projections;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlArrayAttribute("projections")]
        [System.Xml.Serialization.XmlArrayItemAttribute("LinkSequenceProjection", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure> Projections
        {
            get
            {
                return _projections;
            }
            private set
            {
                _projections = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Projections collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProjectionsSpecified
        {
            get
            {
                return (this.Projections.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<InfoLinkStructure> _infoLinks;
        
        /// <summary>
        /// <para>Not in EPIP.                      Hyperlinks associated with presentation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Hyperlinks associated with presentation.")]
        [System.Xml.Serialization.XmlArrayAttribute("infoLinks")]
        [System.Xml.Serialization.XmlArrayItemAttribute("InfoLink", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<InfoLinkStructure> InfoLinks
        {
            get
            {
                return _infoLinks;
            }
            private set
            {
                _infoLinks = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the InfoLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InfoLinksSpecified
        {
            get
            {
                return (this.InfoLinks.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("RouteRef")]
        public RouteRefStructure RouteRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("RouteView")]
        public RouteViewStructure RouteView { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("DirectionType")]
        public DirectionTypeEnumeration DirectionType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DirectionType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirectionTypeSpecified { get; set; }
        
        /// <summary>
        /// <para>EPIP: Only provide for filtering purposes, not description.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("EPIP: Only provide for filtering purposes, not description.")]
        [System.Xml.Serialization.XmlElementAttribute("DirectionRef")]
        public DirectionRefStructure DirectionRef { get; set; }
        
        /// <summary>
        /// <para>Reference to DESTINATION DISPLAY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to DESTINATION DISPLAY.")]
        [System.Xml.Serialization.XmlElementAttribute("DestinationDisplayRef")]
        public DestinationDisplayRefStructure DestinationDisplayRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("noticeAssignments")]
        public NoticeAssignmentViewsRelStructure NoticeAssignments { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("runTimes")]
        public JourneyPatternRunTimesStructure RunTimes { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("waitTimes")]
        public JourneyPatternWaitTimesStructure WaitTimes { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("headways")]
        public JourneyPatternHeadwaysStructure Headways { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("layovers")]
        public JourneyPatternLayoversStructure Layovers { get; set; }
        
        /// <summary>
        /// <para>Sequence of points in JOURNEY PATTERN Points may be SCHEDULED STOP POINTs or TIMING POINTs. Note that in EPIP there are no TIMING POINTs that are not also SCHEDULED STOP POINTs.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Sequence of points in JOURNEY PATTERN Points may be SCHEDULED STOP POINTs or TIMI" +
            "NG POINTs. Note that in EPIP there are no TIMING POINTs that are not also SCHEDU" +
            "LED STOP POINTs.")]
        [System.Xml.Serialization.XmlElementAttribute("pointsInSequence")]
        public StopPointsInSequenceRelStructure PointsInSequence { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("linksInSequence")]
        public LinksInSequenceRelStructure LinksInSequence { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ILinkSequenceElementGroup : IDataManagedObjectElementGroup
    {
        
        /// <summary>
        /// <para>Name of LINK SEQUENCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of LINK SEQUENCE.")]
        MultilingualString Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        MultilingualString ShortName
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        MultilingualString Description
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Units are as specified
        ///for Frame. Default is SI Metres.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Units are as specified for Frame. Default is SI Metres.")]
        decimal Distance
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        PrivateCodeStructure PrivateCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure> Projections
        {
            get;
        }
        
        /// <summary>
        /// <para>Not in EPIP.                      Hyperlinks associated with presentation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Hyperlinks associated with presentation.")]
        System.Collections.ObjectModel.Collection<InfoLinkStructure> InfoLinks
        {
            get;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("linkSequenceProjectionsStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LinkSequenceProjectionsStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure> _linkSequenceProjection;
        
        [System.Xml.Serialization.XmlElementAttribute("LinkSequenceProjection")]
        public System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure> LinkSequenceProjection
        {
            get
            {
                return _linkSequenceProjection;
            }
            private set
            {
                _linkSequenceProjection = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LinkSequenceProjection collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LinkSequenceProjectionSpecified
        {
            get
            {
                return (this.LinkSequenceProjection.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LinkSequenceProjectionsStructure" /> class.</para>
        /// </summary>
        public LinkSequenceProjectionsStructure()
        {
            this._linkSequenceProjection = new System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LinkSequenceProjectionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("LinkSequenceProjection", Namespace="http://www.netex.org.uk/netex")]
    public partial class LinkSequenceProjectionStructure : IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlElementAttribute("ProjectedLinkSequenceRef")]
        public LinkSequenceRefStructure ProjectedLinkSequenceRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("LineString", Namespace="http://www.opengis.net/gml/3.2")]
        public Gml.TLineString LineString { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LinkSequenceRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LinkSequenceProjectionRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LinkSequenceRef))]
    public partial class LinkSequenceRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IJourneyPatternTimingsGroup
    {
        
        JourneyPatternRunTimesStructure RunTimes
        {
            get;
            set;
        }
        
        JourneyPatternWaitTimesStructure WaitTimes
        {
            get;
            set;
        }
        
        JourneyPatternHeadwaysStructure Headways
        {
            get;
            set;
        }
        
        JourneyPatternLayoversStructure Layovers
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Type for a list of JOURNEY RUN TIME.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a list of JOURNEY RUN TIME.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("journeyPatternRunTimesStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JourneyPatternRunTimesStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<JourneyRunTimeStructure> _journeyPatternRunTime;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("JourneyPatternRunTime")]
        public System.Collections.ObjectModel.Collection<JourneyRunTimeStructure> JourneyPatternRunTime
        {
            get
            {
                return _journeyPatternRunTime;
            }
            private set
            {
                _journeyPatternRunTime = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyPatternRunTimesStructure" /> class.</para>
        /// </summary>
        public JourneyPatternRunTimesStructure()
        {
            this._journeyPatternRunTime = new System.Collections.ObjectModel.Collection<JourneyRunTimeStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    /// <summary>
    /// <para>Type for JOURNEY RUN TIME.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for JOURNEY RUN TIME.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("JourneyRunTimeStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JourneyRunTimeStructure : IVersionedChildElementGroup, IJourneyTimingGroup, IJourneyRunTimeGroup, IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyRunTimeStructure" /> class.</para>
        /// </summary>
        public JourneyRunTimeStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        /// <summary>
        /// <para>Name of JOURNEY TIMING.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of JOURNEY TIMING.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TimeDemandTypeRef")]
        public TimeDemandTypeRefStructure TimeDemandTypeRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TimebandRef")]
        public TimebandRefStructure TimebandRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("VehicleMode")]
        public AllModesEnumeration VehicleMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VehicleMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VehicleModeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("OperationalContextRef")]
        public OperationalContextRefStructure OperationalContextRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TimingLinkRef")]
        public TimingLinkRefStructure TimingLinkRef { get; set; }
        
        /// <summary>
        /// <para>RUN TIME as an interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("RUN TIME as an interval.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("RunTime")]
        public string RunTime { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    /// <summary>
    /// <para>Elements of a JOURNEY TIMING.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements of a JOURNEY TIMING.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IJourneyTimingGroup
    {
        
        /// <summary>
        /// <para>Name of JOURNEY TIMING.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of JOURNEY TIMING.")]
        MultilingualString Name
        {
            get;
            set;
        }
        
        TimeDemandTypeRefStructure TimeDemandTypeRef
        {
            get;
            set;
        }
        
        TimebandRefStructure TimebandRef
        {
            get;
            set;
        }
        
        AllModesEnumeration VehicleMode
        {
            get;
            set;
        }
        
        OperationalContextRefStructure OperationalContextRef
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TimeDemandTypeRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TimeDemandTypeRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TimeDemandTypeRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Allowed values for r MODES: TPEG pti_table 01.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for r MODES: TPEG pti_table 01.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AllModesEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("VehicleMode", Namespace="http://www.netex.org.uk/netex")]
    public enum AllModesEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("all")]
        All,
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("air")]
        Air,
        
        [System.Xml.Serialization.XmlEnumAttribute("bus")]
        Bus,
        
        [System.Xml.Serialization.XmlEnumAttribute("trolleyBus")]
        TrolleyBus,
        
        [System.Xml.Serialization.XmlEnumAttribute("tram")]
        Tram,
        
        [System.Xml.Serialization.XmlEnumAttribute("coach")]
        Coach,
        
        [System.Xml.Serialization.XmlEnumAttribute("rail")]
        Rail,
        
        [System.Xml.Serialization.XmlEnumAttribute("intercityRail")]
        IntercityRail,
        
        [System.Xml.Serialization.XmlEnumAttribute("urbanRail")]
        UrbanRail,
        
        [System.Xml.Serialization.XmlEnumAttribute("metro")]
        Metro,
        
        [System.Xml.Serialization.XmlEnumAttribute("water")]
        Water,
        
        [System.Xml.Serialization.XmlEnumAttribute("cableway")]
        Cableway,
        
        [System.Xml.Serialization.XmlEnumAttribute("funicular")]
        Funicular,
        
        [System.Xml.Serialization.XmlEnumAttribute("lift")]
        Lift,
        
        [System.Xml.Serialization.XmlEnumAttribute("snowAndIce")]
        SnowAndIce,
        
        [System.Xml.Serialization.XmlEnumAttribute("taxi")]
        Taxi,
        
        /// <summary>
        /// <para>See pti12_x.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("See pti12_x.")]
        [System.Xml.Serialization.XmlEnumAttribute("selfDrive")]
        SelfDrive,
        
        [System.Xml.Serialization.XmlEnumAttribute("foot")]
        Foot,
        
        [System.Xml.Serialization.XmlEnumAttribute("bicycle")]
        Bicycle,
        
        [System.Xml.Serialization.XmlEnumAttribute("motorcycle")]
        Motorcycle,
        
        [System.Xml.Serialization.XmlEnumAttribute("car")]
        Car,
        
        [System.Xml.Serialization.XmlEnumAttribute("shuttle")]
        Shuttle,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OperationalContextRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("OperationalContextRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class OperationalContextRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Elements of a JOURNEY RUN TIME.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements of a JOURNEY RUN TIME.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IJourneyRunTimeGroup
    {
        
        TimingLinkRefStructure TimingLinkRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>RUN TIME as an interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("RUN TIME as an interval.")]
        string RunTime
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TimingLinkRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TimingLinkRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TimingLinkRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Type for a list of JOURNEY WAIT TIMEs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a list of JOURNEY WAIT TIMEs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("journeyPatternWaitTimesStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JourneyPatternWaitTimesStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<JourneyWaitTimeStructure> _journeyPatternWaitTime;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("JourneyPatternWaitTime")]
        public System.Collections.ObjectModel.Collection<JourneyWaitTimeStructure> JourneyPatternWaitTime
        {
            get
            {
                return _journeyPatternWaitTime;
            }
            private set
            {
                _journeyPatternWaitTime = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyPatternWaitTimesStructure" /> class.</para>
        /// </summary>
        public JourneyPatternWaitTimesStructure()
        {
            this._journeyPatternWaitTime = new System.Collections.ObjectModel.Collection<JourneyWaitTimeStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    /// <summary>
    /// <para>Type for JOURNEY WAIT TIME.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for JOURNEY WAIT TIME.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("JourneyWaitTimeStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JourneyWaitTimeStructure : IVersionedChildElementGroup, IJourneyTimingGroup, IJourneyWaitTimeGroup, IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyWaitTimeStructure" /> class.</para>
        /// </summary>
        public JourneyWaitTimeStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        /// <summary>
        /// <para>Name of JOURNEY TIMING.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of JOURNEY TIMING.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TimeDemandTypeRef")]
        public TimeDemandTypeRefStructure TimeDemandTypeRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TimebandRef")]
        public TimebandRefStructure TimebandRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("VehicleMode")]
        public AllModesEnumeration VehicleMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VehicleMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VehicleModeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("OperationalContextRef")]
        public OperationalContextRefStructure OperationalContextRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TimingPointRef")]
        public TimingPointRefStructure TimingPointRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ScheduledStopPointRef")]
        public ScheduledStopPointRefStructure ScheduledStopPointRef { get; set; }
        
        /// <summary>
        /// <para>Wait time as interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Wait time as interval.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("WaitTime")]
        public string WaitTime { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    /// <summary>
    /// <para>Elements of a JOURNEY WAIT TIME.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements of a JOURNEY WAIT TIME.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IJourneyWaitTimeGroup
    {
        
        TimingPointRefStructure TimingPointRef
        {
            get;
            set;
        }
        
        ScheduledStopPointRefStructure ScheduledStopPointRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Wait time as interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Wait time as interval.")]
        string WaitTime
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TimingPointRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TimingPointRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TimingPointRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Type for a list of JOURNEY HEADWAY Interval.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a list of JOURNEY HEADWAY Interval.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("journeyPatternHeadwaysStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JourneyPatternHeadwaysStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<JourneyHeadwayStructure> _journeyPatternHeadway;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("JourneyPatternHeadway")]
        public System.Collections.ObjectModel.Collection<JourneyHeadwayStructure> JourneyPatternHeadway
        {
            get
            {
                return _journeyPatternHeadway;
            }
            private set
            {
                _journeyPatternHeadway = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyPatternHeadwaysStructure" /> class.</para>
        /// </summary>
        public JourneyPatternHeadwaysStructure()
        {
            this._journeyPatternHeadway = new System.Collections.ObjectModel.Collection<JourneyHeadwayStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    /// <summary>
    /// <para>Type for a JOURNEY HEADWAY Interval.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a JOURNEY HEADWAY Interval.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("JourneyHeadwayStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JourneyHeadwayStructure : IVersionedChildElementGroup, IJourneyTimingGroup, IHeadwayIntervalGroup, IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyHeadwayStructure" /> class.</para>
        /// </summary>
        public JourneyHeadwayStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        /// <summary>
        /// <para>Name of JOURNEY TIMING.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of JOURNEY TIMING.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TimeDemandTypeRef")]
        public TimeDemandTypeRefStructure TimeDemandTypeRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TimebandRef")]
        public TimebandRefStructure TimebandRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("VehicleMode")]
        public AllModesEnumeration VehicleMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VehicleMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VehicleModeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("OperationalContextRef")]
        public OperationalContextRefStructure OperationalContextRef { get; set; }
        
        /// <summary>
        /// <para>Scheduled normal headway interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Scheduled normal headway interval.")]
        [System.Xml.Serialization.XmlElementAttribute("ScheduledHeadwayInterval")]
        public string ScheduledHeadwayInterval { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. Minimum headway interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Minimum headway interval.")]
        [System.Xml.Serialization.XmlElementAttribute("MinimumHeadwayInterval")]
        public string MinimumHeadwayInterval { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. Maximum headway interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum headway interval.")]
        [System.Xml.Serialization.XmlElementAttribute("MaximumHeadwayInterval")]
        public string MaximumHeadwayInterval { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    /// <summary>
    /// <para>Type for a list of JOURNEY LAYOVERs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a list of JOURNEY LAYOVERs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("journeyPatternLayoversStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JourneyPatternLayoversStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<JourneyLayoverStructure> _journeyPatternLayover;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("JourneyPatternLayover")]
        public System.Collections.ObjectModel.Collection<JourneyLayoverStructure> JourneyPatternLayover
        {
            get
            {
                return _journeyPatternLayover;
            }
            private set
            {
                _journeyPatternLayover = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyPatternLayoversStructure" /> class.</para>
        /// </summary>
        public JourneyPatternLayoversStructure()
        {
            this._journeyPatternLayover = new System.Collections.ObjectModel.Collection<JourneyLayoverStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    /// <summary>
    /// <para>Type for JOURNEY LAYOVER.</para>
    /// <para>Time allowance at the end of each journey on a specified JOURNEY PATTERN, to allow for delays and for other purposes. This layover supersedes any global layover and may be superseded by a specific VEHICLE JOURNEY LAYOVER.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for JOURNEY LAYOVER.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("JourneyLayoverStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("JourneyLayover", Namespace="http://www.netex.org.uk/netex")]
    public partial class JourneyLayoverStructure : IVersionedChildElementGroup, IJourneyTimingGroup, IJourneyLayoverGroup, IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyLayoverStructure" /> class.</para>
        /// </summary>
        public JourneyLayoverStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        /// <summary>
        /// <para>Name of JOURNEY TIMING.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of JOURNEY TIMING.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TimeDemandTypeRef")]
        public TimeDemandTypeRefStructure TimeDemandTypeRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TimebandRef")]
        public TimebandRefStructure TimebandRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("VehicleMode")]
        public AllModesEnumeration VehicleMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VehicleMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VehicleModeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("OperationalContextRef")]
        public OperationalContextRefStructure OperationalContextRef { get; set; }
        
        /// <summary>
        /// <para>Layover time as interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Layover time as interval.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Layover")]
        public string Layover { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("PointRef")]
        public TimingPointRefStructure PointRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    /// <summary>
    /// <para>Elements of a JOURNEY LAYOVER.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements of a JOURNEY LAYOVER.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IJourneyLayoverGroup
    {
        
        /// <summary>
        /// <para>Layover time as interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Layover time as interval.")]
        string Layover
        {
            get;
            set;
        }
        
        TimingPointRefStructure PointRef
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("RouteViewStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("RouteView", Namespace="http://www.netex.org.uk/netex")]
    public partial class RouteViewStructure
    {
        
        [System.Xml.Serialization.XmlElementAttribute("LineRef")]
        public LineRefStructure LineRef { get; set; }
        
        /// <summary>
        /// <para>Simplified view of a LINE. Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Simplified view of a LINE. Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("LineView")]
        public LineViewStructure LineView { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LineViewStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("LineView", Namespace="http://www.netex.org.uk/netex")]
    public partial class LineViewStructure
    {
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("LineRef")]
        public LineRefStructure LineRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PublicCode")]
        public string PublicCode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TransportMode")]
        public AllVehicleModesOfTransportEnumeration TransportMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransportMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TransportModeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TransportSubmode")]
        public TransportSubmodeStructure TransportSubmode { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("stopPointsInSequence_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StopPointsInSequenceRelStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<StopPointInJourneyPatternStructure> _stopPointInJourneyPattern;
        
        [System.Xml.Serialization.XmlElementAttribute("StopPointInJourneyPattern")]
        public System.Collections.ObjectModel.Collection<StopPointInJourneyPatternStructure> StopPointInJourneyPattern
        {
            get
            {
                return _stopPointInJourneyPattern;
            }
            private set
            {
                _stopPointInJourneyPattern = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the StopPointInJourneyPattern collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StopPointInJourneyPatternSpecified
        {
            get
            {
                return (this.StopPointInJourneyPattern.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="StopPointsInSequenceRelStructure" /> class.</para>
        /// </summary>
        public StopPointsInSequenceRelStructure()
        {
            this._stopPointInJourneyPattern = new System.Collections.ObjectModel.Collection<StopPointInJourneyPatternStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("StopPointInJourneyPatternStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("StopPointInJourneyPattern", Namespace="http://www.netex.org.uk/netex")]
    public partial class StopPointInJourneyPatternStructure : IEntityAttributeGroup
    {
        
        /// <summary>
        /// <para>Reference to LINK SEQUENCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to LINK SEQUENCE.")]
        [System.Xml.Serialization.XmlElementAttribute("LinkSequenceRef")]
        public LinkSequenceRefStructure LinkSequenceRef { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PointProjectionStructure> _projections;
        
        /// <summary>
        /// <para>Not in EPIP (for now)</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP (for now)")]
        [System.Xml.Serialization.XmlArrayAttribute("projections")]
        [System.Xml.Serialization.XmlArrayItemAttribute("PointProjection", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<PointProjectionStructure> Projections
        {
            get
            {
                return _projections;
            }
            private set
            {
                _projections = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Projections collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProjectionsSpecified
        {
            get
            {
                return (this.Projections.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="StopPointInJourneyPatternStructure" /> class.</para>
        /// </summary>
        public StopPointInJourneyPatternStructure()
        {
            this._projections = new System.Collections.ObjectModel.Collection<PointProjectionStructure>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Reference to SCHEDULED STOP POINT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to SCHEDULED STOP POINT.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ScheduledStopPointRef")]
        public ScheduledStopPointRefStructure ScheduledStopPointRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("OnwardTimingLinkRef")]
        public TimingLinkRefStructure OnwardTimingLinkRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. However note that full schema has default-value = false. This means that not present value implies that this is never a wait point...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. However note that full schema has default-value = false. This means " +
            "that not present value implies that this is never a wait point...")]
        [System.Xml.Serialization.XmlElementAttribute("IsWaitPoint")]
        public bool IsWaitPoint { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IsWaitPoint property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsWaitPointSpecified { get; set; }
        
        /// <summary>
        /// <para>Next SERVICE LINK after STOP POINT in JOURNEY
        ///PATTERN visit.                EPIP:   
        ///This attribute shall only be used if multiple SERVICE
        ///LINKs are available between two consecutive
        ///SCHEDULED STOP POINTs (otherwise the sequence of
        ///STOP POINTs IN JOURNEY PATTERN SCHEDULED
        ///STOP POINT is sufficient and remains the main way of
        ///describing the stop sequence in the EPIP).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Next SERVICE LINK after STOP POINT in JOURNEY PATTERN visit. EPIP: This attribute shall only be used if multiple SERVICE LINKs are available between two consecutive SCHEDULED STOP POINTs (otherwise the sequence of STOP POINTs IN JOURNEY PATTERN SCHEDULED STOP POINT is sufficient and remains the main way of describing the stop sequence in the EPIP).")]
        [System.Xml.Serialization.XmlElementAttribute("OnwardServiceLinkRef")]
        public ServiceLinkRefStructure OnwardServiceLinkRef { get; set; }
        
        /// <summary>
        /// <para>Whether alighting is allowed at the stop. Default is true.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether alighting is allowed at the stop. Default is true.")]
        [System.Xml.Serialization.XmlElementAttribute("ForAlighting")]
        public bool ForAlighting { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ForAlighting property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ForAlightingSpecified { get; set; }
        
        /// <summary>
        /// <para>Whether boarding is allowed at the stop. Default is true.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether boarding is allowed at the stop. Default is true.")]
        [System.Xml.Serialization.XmlElementAttribute("ForBoarding")]
        public bool ForBoarding { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ForBoarding property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ForBoardingSpecified { get; set; }
        
        /// <summary>
        /// <para>Reference to a DESTINATION DISPLAY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a DESTINATION DISPLAY.")]
        [System.Xml.Serialization.XmlElementAttribute("DestinationDisplayRef")]
        public DestinationDisplayRefStructure DestinationDisplayRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("DestinationDisplayView")]
        public DestinationDisplayViewStructure DestinationDisplayView { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("FlexiblePointProperties")]
        public FlexiblePointPropertiesStructure FlexiblePointProperties { get; set; }
        
        /// <summary>
        /// <para>Whether DESTINATION DISPLAY should be updated at this point. If DESTINATION NAME value is different from Previous stop this is implicit.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether DESTINATION DISPLAY should be updated at this point. If DESTINATION NAME " +
            "value is different from Previous stop this is implicit.")]
        [System.Xml.Serialization.XmlElementAttribute("ChangeOfDestinationDisplay")]
        public bool ChangeOfDestinationDisplay { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChangeOfDestinationDisplay property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangeOfDestinationDisplaySpecified { get; set; }
        
        /// <summary>
        /// <para>NOTICEs for POINT IN JOURNEY PATTERN.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("NOTICEs for POINT IN JOURNEY PATTERN.")]
        [System.Xml.Serialization.XmlElementAttribute("noticeAssignments")]
        public NoticeAssignmentsRelStructure NoticeAssignments { get; set; }
        
        /// <summary>
        /// <para>Whether stop is a request stop for this journey. Default is false.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether stop is a request stop for this journey. Default is false.")]
        [System.Xml.Serialization.XmlElementAttribute("RequestStop")]
        public bool RequestStop { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RequestStop property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RequestStopSpecified { get; set; }
        
        /// <summary>
        /// <para>Method to Request Stop in this particular service pattern; if none specified, as as per stop.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Method to Request Stop in this particular service pattern; if none specified, as " +
            "as per stop.")]
        [System.Xml.Serialization.XmlElementAttribute("RequestMethod")]
        public RequestMethodTypeEnumeration RequestMethod { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RequestMethod property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RequestMethodSpecified { get; set; }
        
        /// <summary>
        /// <para>Nature of use of stop, e.g. access, interchange only, or pass through. Default is Access.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of use of stop, e.g. access, interchange only, or pass through. Default is" +
            " Access.")]
        [System.Xml.Serialization.XmlElementAttribute("StopUse")]
        public StopUseEnumeration StopUse { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StopUse property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StopUseSpecified { get; set; }
        
        /// <summary>
        /// <para>Booking Arrangements for stop if different from those for SERVICE JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Booking Arrangements for stop if different from those for SERVICE JOURNEY.")]
        [System.Xml.Serialization.XmlElementAttribute("BookingArrangements")]
        public BookingArrangementsStructure BookingArrangements { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public string Order { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("pointProjectionsStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PointProjectionsStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PointProjectionStructure> _pointProjection;
        
        [System.Xml.Serialization.XmlElementAttribute("PointProjection")]
        public System.Collections.ObjectModel.Collection<PointProjectionStructure> PointProjection
        {
            get
            {
                return _pointProjection;
            }
            private set
            {
                _pointProjection = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PointProjection collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PointProjectionSpecified
        {
            get
            {
                return (this.PointProjection.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PointProjectionsStructure" /> class.</para>
        /// </summary>
        public PointProjectionsStructure()
        {
            this._pointProjection = new System.Collections.ObjectModel.Collection<PointProjectionStructure>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PointProjectionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("PointProjection", Namespace="http://www.netex.org.uk/netex")]
    public partial class PointProjectionStructure : IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlElementAttribute("ProjectedPointRef")]
        public ProjectedPointRefStructure ProjectedPointRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ProjectToPointRef")]
        public ProjectToPointRefStructure ProjectToPointRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ProjectedPointRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ProjectedPointRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ProjectedPointRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ProjectToPointRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ProjectToPointRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ProjectToPointRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ServiceLinkRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ServiceLinkRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ServiceLinkRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DestinationDisplayViewStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("DestinationDisplayView", Namespace="http://www.netex.org.uk/netex")]
    public partial class DestinationDisplayViewStructure
    {
        
        [System.Xml.Serialization.XmlElementAttribute("DestinationDisplayRef")]
        public DestinationDisplayRefStructure DestinationDisplayRef { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
    }
    
    /// <summary>
    /// <para>Allowed values for Stop RequestMethod</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Stop RequestMethod")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("RequestMethodTypeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum RequestMethodTypeEnumeration
    {
        
        /// <summary>
        /// <para>No action required to request stop</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("No action required to request stop")]
        [System.Xml.Serialization.XmlEnumAttribute("noneRequired")]
        NoneRequired,
        
        /// <summary>
        /// <para>Make hand signal to request stop</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Make hand signal to request stop")]
        [System.Xml.Serialization.XmlEnumAttribute("handSignal")]
        HandSignal,
        
        /// <summary>
        /// <para>Call number to request stop</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Call number to request stop")]
        [System.Xml.Serialization.XmlEnumAttribute("turnOnLight")]
        TurnOnLight,
        
        /// <summary>
        /// <para>Press button at stop to request stop</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Press button at stop to request stop")]
        [System.Xml.Serialization.XmlEnumAttribute("stopButton")]
        StopButton,
        
        /// <summary>
        /// <para>Call number to request stop</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Call number to request stop")]
        [System.Xml.Serialization.XmlEnumAttribute("phoneCall")]
        PhoneCall,
        
        /// <summary>
        /// <para>Use mobile Application to request stop</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Use mobile Application to request stop")]
        [System.Xml.Serialization.XmlEnumAttribute("mobileApp")]
        MobileApp,
        
        /// <summary>
        /// <para>Use Sms to request stop</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Use Sms to request stop")]
        [System.Xml.Serialization.XmlEnumAttribute("sms")]
        Sms,
        
        /// <summary>
        /// <para>Use other method to request stop</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Use other method to request stop")]
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Allowed values for Stop Use.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Stop Use.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("StopUseEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum StopUseEnumeration
    {
        
        /// <summary>
        /// <para>Stop May be used to access transport system.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Stop May be used to access transport system.")]
        [System.Xml.Serialization.XmlEnumAttribute("access")]
        Access,
        
        /// <summary>
        /// <para>Stop may only be used for interchange. Passengers may not enter or exit the station.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Stop may only be used for interchange. Passengers may not enter or exit the stati" +
            "on.")]
        [System.Xml.Serialization.XmlEnumAttribute("interchangeOnly")]
        InterchangeOnly,
        
        /// <summary>
        /// <para>Vehicle passes through without stopping.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Vehicle passes through without stopping.")]
        [System.Xml.Serialization.XmlEnumAttribute("passthrough")]
        Passthrough,
        
        [System.Xml.Serialization.XmlEnumAttribute("noBoardingOrAlighting")]
        NoBoardingOrAlighting,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("linksInSequence_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("linksInSequence", Namespace="http://www.netex.org.uk/netex")]
    public partial class LinksInSequenceRelStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ServiceLinkInJourneyPatternStructure> _serviceLinkInJourneyPattern;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ServiceLinkInJourneyPattern")]
        public System.Collections.ObjectModel.Collection<ServiceLinkInJourneyPatternStructure> ServiceLinkInJourneyPattern
        {
            get
            {
                return _serviceLinkInJourneyPattern;
            }
            private set
            {
                _serviceLinkInJourneyPattern = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LinksInSequenceRelStructure" /> class.</para>
        /// </summary>
        public LinksInSequenceRelStructure()
        {
            this._serviceLinkInJourneyPattern = new System.Collections.ObjectModel.Collection<ServiceLinkInJourneyPatternStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ServiceLinkInJourneyPatternStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ServiceLinkInJourneyPattern", Namespace="http://www.netex.org.uk/netex")]
    public partial class ServiceLinkInJourneyPatternStructure : IEntityAttributeGroup
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ServiceLinkRef")]
        public ServiceLinkRefStructure ServiceLinkRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public string Order { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Level_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Level", Namespace="http://www.netex.org.uk/netex")]
    public partial class LevelVersionStructure : IDataManagedObjectElementGroup, ILevelGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LevelVersionStructure" /> class.</para>
        /// </summary>
        public LevelVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of LEVEL.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of LEVEL.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Short Name of LEVEL.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Short Name of LEVEL.")]
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        /// <summary>
        /// <para>Name of LEVEL.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of LEVEL.")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Public code for LEVEL.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Public code for LEVEL.")]
        [System.Xml.Serialization.XmlElementAttribute("PublicCode")]
        public string PublicCode { get; set; }
        
        /// <summary>
        /// <para>Whether level is for public use.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether level is for public use.")]
        [System.Xml.Serialization.XmlElementAttribute("PublicUse")]
        public bool PublicUse { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PublicUse property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PublicUseSpecified { get; set; }
        
        /// <summary>
        /// <para>Accessibility values associated with LEVEL.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Accessibility values associated with LEVEL.")]
        [System.Xml.Serialization.XmlElementAttribute("AccessibilityAssessment")]
        public AccessibilityAssessmentStructure AccessibilityAssessment { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _allAreasWheelchairAccessible = true;
        
        /// <summary>
        /// <para>Whether all areas of the LEVEL are wheelchair accessible.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Whether all areas of the LEVEL are wheelchair accessible.")]
        [System.Xml.Serialization.XmlElementAttribute("AllAreasWheelchairAccessible")]
        public bool AllAreasWheelchairAccessible
        {
            get
            {
                return _allAreasWheelchairAccessible;
            }
            set
            {
                _allAreasWheelchairAccessible = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Elements of a SITE LEVEL.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements of a SITE LEVEL.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ILevelGroup
    {
        
        /// <summary>
        /// <para>Name of LEVEL.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of LEVEL.")]
        MultilingualString Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Short Name of LEVEL.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Short Name of LEVEL.")]
        MultilingualString ShortName
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Name of LEVEL.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of LEVEL.")]
        MultilingualString Description
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Public code for LEVEL.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Public code for LEVEL.")]
        string PublicCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether level is for public use.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether level is for public use.")]
        bool PublicUse
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Accessibility values associated with LEVEL.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Accessibility values associated with LEVEL.")]
        AccessibilityAssessmentStructure AccessibilityAssessment
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether all areas of the LEVEL are wheelchair accessible.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Whether all areas of the LEVEL are wheelchair accessible.")]
        bool AllAreasWheelchairAccessible
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LevelRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("LevelRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class LevelRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Parameters that affect the request processing. Mostly act to reduce the number of stops returned.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Parameters that affect the request processing. Mostly act to reduce the number of" +
        " stops returned.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NetworkFrameRequestPolicyStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NetworkFrameRequestPolicyStructure
    {
        
        /// <summary>
        /// <para>Maximum number of objects to include in response. If absent, include all instances.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Maximum number of objects to include in response. If absent, include all instance" +
            "s.")]
        [System.Xml.Serialization.XmlElementAttribute("MaximumNumberOfElements")]
        public string MaximumNumberOfElements { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _includeDeleted = false;
        
        /// <summary>
        /// <para>Whether to include  in response. elements flagged as deleted. By default this will be false.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Whether to include in response. elements flagged as deleted. By default this will" +
            " be false.")]
        [System.Xml.Serialization.XmlElementAttribute("IncludeDeleted")]
        public bool IncludeDeleted
        {
            get
            {
                return _includeDeleted;
            }
            set
            {
                _includeDeleted = value;
            }
        }
        
        /// <summary>
        /// <para>Allows requestor to indicate a relative urgency of request. A longer period can be specified for non urgent requests, e.g. to get  historic data. If not specified assume best possible response desired, preferably immediate.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Allows requestor to indicate a relative urgency of request. A longer period can b" +
            "e specified for non urgent requests, e.g. to get historic data. If not specified" +
            " assume best possible response desired, preferably immediate.")]
        [System.Xml.Serialization.XmlElementAttribute("Urgency")]
        public string Urgency { get; set; }
        
        /// <summary>
        /// <para>Allows requestor to indicate that if data cannot be supplied by a given time it will not be useful. Can be used to prioritize data on systems working at full load.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Allows requestor to indicate that if data cannot be supplied by a given time it w" +
            "ill not be useful. Can be used to prioritize data on systems working at full loa" +
            "d.")]
        [System.Xml.Serialization.XmlElementAttribute("MustHaveBy", DataType="dateTime")]
        public System.DateTime MustHaveBy { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MustHaveBy property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MustHaveBySpecified { get; set; }
        
        /// <summary>
        /// <para>Preferred language for text elements in response.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Preferred language for text elements in response.")]
        [System.Xml.Serialization.XmlElementAttribute("Language")]
        public string Language { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _requestDetail;
        
        /// <summary>
        /// <para>Level of detail to return. Default is all.
        ///All = Return all data and geometry, but not Xref
        ///NoGeometry = Return all, omitting geometry. 
        ///XRef - Return Xcross Reference data , e.g. links for zones.</para>
        /// <para>Detail Levels for Network Request.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Level of detail to return. Default is all. All = Return all data and geometry, bu" +
            "t not Xref NoGeometry = Return all, omitting geometry. XRef - Return Xcross Refe" +
            "rence data , e.g. links for zones.")]
        [System.Xml.Serialization.XmlElementAttribute("RequestDetail")]
        public System.Collections.ObjectModel.Collection<string> RequestDetail
        {
            get
            {
                return _requestDetail;
            }
            private set
            {
                _requestDetail = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RequestDetail collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RequestDetailSpecified
        {
            get
            {
                return (this.RequestDetail.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="NetworkFrameRequestPolicyStructure" /> class.</para>
        /// </summary>
        public NetworkFrameRequestPolicyStructure()
        {
            this._requestDetail = new System.Collections.ObjectModel.Collection<string>();
        }
    }
    
    /// <summary>
    /// <para>A group of ROUTEs which is generally known to the public by a similar name or number.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A group of ROUTEs which is generally known to the public by a similar name or num" +
        "ber.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LineStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Line", Namespace="http://www.netex.org.uk/netex")]
    public partial class LineStructure : IDataManagedObjectElementGroup, ILineGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LineStructure" /> class.</para>
        /// </summary>
        public LineStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._otherModes = new System.Collections.ObjectModel.Collection<ModeRefStructure>();
            this._documentLinks = new System.Collections.ObjectModel.Collection<InfoLinkStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TransportMode")]
        public AllVehicleModesOfTransportEnumeration TransportMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransportMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TransportModeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TransportSubmode")]
        public TransportSubmodeStructure TransportSubmode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Url")]
        public string Url { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PublicCode")]
        public string PublicCode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. Used for VDV compatibility.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Used for VDV compatibility.")]
        [System.Xml.Serialization.XmlElementAttribute("ExternalLineRef")]
        public ExternalObjectRefStructure ExternalLineRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("OperatorRef")]
        public OperatorRefStructure OperatorRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("AuthorityRef")]
        public AuthorityRefStructure AuthorityRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("additionalOperators")]
        public AdditionalOperatorsRelStructure AdditionalOperators { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ModeRefStructure> _otherModes;
        
        /// <summary>
        /// <para>Additional transport MODEs for LINE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Additional transport MODEs for LINE.")]
        [System.Xml.Serialization.XmlArrayAttribute("otherModes")]
        [System.Xml.Serialization.XmlArrayItemAttribute("ModeRef", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<ModeRefStructure> OtherModes
        {
            get
            {
                return _otherModes;
            }
            private set
            {
                _otherModes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OtherModes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OtherModesSpecified
        {
            get
            {
                return (this.OtherModes.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("TypeOfLineRef")]
        public TypeOfLineRefStructure TypeOfLineRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfServiceRef")]
        public TypeOfServiceRefStructure TypeOfServiceRef { get; set; }
        
        /// <summary>
        /// <para>Whether real-time data is normally available for LINE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether real-time data is normally available for LINE.")]
        [System.Xml.Serialization.XmlElementAttribute("Monitored")]
        public bool Monitored { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Monitored property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MonitoredSpecified { get; set; }
        
        /// <summary>
        /// <para>Not required in EPIP as data may not be available. However note that it is possible to align with SERVICE PATTERN, thus using the SCHEDULED STOP POINTs as a base for creating ROUTE POINTs, the POINTs IN JOURNEY
        ///PATTERN for POINTs ON ROUTE, and the SERVICE LINKs for ROUTE LINKs</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Not required in EPIP as data may not be available. However note that it is possible to align with SERVICE PATTERN, thus using the SCHEDULED STOP POINTs as a base for creating ROUTE POINTs, the POINTs IN JOURNEY PATTERN for POINTs ON ROUTE, and the SERVICE LINKs for ROUTE LINKs")]
        [System.Xml.Serialization.XmlElementAttribute("routes")]
        public RouteRefsRelStructure Routes { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("RepresentedByGroupRef")]
        public RepresentedByGroupRefStructure RepresentedByGroupRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Presentation")]
        public PresentationStructure Presentation { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("AccessibilityAssessment")]
        public AccessibilityAssessmentStructure AccessibilityAssessment { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("allowedDirections")]
        public AllowedDirectionsRelStructure AllowedDirections { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("noticeAssignments")]
        public NoticeAssignmentsRelStructure NoticeAssignments { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<InfoLinkStructure> _documentLinks;
        
        /// <summary>
        /// <para>Timetable documents associated with the LINE, e.g pdf files</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Timetable documents associated with the LINE, e.g pdf files")]
        [System.Xml.Serialization.XmlArrayAttribute("documentLinks")]
        [System.Xml.Serialization.XmlArrayItemAttribute("InfoLink", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<InfoLinkStructure> DocumentLinks
        {
            get
            {
                return _documentLinks;
            }
            private set
            {
                _documentLinks = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DocumentLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DocumentLinksSpecified
        {
            get
            {
                return (this.DocumentLinks.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LinkProjectionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("LinkProjection", Namespace="http://www.netex.org.uk/netex")]
    public partial class LinkProjectionStructure : IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlElementAttribute("ProjectedLinkRef")]
        public LinkRefStructure ProjectedLinkRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ProjectToLinkRef")]
        public LinkRefStructure ProjectToLinkRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LinkRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LinkRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ServicePatternRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServicePatternRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NavigationPathStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("NavigationPath", Namespace="http://www.netex.org.uk/netex")]
    public partial class NavigationPathStructure : ISiteElementPropertiesGroup, IEntityAttributeGroup
    {
        
        /// <summary>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Distance")]
        public decimal Distance { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Distance property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DistanceSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("projections")]
        public LinkProjectionsStructure Projections { get; set; }
        
        /// <summary>
        /// <para>Origin end of NAVIGATION PATH. Only needed if detailed PATH LINKs are not given.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Origin end of NAVIGATION PATH. Only needed if detailed PATH LINKs are not given.")]
        [System.Xml.Serialization.XmlElementAttribute("From")]
        public PathLinkEndStructure From { get; set; }
        
        /// <summary>
        /// <para>Destination end of NAVIGATION PATH. Only needed if detailed PATH LINKs not given.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Destination end of NAVIGATION PATH. Only needed if detailed PATH LINKs not given." +
            "")]
        [System.Xml.Serialization.XmlElementAttribute("To")]
        public PathLinkEndStructure To { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("AccessibilityAssessment")]
        public AccessibilityAssessmentStructure AccessibilityAssessment { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _accessModes;
        
        /// <summary>
        /// <para>Allowed values for List of MODES of transport applicable to timetabled public transport.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("AccessModes")]
        public System.Collections.ObjectModel.Collection<string> AccessModes
        {
            get
            {
                return _accessModes;
            }
            private set
            {
                _accessModes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AccessModes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccessModesSpecified
        {
            get
            {
                return (this.AccessModes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="NavigationPathStructure" /> class.</para>
        /// </summary>
        public NavigationPathStructure()
        {
            this._accessModes = new System.Collections.ObjectModel.Collection<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("TransferDuration")]
        public TransferDurationStructure TransferDuration { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private PublicUseEnumeration _publicUse = Netex.PublicUseEnumeration.All;
        
        /// <summary>
        /// <para>Not in EPIP. Whether the component is available for public use or is restricted.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.PublicUseEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether the component is available for public use or is restricted.")]
        [System.Xml.Serialization.XmlElementAttribute("PublicUse")]
        public PublicUseEnumeration PublicUse
        {
            get
            {
                return _publicUse;
            }
            set
            {
                _publicUse = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private CoveredEnumeration _covered = Netex.CoveredEnumeration.Indoors;
        
        /// <summary>
        /// <para>Whether the component is Indoors or outdoors. Default is Indoors.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.CoveredEnumeration.Indoors)]
        [System.ComponentModel.DescriptionAttribute("Whether the component is Indoors or outdoors. Default is Indoors.")]
        [System.Xml.Serialization.XmlElementAttribute("Covered")]
        public CoveredEnumeration Covered
        {
            get
            {
                return _covered;
            }
            set
            {
                _covered = value;
            }
        }
        
        /// <summary>
        /// <para>Whether the component is within a gated area or freely accessible without a pass or ticket.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether the component is within a gated area or freely accessible without a pass " +
            "or ticket.")]
        [System.Xml.Serialization.XmlElementAttribute("Gated")]
        public GatedEnumeration Gated { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Gated property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GatedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LightingEnumeration _lighting = Netex.LightingEnumeration.WellLit;
        
        /// <summary>
        /// <para>Whether the component is lit or not. Default is well Lit.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.LightingEnumeration.WellLit)]
        [System.ComponentModel.DescriptionAttribute("Whether the component is lit or not. Default is well Lit.")]
        [System.Xml.Serialization.XmlElementAttribute("Lighting")]
        public LightingEnumeration Lighting
        {
            get
            {
                return _lighting;
            }
            set
            {
                _lighting = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _allAreasWheelchairAccessible = true;
        
        /// <summary>
        /// <para>Not in EPIP.                           Whether all areas of the component are wheelchair accessible.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether all areas of the component are wheelchair accessible.")]
        [System.Xml.Serialization.XmlElementAttribute("AllAreasWheelchairAccessible")]
        public bool AllAreasWheelchairAccessible
        {
            get
            {
                return _allAreasWheelchairAccessible;
            }
            set
            {
                _allAreasWheelchairAccessible = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.                Total number of people that component can contain.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Total number of people that component can contain.")]
        [System.Xml.Serialization.XmlElementAttribute("PersonCapacity")]
        public string PersonCapacity { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    /// <summary>
    /// <para>Detailed properties of a SITE ELEMENT.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Detailed properties of a SITE ELEMENT.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ISiteElementPropertiesGroup
    {
        
        /// <summary>
        /// <para>Not in EPIP. Whether the component is available for public use or is restricted.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.PublicUseEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether the component is available for public use or is restricted.")]
        PublicUseEnumeration PublicUse
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether the component is Indoors or outdoors. Default is Indoors.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.CoveredEnumeration.Indoors)]
        [System.ComponentModel.DescriptionAttribute("Whether the component is Indoors or outdoors. Default is Indoors.")]
        CoveredEnumeration Covered
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether the component is within a gated area or freely accessible without a pass or ticket.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether the component is within a gated area or freely accessible without a pass " +
            "or ticket.")]
        GatedEnumeration Gated
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether the component is lit or not. Default is well Lit.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.LightingEnumeration.WellLit)]
        [System.ComponentModel.DescriptionAttribute("Whether the component is lit or not. Default is well Lit.")]
        LightingEnumeration Lighting
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.                           Whether all areas of the component are wheelchair accessible.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether all areas of the component are wheelchair accessible.")]
        bool AllAreasWheelchairAccessible
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.                Total number of people that component can contain.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Total number of people that component can contain.")]
        string PersonCapacity
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Allowed values for public use.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for public use.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PublicUseEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum PublicUseEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("all")]
        All,
        
        [System.Xml.Serialization.XmlEnumAttribute("disabledPublicOnly")]
        DisabledPublicOnly,
        
        [System.Xml.Serialization.XmlEnumAttribute("authorisedPublicOnly")]
        AuthorisedPublicOnly,
        
        [System.Xml.Serialization.XmlEnumAttribute("staffOnly")]
        StaffOnly,
        
        [System.Xml.Serialization.XmlEnumAttribute("publicOnly")]
        PublicOnly,
    }
    
    /// <summary>
    /// <para>Allowed values for covered.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for covered.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CoveredEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum CoveredEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("indoors")]
        Indoors,
        
        [System.Xml.Serialization.XmlEnumAttribute("outdoors")]
        Outdoors,
        
        [System.Xml.Serialization.XmlEnumAttribute("covered")]
        Covered,
        
        [System.Xml.Serialization.XmlEnumAttribute("mixed")]
        Mixed,
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
    }
    
    /// <summary>
    /// <para>Allowed values for gated.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for gated.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GatedEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum GatedEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("gatedArea")]
        GatedArea,
        
        [System.Xml.Serialization.XmlEnumAttribute("openArea")]
        OpenArea,
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
    }
    
    /// <summary>
    /// <para>Allowed value for Lighting.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed value for Lighting.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LightingEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum LightingEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("wellLit")]
        WellLit,
        
        [System.Xml.Serialization.XmlEnumAttribute("poorlyLit")]
        PoorlyLit,
        
        [System.Xml.Serialization.XmlEnumAttribute("unlit")]
        Unlit,
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("linkProjectionsStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LinkProjectionsStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LinkProjectionStructure> _linkProjection;
        
        [System.Xml.Serialization.XmlElementAttribute("LinkProjection")]
        public System.Collections.ObjectModel.Collection<LinkProjectionStructure> LinkProjection
        {
            get
            {
                return _linkProjection;
            }
            private set
            {
                _linkProjection = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LinkProjection collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LinkProjectionSpecified
        {
            get
            {
                return (this.LinkProjection.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LinkProjectionsStructure" /> class.</para>
        /// </summary>
        public LinkProjectionsStructure()
        {
            this._linkProjection = new System.Collections.ObjectModel.Collection<LinkProjectionStructure>();
            this._linkSequenceProjection = new System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure> _linkSequenceProjection;
        
        [System.Xml.Serialization.XmlElementAttribute("LinkSequenceProjection")]
        public System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure> LinkSequenceProjection
        {
            get
            {
                return _linkSequenceProjection;
            }
            private set
            {
                _linkSequenceProjection = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LinkSequenceProjection collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LinkSequenceProjectionSpecified
        {
            get
            {
                return (this.LinkSequenceProjection.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// <para>Type for a PATH LINK ENd.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a PATH LINK ENd.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PathLinkEndStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PathLinkEndStructure
    {
        
        /// <summary>
        /// <para>Reference to a PLACE, including QUAY, ACCESS SPACE, BOARDING POSITION or other node of a SITE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a PLACE, including QUAY, ACCESS SPACE, BOARDING POSITION or other no" +
            "de of a SITE.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("PlaceRef")]
        public PlaceRefStructure PlaceRef { get; set; }
        
        /// <summary>
        /// <para>Reference to a LEVEL on which SITE COMPONENT is found.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a LEVEL on which SITE COMPONENT is found.")]
        [System.Xml.Serialization.XmlElementAttribute("LevelRef")]
        public LevelRefStructure LevelRef { get; set; }
        
        /// <summary>
        /// <para>Reference to an ENTRANCE of a PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to an ENTRANCE of a PLACE.")]
        [System.Xml.Serialization.XmlElementAttribute("EntranceRef")]
        public EntranceRefStructure EntranceRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PlaceRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(From))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PlaceRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(To))]
    public partial class PlaceRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Network_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Network", Namespace="http://www.netex.org.uk/netex")]
    public partial class NetworkVersionStructure : IGroupOfEntitiesElementGroup, IGroupOfLinesGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="NetworkVersionStructure" /> class.</para>
        /// </summary>
        public NetworkVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._infoLinks = new System.Collections.ObjectModel.Collection<InfoLinkStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>For EPIP note that Name should be considered as mandatory when in scope of NETWORK.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("For EPIP note that Name should be considered as mandatory when in scope of NETWOR" +
            "K.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PurposeOfGroupingRef")]
        public PurposeOfGroupingRefStructure PurposeOfGroupingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<InfoLinkStructure> _infoLinks;
        
        /// <summary>
        /// <para>Not in EPIP.                      Hyperlinks associated with presentation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Hyperlinks associated with presentation.")]
        [System.Xml.Serialization.XmlArrayAttribute("infoLinks")]
        [System.Xml.Serialization.XmlArrayItemAttribute("InfoLink", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<InfoLinkStructure> InfoLinks
        {
            get
            {
                return _infoLinks;
            }
            private set
            {
                _infoLinks = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the InfoLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InfoLinksSpecified
        {
            get
            {
                return (this.InfoLinks.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>LINEs in GROUP OF LINEs</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("LINEs in GROUP OF LINEs")]
        [System.Xml.Serialization.XmlElementAttribute("members")]
        public LineRefsRelStructure Members { get; set; }
        
        /// <summary>
        /// <para>Primary LINE in GROUP OF LINEs, if relevant.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Primary LINE in GROUP OF LINEs, if relevant.")]
        [System.Xml.Serialization.XmlElementAttribute("MainLineRef")]
        public LineRefStructure MainLineRef { get; set; }
        
        /// <summary>
        /// <para>Primary Transport MODE of GROUP OF LINES.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Primary Transport MODE of GROUP OF LINES.")]
        [System.Xml.Serialization.XmlElementAttribute("TransportMode")]
        public AllVehicleModesOfTransportEnumeration TransportMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransportMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TransportModeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("OperatorRef")]
        public OperatorRefStructure OperatorRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("AuthorityRef")]
        public AuthorityRefStructure AuthorityRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("groupsOfLines")]
        public GroupsOfLinesRelStructure GroupsOfLines { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("groupsOfLines_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("groupsOfLines", Namespace="http://www.netex.org.uk/netex")]
    public partial class GroupsOfLinesRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<GroupOfLinesVersionStructure> _groupOfLines;
        
        /// <summary>
        /// <para>A grouping of LINEs which will be commonly referenced for a specific purpose.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A grouping of LINEs which will be commonly referenced for a specific purpose.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("GroupOfLines")]
        public System.Collections.ObjectModel.Collection<GroupOfLinesVersionStructure> GroupOfLines
        {
            get
            {
                return _groupOfLines;
            }
            private set
            {
                _groupOfLines = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="GroupsOfLinesRelStructure" /> class.</para>
        /// </summary>
        public GroupsOfLinesRelStructure()
        {
            this._groupOfLines = new System.Collections.ObjectModel.Collection<GroupOfLinesVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>Reference to a NETWORK.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Reference to a NETWORK.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NetworkRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("NetworkRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class NetworkRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OperatingPeriodStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("OperatingPeriod", Namespace="http://www.netex.org.uk/netex")]
    public partial class OperatingPeriodStructure : IEntityAttributeGroup
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("FromDate", DataType="dateTime")]
        public System.DateTime FromDate { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ToDate", DataType="dateTime")]
        public System.DateTime ToDate { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Operator_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Operator", Namespace="http://www.netex.org.uk/netex")]
    public partial class OperatorVersionStructure : IDataManagedObjectElementGroup, IOrganisationContentGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="OperatorVersionStructure" /> class.</para>
        /// </summary>
        public OperatorVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._organisationType = new System.Collections.ObjectModel.Collection<string>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Public code to use for ORGANISATION</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Public code to use for ORGANISATION")]
        [System.Xml.Serialization.XmlElementAttribute("PublicCode")]
        public string PublicCode { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        /// <summary>
        /// <para>Company registration number including Country prefix.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Company registration number including Country prefix.")]
        [System.Xml.Serialization.XmlElementAttribute("CompanyNumber")]
        public string CompanyNumber { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. Used for VDV compatibility.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Used for VDV compatibility.")]
        [System.Xml.Serialization.XmlElementAttribute("ExternalOperatorRef")]
        public ExternalObjectRefStructure ExternalOperatorRef { get; set; }
        
        /// <summary>
        /// <para>The name of the ORGANISATION</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The name of the ORGANISATION")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>A short name of the ORGANISATION.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A short name of the ORGANISATION.")]
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        /// <summary>
        /// <para>The legal name of the ORGANISATION, if different from Name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The legal name of the ORGANISATION, if different from Name.")]
        [System.Xml.Serialization.XmlElementAttribute("LegalName")]
        public MultilingualString LegalName { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("TradingName")]
        public MultilingualString TradingName { get; set; }
        
        /// <summary>
        /// <para>Dedicated to aliases (where AlternativeText is
        ///more focused on translations).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Dedicated to aliases (where AlternativeText is more focused on translations).")]
        [System.Xml.Serialization.XmlElementAttribute("alternativeNames")]
        public AlternativeNamesStructure AlternativeNames { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Locale")]
        public LocaleStructure Locale { get; set; }
        
        /// <summary>
        /// <para>Mandatory in EPIP. Contact details for public use.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP. Contact details for public use.")]
        [System.Xml.Serialization.XmlElementAttribute("ContactDetails")]
        public ContactDetailsStructure ContactDetails { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _organisationType;
        
        /// <summary>
        /// <para>Mandatory in EPIP. Type of ORGANISATION.</para>
        /// <para>List of Allowed values for ORGANISATION TYPE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP. Type of ORGANISATION.")]
        [System.Xml.Serialization.XmlElementAttribute("OrganisationType")]
        public System.Collections.ObjectModel.Collection<string> OrganisationType
        {
            get
            {
                return _organisationType;
            }
            private set
            {
                _organisationType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OrganisationType collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OrganisationTypeSpecified
        {
            get
            {
                return (this.OrganisationType.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("parts")]
        public OrganisationPartsRelStructure Parts { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("CountryRef")]
        public CountryRefStructure CountryRef { get; set; }
        
        /// <summary>
        /// <para>Address of OPERATOR.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Address of OPERATOR.")]
        [System.Xml.Serialization.XmlElementAttribute("Address")]
        public RestrictedPostalAddressVersionStructure Address { get; set; }
        
        /// <summary>
        /// <para>Primary MODE of OPERATOR.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Primary MODE of OPERATOR.")]
        [System.Xml.Serialization.XmlElementAttribute("PrimaryMode")]
        public VehicleModeEnumeration PrimaryMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrimaryMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrimaryModeSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("CustomerServiceContactDetails")]
        public CustomerServiceContactDetailsStructure CustomerServiceContactDetails { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("RestrictedPostalAddress_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RestrictedPostalAddressVersionStructure : IPlaceInternalGroup, IAddressGroup, IPostalAddressGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PurposeOfGroupingRef")]
        public PurposeOfGroupingRefStructure PurposeOfGroupingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("placeTypes")]
        public PlaceTypesStructure PlaceTypes { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("CountryRef")]
        public CountryRefStructure CountryRef { get; set; }
        
        /// <summary>
        /// <para>Name of Counntry, derivedable from Country Ref.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Counntry, derivedable from Country Ref.")]
        [System.Xml.Serialization.XmlElementAttribute("CountryName")]
        public MultilingualString CountryName { get; set; }
        
        /// <summary>
        /// <para>Number of house on street.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Number of house on street.")]
        [System.Xml.Serialization.XmlElementAttribute("HouseNumber")]
        public string HouseNumber { get; set; }
        
        /// <summary>
        /// <para>Name of Building.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Building.")]
        [System.Xml.Serialization.XmlElementAttribute("BuildingName")]
        public MultilingualString BuildingName { get; set; }
        
        /// <summary>
        /// <para>First line of Address.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("First line of Address.")]
        [System.Xml.Serialization.XmlElementAttribute("AddressLine1")]
        public MultilingualString AddressLine1 { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine2")]
        public MultilingualString AddressLine2 { get; set; }
        
        /// <summary>
        /// <para>Street on which building is found.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Street on which building is found.")]
        [System.Xml.Serialization.XmlElementAttribute("Street")]
        public MultilingualString Street { get; set; }
        
        /// <summary>
        /// <para>Town, City, Village or other named settlement.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Town, City, Village or other named settlement.")]
        [System.Xml.Serialization.XmlElementAttribute("Town")]
        public MultilingualString Town { get; set; }
        
        /// <summary>
        /// <para>Subarea of Town.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Subarea of Town.")]
        [System.Xml.Serialization.XmlElementAttribute("Suburb")]
        public MultilingualString Suburb { get; set; }
        
        /// <summary>
        /// <para>Postcode or Zip code of address.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Postcode or Zip code of address.")]
        [System.Xml.Serialization.XmlElementAttribute("PostCode")]
        public string PostCode { get; set; }
        
        /// <summary>
        /// <para>Post code extension.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Post code extension.")]
        [System.Xml.Serialization.XmlElementAttribute("PostCodeExtension")]
        public string PostCodeExtension { get; set; }
        
        /// <summary>
        /// <para>Postal Region.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Postal Region.")]
        [System.Xml.Serialization.XmlElementAttribute("PostalRegion")]
        public string PostalRegion { get; set; }
        
        /// <summary>
        /// <para>Province or State of Country.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Province or State of Country.")]
        [System.Xml.Serialization.XmlElementAttribute("Province")]
        public MultilingualString Province { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("RoadAddressRef")]
        public RoadAddressRefStructure RoadAddressRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Organisation_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("GeneralOrganisation", Namespace="http://www.netex.org.uk/netex")]
    public partial class OrganisationVersionStructure : IDataManagedObjectElementGroup, IOrganisationContentGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="OrganisationVersionStructure" /> class.</para>
        /// </summary>
        public OrganisationVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._organisationType = new System.Collections.ObjectModel.Collection<string>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Public code to use for ORGANISATION</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Public code to use for ORGANISATION")]
        [System.Xml.Serialization.XmlElementAttribute("PublicCode")]
        public string PublicCode { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        /// <summary>
        /// <para>Company registration number including Country prefix.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Company registration number including Country prefix.")]
        [System.Xml.Serialization.XmlElementAttribute("CompanyNumber")]
        public string CompanyNumber { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. Used for VDV compatibility.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Used for VDV compatibility.")]
        [System.Xml.Serialization.XmlElementAttribute("ExternalOperatorRef")]
        public ExternalObjectRefStructure ExternalOperatorRef { get; set; }
        
        /// <summary>
        /// <para>The name of the ORGANISATION</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The name of the ORGANISATION")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>A short name of the ORGANISATION.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A short name of the ORGANISATION.")]
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        /// <summary>
        /// <para>The legal name of the ORGANISATION, if different from Name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The legal name of the ORGANISATION, if different from Name.")]
        [System.Xml.Serialization.XmlElementAttribute("LegalName")]
        public MultilingualString LegalName { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("TradingName")]
        public MultilingualString TradingName { get; set; }
        
        /// <summary>
        /// <para>Dedicated to aliases (where AlternativeText is
        ///more focused on translations).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Dedicated to aliases (where AlternativeText is more focused on translations).")]
        [System.Xml.Serialization.XmlElementAttribute("alternativeNames")]
        public AlternativeNamesStructure AlternativeNames { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Locale")]
        public LocaleStructure Locale { get; set; }
        
        /// <summary>
        /// <para>Mandatory in EPIP. Contact details for public use.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP. Contact details for public use.")]
        [System.Xml.Serialization.XmlElementAttribute("ContactDetails")]
        public ContactDetailsStructure ContactDetails { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _organisationType;
        
        /// <summary>
        /// <para>Mandatory in EPIP. Type of ORGANISATION.</para>
        /// <para>List of Allowed values for ORGANISATION TYPE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP. Type of ORGANISATION.")]
        [System.Xml.Serialization.XmlElementAttribute("OrganisationType")]
        public System.Collections.ObjectModel.Collection<string> OrganisationType
        {
            get
            {
                return _organisationType;
            }
            private set
            {
                _organisationType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OrganisationType collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OrganisationTypeSpecified
        {
            get
            {
                return (this.OrganisationType.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("parts")]
        public OrganisationPartsRelStructure Parts { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OrganisationRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("OrganisationRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class OrganisationRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OrganisationPartRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("OrganisationPartRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class OrganisationPartRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OtherTransportModesStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OtherTransportModesStructure
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParentSiteRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ParentSiteRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ParentSiteRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParentTopographicPlaceRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ParentTopographicPlaceRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ParentTopographicPlaceRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Parking_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Parking", Namespace="http://www.netex.org.uk/netex")]
    public partial class ParkingVersionStructure : IDataManagedObjectElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ParkingVersionStructure" /> class.</para>
        /// </summary>
        public ParkingVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Centroid")]
        public CentroidStructure Centroid { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Covered")]
        public string Covered { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ParentSiteRef")]
        public ParentSiteRefStructure ParentSiteRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ParkingVehicleTypes")]
        public string ParkingVehicleTypes { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TotalCapacity")]
        public string TotalCapacity { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("RechargingAvailable")]
        public bool RechargingAvailable { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RechargingAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RechargingAvailableSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ParkingPaymentProcess")]
        public ParkingPaymentProcessStructure ParkingPaymentProcess { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParkingPaymentProcessStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ParkingPaymentProcess", Namespace="http://www.netex.org.uk/netex")]
    public partial class ParkingPaymentProcessStructure
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PassengerCapacity_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("PassengerCapacity", Namespace="http://www.netex.org.uk/netex")]
    public partial class PassengerCapacityVersionStructure : IDataManagedObjectElementGroup, IPassengerCapacityGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PassengerCapacityVersionStructure" /> class.</para>
        /// </summary>
        public PassengerCapacityVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _fareClass = "any";
        
        /// <summary>
        /// <para>Edit care class for which capacity is specifyed. Default is any, i.e. capacity is for all classes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("any")]
        [System.ComponentModel.DescriptionAttribute("Edit care class for which capacity is specifyed. Default is any, i.e. capacity is" +
            " for all classes.")]
        [System.Xml.Serialization.XmlElementAttribute("FareClass")]
        public string FareClass
        {
            get
            {
                return _fareClass;
            }
            set
            {
                _fareClass = value;
            }
        }
        
        /// <summary>
        /// <para>The total capacity of vehicles of the type.  For a requirement this is the minimum needed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The total capacity of vehicles of the type. For a requirement this is the minimum" +
            " needed.")]
        [System.Xml.Serialization.XmlElementAttribute("TotalCapacity")]
        public string TotalCapacity { get; set; }
        
        /// <summary>
        /// <para>The seating capacity of vehicles of the type. For a requirement this is the minimum needed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The seating capacity of vehicles of the type. For a requirement this is the minim" +
            "um needed.")]
        [System.Xml.Serialization.XmlElementAttribute("SeatingCapacity")]
        public string SeatingCapacity { get; set; }
        
        /// <summary>
        /// <para>The standing capacity of vehicles of the type.  For a requirement this is the minimum needed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The standing capacity of vehicles of the type. For a requirement this is the mini" +
            "mum needed.")]
        [System.Xml.Serialization.XmlElementAttribute("StandingCapacity")]
        public string StandingCapacity { get; set; }
        
        /// <summary>
        /// <para>The number of special places on vehicles of the type, e.g. seats for the disabled. For a requirement this is the minimum needed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The number of special places on vehicles of the type, e.g. seats for the disabled" +
            ". For a requirement this is the minimum needed.")]
        [System.Xml.Serialization.XmlElementAttribute("SpecialPlaceCapacity")]
        public string SpecialPlaceCapacity { get; set; }
        
        /// <summary>
        /// <para>The number of push chair places on vehicles of the type. For a requirement this is the minimum needed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The number of push chair places on vehicles of the type. For a requirement this i" +
            "s the minimum needed.")]
        [System.Xml.Serialization.XmlElementAttribute("PushchairCapacity")]
        public string PushchairCapacity { get; set; }
        
        /// <summary>
        /// <para>The number of wheelchairs places on vehicles of the type. For a requirement this is the minimum needed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The number of wheelchairs places on vehicles of the type. For a requirement this " +
            "is the minimum needed.")]
        [System.Xml.Serialization.XmlElementAttribute("WheelchairPlaceCapacity")]
        public string WheelchairPlaceCapacity { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Elements for a PASSENGER CAPACITY REQUIREMENT. relevant for passenger systems.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for a PASSENGER CAPACITY REQUIREMENT. relevant for passenger systems.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IPassengerCapacityGroup : ICapacityGroup
    {
        
        /// <summary>
        /// <para>Edit care class for which capacity is specifyed. Default is any, i.e. capacity is for all classes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("any")]
        [System.ComponentModel.DescriptionAttribute("Edit care class for which capacity is specifyed. Default is any, i.e. capacity is" +
            " for all classes.")]
        string FareClass
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Elements for a PASSENGER CAPACITY REQUIREMENT. relevant for passenger systems.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for a PASSENGER CAPACITY REQUIREMENT. relevant for passenger systems.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ICapacityGroup
    {
        
        /// <summary>
        /// <para>The total capacity of vehicles of the type.  For a requirement this is the minimum needed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The total capacity of vehicles of the type. For a requirement this is the minimum" +
            " needed.")]
        string TotalCapacity
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>The seating capacity of vehicles of the type. For a requirement this is the minimum needed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The seating capacity of vehicles of the type. For a requirement this is the minim" +
            "um needed.")]
        string SeatingCapacity
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>The standing capacity of vehicles of the type.  For a requirement this is the minimum needed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The standing capacity of vehicles of the type. For a requirement this is the mini" +
            "mum needed.")]
        string StandingCapacity
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>The number of special places on vehicles of the type, e.g. seats for the disabled. For a requirement this is the minimum needed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The number of special places on vehicles of the type, e.g. seats for the disabled" +
            ". For a requirement this is the minimum needed.")]
        string SpecialPlaceCapacity
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>The number of push chair places on vehicles of the type. For a requirement this is the minimum needed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The number of push chair places on vehicles of the type. For a requirement this i" +
            "s the minimum needed.")]
        string PushchairCapacity
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>The number of wheelchairs places on vehicles of the type. For a requirement this is the minimum needed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The number of wheelchairs places on vehicles of the type. For a requirement this " +
            "is the minimum needed.")]
        string WheelchairPlaceCapacity
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Assignment of a SCHEDULED STOP POINT to a STOP PLACE and QUAY, etc.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Assignment of a SCHEDULED STOP POINT to a STOP PLACE and QUAY, etc.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PassengerStopAssignment_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("PassengerStopAssignment", Namespace="http://www.netex.org.uk/netex")]
    public partial class PassengerStopAssignmentVersionStructure : IDataManagedObjectElementGroup, IPassengerStopAssignmentContentGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PassengerStopAssignmentVersionStructure" /> class.</para>
        /// </summary>
        public PassengerStopAssignmentVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._trainElements = new System.Collections.ObjectModel.Collection<TrainStopAssignmentVersionStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Mandatory in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("ScheduledStopPointRef")]
        public ScheduledStopPointRefStructure ScheduledStopPointRef { get; set; }
        
        /// <summary>
        /// <para>Should be mandatory according to EPIP. STOP PLACE to which SCHEDULED STOP POINT is to be  assigned.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Should be mandatory according to EPIP. STOP PLACE to which SCHEDULED STOP POINT i" +
            "s to be assigned.")]
        [System.Xml.Serialization.XmlElementAttribute("StopPlaceRef")]
        public StopPlaceRefStructure StopPlaceRef { get; set; }
        
        /// <summary>
        /// <para>QUAY to which SCHEDULED STOP POINT is to be assigned.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("QUAY to which SCHEDULED STOP POINT is to be assigned.")]
        [System.Xml.Serialization.XmlElementAttribute("QuayRef")]
        public QuayRefStructure QuayRef { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TrainStopAssignmentVersionStructure> _trainElements;
        
        /// <summary>
        /// <para>Train elements to which SCHEDULED STOP POINT is to be assigned.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Train elements to which SCHEDULED STOP POINT is to be assigned.")]
        [System.Xml.Serialization.XmlArrayAttribute("trainElements")]
        [System.Xml.Serialization.XmlArrayItemAttribute("TrainStopAssignment", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<TrainStopAssignmentVersionStructure> TrainElements
        {
            get
            {
                return _trainElements;
            }
            private set
            {
                _trainElements = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TrainElements collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TrainElementsSpecified
        {
            get
            {
                return (this.TrainElements.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
        
        /// <summary>
        /// <para>EPIP: Mandatory in StopAssignment</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("EPIP: Mandatory in StopAssignment")]
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public string Order { get; set; }
    }
    
    /// <summary>
    /// <para>A type of SITE to or through which passengers may wish to navigate as part of their journey and which is modelled in detail by journey planners.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A type of SITE to or through which passengers may wish to navigate as part of the" +
        "ir journey and which is modelled in detail by journey planners.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PointOfInterestStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("PointOfInterest", Namespace="http://www.netex.org.uk/netex")]
    public partial class PointOfInterestStructure : ISiteObjectElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PointOfInterestStructure" /> class.</para>
        /// </summary>
        public PointOfInterestStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._accessModes = new System.Collections.ObjectModel.Collection<string>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PurposeOfGroupingRef")]
        public PurposeOfGroupingRefStructure PurposeOfGroupingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("members")]
        public PlaceObjectMembers Members { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Centroid")]
        public CentroidStructure Centroid { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Polygon", Namespace="http://www.opengis.net/gml/3.2")]
        public Gml.TPolygon Polygon { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("placeTypes")]
        public PlaceTypesStructure PlaceTypes { get; set; }
        
        /// <summary>
        /// <para>Default URL for ADDRESSABLE PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default URL for ADDRESSABLE PLACE.")]
        [System.Xml.Serialization.XmlElementAttribute("Url")]
        public string Url { get; set; }
        
        /// <summary>
        /// <para>Default image for ADDRESSABLE PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default image for ADDRESSABLE PLACE.")]
        [System.Xml.Serialization.XmlElementAttribute("Image")]
        public string Image { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PostalAddress")]
        public PostalAddressVersionStructure PostalAddress { get; set; }
        
        /// <summary>
        /// <para>ADDRESS of a numbered building on a named road.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("ADDRESS of a numbered building on a named road.")]
        [System.Xml.Serialization.XmlElementAttribute("RoadAddress")]
        public RoadAddressStructure RoadAddress { get; set; }
        
        /// <summary>
        /// <para>Note: Covers only EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: Covers only EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("AccessibilityAssessment")]
        public AccessibilityAssessmentStructure AccessibilityAssessment { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _accessModes;
        
        /// <summary>
        /// <para>Copied from full schema where only single instance is allowed. This is not in line with EPIP documentation that implies one to many.</para>
        /// <para>Allowed values for List of MODES of transport applicable to timetabled public transport.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Copied from full schema where only single instance is allowed. This is not in lin" +
            "e with EPIP documentation that implies one to many.")]
        [System.Xml.Serialization.XmlElementAttribute("AccessModes")]
        public System.Collections.ObjectModel.Collection<string> AccessModes
        {
            get
            {
                return _accessModes;
            }
            private set
            {
                _accessModes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AccessModes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccessModesSpecified
        {
            get
            {
                return (this.AccessModes.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeNames")]
        public AlternativeNamesStructure AlternativeNames { get; set; }
        
        /// <summary>
        /// <para>Name of a Road that crosses the Road the street near the SITE ELEMENT that can be used to describe its relative location.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of a Road that crosses the Road the street near the SITE ELEMENT that can be" +
            " used to describe its relative location.")]
        [System.Xml.Serialization.XmlElementAttribute("CrossRoad")]
        public MultilingualString CrossRoad { get; set; }
        
        /// <summary>
        /// <para>Name of a Landmark near the SITE ELEMENT that can be used to describe its relative location.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of a Landmark near the SITE ELEMENT that can be used to describe its relativ" +
            "e location.")]
        [System.Xml.Serialization.XmlElementAttribute("Landmark")]
        public MultilingualString Landmark { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private PublicUseEnumeration _publicUse = Netex.PublicUseEnumeration.All;
        
        /// <summary>
        /// <para>Not in EPIP. Whether the component is available for public use or is restricted.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.PublicUseEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether the component is available for public use or is restricted.")]
        [System.Xml.Serialization.XmlElementAttribute("PublicUse")]
        public PublicUseEnumeration PublicUse
        {
            get
            {
                return _publicUse;
            }
            set
            {
                _publicUse = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private CoveredEnumeration _covered = Netex.CoveredEnumeration.Indoors;
        
        /// <summary>
        /// <para>Whether the component is Indoors or outdoors. Default is Indoors.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.CoveredEnumeration.Indoors)]
        [System.ComponentModel.DescriptionAttribute("Whether the component is Indoors or outdoors. Default is Indoors.")]
        [System.Xml.Serialization.XmlElementAttribute("Covered")]
        public CoveredEnumeration Covered
        {
            get
            {
                return _covered;
            }
            set
            {
                _covered = value;
            }
        }
        
        /// <summary>
        /// <para>Whether the component is within a gated area or freely accessible without a pass or ticket.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether the component is within a gated area or freely accessible without a pass " +
            "or ticket.")]
        [System.Xml.Serialization.XmlElementAttribute("Gated")]
        public GatedEnumeration Gated { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Gated property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GatedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LightingEnumeration _lighting = Netex.LightingEnumeration.WellLit;
        
        /// <summary>
        /// <para>Whether the component is lit or not. Default is well Lit.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.LightingEnumeration.WellLit)]
        [System.ComponentModel.DescriptionAttribute("Whether the component is lit or not. Default is well Lit.")]
        [System.Xml.Serialization.XmlElementAttribute("Lighting")]
        public LightingEnumeration Lighting
        {
            get
            {
                return _lighting;
            }
            set
            {
                _lighting = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _allAreasWheelchairAccessible = true;
        
        /// <summary>
        /// <para>Not in EPIP.                           Whether all areas of the component are wheelchair accessible.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether all areas of the component are wheelchair accessible.")]
        [System.Xml.Serialization.XmlElementAttribute("AllAreasWheelchairAccessible")]
        public bool AllAreasWheelchairAccessible
        {
            get
            {
                return _allAreasWheelchairAccessible;
            }
            set
            {
                _allAreasWheelchairAccessible = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.                Total number of people that component can contain.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Total number of people that component can contain.")]
        [System.Xml.Serialization.XmlElementAttribute("PersonCapacity")]
        public string PersonCapacity { get; set; }
        
        /// <summary>
        /// <para>EPIP: Limited to facilities available at STOP PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("EPIP: Limited to facilities available at STOP PLACE.")]
        [System.Xml.Serialization.XmlElementAttribute("facilities")]
        public SiteFacilitiesRelStructure Facilities { get; set; }
        
        /// <summary>
        /// <para>This is a primary Topographic place.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("This is a primary Topographic place.")]
        [System.Xml.Serialization.XmlElementAttribute("TopographicPlaceRef")]
        public TopographicPlaceRefStructure TopographicPlaceRef { get; set; }
        
        /// <summary>
        /// <para>Additional Topographic Places in which this object is located.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Additional Topographic Places in which this object is located.")]
        [System.Xml.Serialization.XmlElementAttribute("additionalTopographicPlaces")]
        public TopographicPlaceRefsRelStructure AdditionalTopographicPlaces { get; set; }
        
        /// <summary>
        /// <para>Common LOCALE dependant properties.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Common LOCALE dependant properties.")]
        [System.Xml.Serialization.XmlElementAttribute("Locale")]
        public LocaleStructure Locale { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("OrganisationRef")]
        public OrganisationRefStructure OrganisationRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("AuthorityRef")]
        public AuthorityRefStructure AuthorityRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("OperatorRef")]
        public OperatorRefStructure OperatorRef { get; set; }
        
        /// <summary>
        /// <para>EPIP: Can only be a reference to a general STOP PLACE. Used if this is a monomodal STOPPLACE that is contained in that general STOP PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("EPIP: Can only be a reference to a general STOP PLACE. Used if this is a monomoda" +
            "l STOPPLACE that is contained in that general STOP PLACE.")]
        [System.Xml.Serialization.XmlElementAttribute("ParentSiteRef")]
        public ParentSiteRefStructure ParentSiteRef { get; set; }
        
        /// <summary>
        /// <para>LEVELs found within SITE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("LEVELs found within SITE.")]
        [System.Xml.Serialization.XmlElementAttribute("levels")]
        public LevelsRelStructure Levels { get; set; }
        
        /// <summary>
        /// <para>ENTRANCEs to and within SITE</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("ENTRANCEs to and within SITE")]
        [System.Xml.Serialization.XmlElementAttribute("entrances")]
        public EntrancesStructure Entrances { get; set; }
        
        /// <summary>
        /// <para>Classification of the POINT OF INTEREST.                         
        ///Reduced to EPIP scope.            In the EPIP, only the Name attribute of the
        ///PointOfInterestClassificationView will be used for this
        ///classification. No standard classification is predefined
        ///either by NeTEx, nor by the EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Classification of the POINT OF INTEREST. Reduced to EPIP scope. In the EPIP, only" +
            " the Name attribute of the PointOfInterestClassificationView will be used for th" +
            "is classification. No standard classification is predefined either by NeTEx, nor" +
            " by the EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("classifications")]
        public PointOfInterestStructureClassifications Classifications { get; set; }
        
        /// <summary>
        /// <para>TOPOGRAPHIC PLACEs that are near to the POINT OF INTEREST or that contain it</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("TOPOGRAPHIC PLACEs that are near to the POINT OF INTEREST or that contain it")]
        [System.Xml.Serialization.XmlElementAttribute("nearTopographicPlaces")]
        public TopographicPlaceRefsRelStructure NearTopographicPlaces { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Elements for a SITE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for a SITE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ISiteObjectElementGroup : ISiteElementObjectElementGroup, IOrganisationRefGroup
    {
        
        /// <summary>
        /// <para>EPIP: Limited to facilities available at STOP PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("EPIP: Limited to facilities available at STOP PLACE.")]
        SiteFacilitiesRelStructure Facilities
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>This is a primary Topographic place.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("This is a primary Topographic place.")]
        TopographicPlaceRefStructure TopographicPlaceRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Additional Topographic Places in which this object is located.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Additional Topographic Places in which this object is located.")]
        TopographicPlaceRefsRelStructure AdditionalTopographicPlaces
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Common LOCALE dependant properties.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Common LOCALE dependant properties.")]
        LocaleStructure Locale
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>EPIP: Can only be a reference to a general STOP PLACE. Used if this is a monomodal STOPPLACE that is contained in that general STOP PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("EPIP: Can only be a reference to a general STOP PLACE. Used if this is a monomoda" +
            "l STOPPLACE that is contained in that general STOP PLACE.")]
        ParentSiteRefStructure ParentSiteRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>LEVELs found within SITE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("LEVELs found within SITE.")]
        LevelsRelStructure Levels
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>ENTRANCEs to and within SITE</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("ENTRANCEs to and within SITE")]
        EntrancesStructure Entrances
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("siteFacilities_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SiteFacilitiesRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<SiteFacilitySetVersionStructure> _siteFacilitySet;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("SiteFacilitySet")]
        public System.Collections.ObjectModel.Collection<SiteFacilitySetVersionStructure> SiteFacilitySet
        {
            get
            {
                return _siteFacilitySet;
            }
            private set
            {
                _siteFacilitySet = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="SiteFacilitiesRelStructure" /> class.</para>
        /// </summary>
        public SiteFacilitiesRelStructure()
        {
            this._siteFacilitySet = new System.Collections.ObjectModel.Collection<SiteFacilitySetVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>SITE FACILITies associated with entity.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("SITE FACILITies associated with entity.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SiteFacilitySet_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SiteFacilitySetVersionStructure : IDataManagedObjectElementGroup, ICommonFacilityGroup, ISiteFacilityGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="SiteFacilitySetVersionStructure" /> class.</para>
        /// </summary>
        public SiteFacilitySetVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._accessibilityInfoFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._assistanceFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._accessibilityToolList = new System.Collections.ObjectModel.Collection<string>();
            this._carServiceFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._cateringFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._familyFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._fareClasses = new System.Collections.ObjectModel.Collection<string>();
            this._mealFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._medicalFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._mobilityFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._nuisanceFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._passengerCommsFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._passengerInformationFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._retailFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._safetyFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._sanitaryFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._ticketingFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._ticketingServiceFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._accessFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._emergencyServiceList = new System.Collections.ObjectModel.Collection<string>();
            this._hireFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._luggageLockerFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._luggageServiceFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._moneyFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._parkingFacilityList = new System.Collections.ObjectModel.Collection<string>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _accessibilityInfoFacilityList;
        
        /// <summary>
        /// <para>List of ACCESSIBILITY INFORMATION FACILITies.</para>
        /// <para>List of values for ACCESSIBILITY INFO FACILITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of ACCESSIBILITY INFORMATION FACILITies.")]
        [System.Xml.Serialization.XmlElementAttribute("AccessibilityInfoFacilityList")]
        public System.Collections.ObjectModel.Collection<string> AccessibilityInfoFacilityList
        {
            get
            {
                return _accessibilityInfoFacilityList;
            }
            private set
            {
                _accessibilityInfoFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AccessibilityInfoFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccessibilityInfoFacilityListSpecified
        {
            get
            {
                return (this.AccessibilityInfoFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _assistanceFacilityList;
        
        /// <summary>
        /// <para>List of Couchette FACILITies.</para>
        /// <para>List of values for ASSISTANCE FACILITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of Couchette FACILITies.")]
        [System.Xml.Serialization.XmlElementAttribute("AssistanceFacilityList")]
        public System.Collections.ObjectModel.Collection<string> AssistanceFacilityList
        {
            get
            {
                return _assistanceFacilityList;
            }
            private set
            {
                _assistanceFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AssistanceFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AssistanceFacilityListSpecified
        {
            get
            {
                return (this.AssistanceFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _accessibilityToolList;
        
        /// <summary>
        /// <para>List of TYPEs of ACCESSIBILITY TOOLs.</para>
        /// <para>List of values for TYPE OF ACCESSIBILITY TOOL.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of TYPEs of ACCESSIBILITY TOOLs.")]
        [System.Xml.Serialization.XmlElementAttribute("AccessibilityToolList")]
        public System.Collections.ObjectModel.Collection<string> AccessibilityToolList
        {
            get
            {
                return _accessibilityToolList;
            }
            private set
            {
                _accessibilityToolList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AccessibilityToolList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccessibilityToolListSpecified
        {
            get
            {
                return (this.AccessibilityToolList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _carServiceFacilityList;
        
        /// <summary>
        /// <para>List of values for CAR SERVICE FACILITY.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("CarServiceFacilityList")]
        public System.Collections.ObjectModel.Collection<string> CarServiceFacilityList
        {
            get
            {
                return _carServiceFacilityList;
            }
            private set
            {
                _carServiceFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the CarServiceFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CarServiceFacilityListSpecified
        {
            get
            {
                return (this.CarServiceFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _cateringFacilityList;
        
        /// <summary>
        /// <para>List of values for CATERING FACILITies.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("CateringFacilityList")]
        public System.Collections.ObjectModel.Collection<string> CateringFacilityList
        {
            get
            {
                return _cateringFacilityList;
            }
            private set
            {
                _cateringFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the CateringFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CateringFacilityListSpecified
        {
            get
            {
                return (this.CateringFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _familyFacilityList;
        
        /// <summary>
        /// <para>List of values for FAMILY FACILITies.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("FamilyFacilityList")]
        public System.Collections.ObjectModel.Collection<string> FamilyFacilityList
        {
            get
            {
                return _familyFacilityList;
            }
            private set
            {
                _familyFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FamilyFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FamilyFacilityListSpecified
        {
            get
            {
                return (this.FamilyFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _fareClasses;
        
        /// <summary>
        /// <para>List of Fare Classes.</para>
        /// <para>List of values for FARE CLASSes.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of Fare Classes.")]
        [System.Xml.Serialization.XmlElementAttribute("FareClasses")]
        public System.Collections.ObjectModel.Collection<string> FareClasses
        {
            get
            {
                return _fareClasses;
            }
            private set
            {
                _fareClasses = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FareClasses collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FareClassesSpecified
        {
            get
            {
                return (this.FareClasses.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("GenderLimitation")]
        public GenderLimitationEnumeration GenderLimitation { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GenderLimitation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GenderLimitationSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _mealFacilityList;
        
        /// <summary>
        /// <para>List of values for MEAL FACILITY.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("MealFacilityList")]
        public System.Collections.ObjectModel.Collection<string> MealFacilityList
        {
            get
            {
                return _mealFacilityList;
            }
            private set
            {
                _mealFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MealFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MealFacilityListSpecified
        {
            get
            {
                return (this.MealFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _medicalFacilityList;
        
        /// <summary>
        /// <para>List of values for MEDICAL FACILITies.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("MedicalFacilityList")]
        public System.Collections.ObjectModel.Collection<string> MedicalFacilityList
        {
            get
            {
                return _medicalFacilityList;
            }
            private set
            {
                _medicalFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MedicalFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MedicalFacilityListSpecified
        {
            get
            {
                return (this.MedicalFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _mobilityFacilityList;
        
        /// <summary>
        /// <para>List of values for MOBILITY FACILITY.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("MobilityFacilityList")]
        public System.Collections.ObjectModel.Collection<string> MobilityFacilityList
        {
            get
            {
                return _mobilityFacilityList;
            }
            private set
            {
                _mobilityFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MobilityFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MobilityFacilityListSpecified
        {
            get
            {
                return (this.MobilityFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _nuisanceFacilityList;
        
        /// <summary>
        /// <para>List of values for NUISANCE FACILITY.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("NuisanceFacilityList")]
        public System.Collections.ObjectModel.Collection<string> NuisanceFacilityList
        {
            get
            {
                return _nuisanceFacilityList;
            }
            private set
            {
                _nuisanceFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the NuisanceFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NuisanceFacilityListSpecified
        {
            get
            {
                return (this.NuisanceFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _passengerCommsFacilityList;
        
        /// <summary>
        /// <para>List of values for PASSENGER COMMS FACILITies.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("PassengerCommsFacilityList")]
        public System.Collections.ObjectModel.Collection<string> PassengerCommsFacilityList
        {
            get
            {
                return _passengerCommsFacilityList;
            }
            private set
            {
                _passengerCommsFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PassengerCommsFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PassengerCommsFacilityListSpecified
        {
            get
            {
                return (this.PassengerCommsFacilityList.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>List of PASSENGER INFORMATION Equipments.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of PASSENGER INFORMATION Equipments.")]
        [System.Xml.Serialization.XmlElementAttribute("PassengerInformationEquipmentList")]
        public PassengerInformationEquipmentEnumeration PassengerInformationEquipmentList { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PassengerInformationEquipmentList property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PassengerInformationEquipmentListSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _passengerInformationFacilityList;
        
        /// <summary>
        /// <para>List of PASSENGER INFORMATION FACILITies.</para>
        /// <para>List of values for PASSENGER INFO FACILITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of PASSENGER INFORMATION FACILITies.")]
        [System.Xml.Serialization.XmlElementAttribute("PassengerInformationFacilityList")]
        public System.Collections.ObjectModel.Collection<string> PassengerInformationFacilityList
        {
            get
            {
                return _passengerInformationFacilityList;
            }
            private set
            {
                _passengerInformationFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PassengerInformationFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PassengerInformationFacilityListSpecified
        {
            get
            {
                return (this.PassengerInformationFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _retailFacilityList;
        
        /// <summary>
        /// <para>List of values for RETAIL FACILITies.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("RetailFacilityList")]
        public System.Collections.ObjectModel.Collection<string> RetailFacilityList
        {
            get
            {
                return _retailFacilityList;
            }
            private set
            {
                _retailFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RetailFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RetailFacilityListSpecified
        {
            get
            {
                return (this.RetailFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _safetyFacilityList;
        
        /// <summary>
        /// <para>List of values for SAFETY FACILITies.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("SafetyFacilityList")]
        public System.Collections.ObjectModel.Collection<string> SafetyFacilityList
        {
            get
            {
                return _safetyFacilityList;
            }
            private set
            {
                _safetyFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SafetyFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SafetyFacilityListSpecified
        {
            get
            {
                return (this.SafetyFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _sanitaryFacilityList;
        
        /// <summary>
        /// <para>List of Sanitary Facilities.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("SanitaryFacilityList")]
        public System.Collections.ObjectModel.Collection<string> SanitaryFacilityList
        {
            get
            {
                return _sanitaryFacilityList;
            }
            private set
            {
                _sanitaryFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SanitaryFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SanitaryFacilityListSpecified
        {
            get
            {
                return (this.SanitaryFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _ticketingFacilityList;
        
        /// <summary>
        /// <para>List of values for TICKETING FACILITies.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TicketingFacilityList")]
        public System.Collections.ObjectModel.Collection<string> TicketingFacilityList
        {
            get
            {
                return _ticketingFacilityList;
            }
            private set
            {
                _ticketingFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TicketingFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TicketingFacilityListSpecified
        {
            get
            {
                return (this.TicketingFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _ticketingServiceFacilityList;
        
        /// <summary>
        /// <para>List of Ticketing Services.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TicketingServiceFacilityList")]
        public System.Collections.ObjectModel.Collection<string> TicketingServiceFacilityList
        {
            get
            {
                return _ticketingServiceFacilityList;
            }
            private set
            {
                _ticketingServiceFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TicketingServiceFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TicketingServiceFacilityListSpecified
        {
            get
            {
                return (this.TicketingServiceFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _accessFacilityList;
        
        /// <summary>
        /// <para>List of ACCESS FACILITies. + v1.1</para>
        /// <para>List of values for SITE ACCESS FACILITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of ACCESS FACILITies. + v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("AccessFacilityList")]
        public System.Collections.ObjectModel.Collection<string> AccessFacilityList
        {
            get
            {
                return _accessFacilityList;
            }
            private set
            {
                _accessFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AccessFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccessFacilityListSpecified
        {
            get
            {
                return (this.AccessFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _emergencyServiceList;
        
        /// <summary>
        /// <para>List of EMERGENCY SERVICE FACILITies.</para>
        /// <para>List of values for EMERGENCY SERVICE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of EMERGENCY SERVICE FACILITies.")]
        [System.Xml.Serialization.XmlElementAttribute("EmergencyServiceList")]
        public System.Collections.ObjectModel.Collection<string> EmergencyServiceList
        {
            get
            {
                return _emergencyServiceList;
            }
            private set
            {
                _emergencyServiceList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the EmergencyServiceList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EmergencyServiceListSpecified
        {
            get
            {
                return (this.EmergencyServiceList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _hireFacilityList;
        
        /// <summary>
        /// <para>List of HIRE FACILITies.</para>
        /// <para>List of values for HIRE FACILITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of HIRE FACILITies.")]
        [System.Xml.Serialization.XmlElementAttribute("HireFacilityList")]
        public System.Collections.ObjectModel.Collection<string> HireFacilityList
        {
            get
            {
                return _hireFacilityList;
            }
            private set
            {
                _hireFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the HireFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HireFacilityListSpecified
        {
            get
            {
                return (this.HireFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _luggageLockerFacilityList;
        
        /// <summary>
        /// <para>List of LUGGAGE LOCKER FACILITies.</para>
        /// <para>List of values for LUGGAGE LOCKER Facility.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of LUGGAGE LOCKER FACILITies.")]
        [System.Xml.Serialization.XmlElementAttribute("LuggageLockerFacilityList")]
        public System.Collections.ObjectModel.Collection<string> LuggageLockerFacilityList
        {
            get
            {
                return _luggageLockerFacilityList;
            }
            private set
            {
                _luggageLockerFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LuggageLockerFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LuggageLockerFacilityListSpecified
        {
            get
            {
                return (this.LuggageLockerFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _luggageServiceFacilityList;
        
        /// <summary>
        /// <para>List of LUGGAGE SERVICE FACILITies.</para>
        /// <para>List of values for LUGGAGE SERVICE FACILITies.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of LUGGAGE SERVICE FACILITies.")]
        [System.Xml.Serialization.XmlElementAttribute("LuggageServiceFacilityList")]
        public System.Collections.ObjectModel.Collection<string> LuggageServiceFacilityList
        {
            get
            {
                return _luggageServiceFacilityList;
            }
            private set
            {
                _luggageServiceFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LuggageServiceFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LuggageServiceFacilityListSpecified
        {
            get
            {
                return (this.LuggageServiceFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _moneyFacilityList;
        
        /// <summary>
        /// <para>List of MONEY FACILITies.</para>
        /// <para>List of values for MONEY FACILITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of MONEY FACILITies.")]
        [System.Xml.Serialization.XmlElementAttribute("MoneyFacilityList")]
        public System.Collections.ObjectModel.Collection<string> MoneyFacilityList
        {
            get
            {
                return _moneyFacilityList;
            }
            private set
            {
                _moneyFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MoneyFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MoneyFacilityListSpecified
        {
            get
            {
                return (this.MoneyFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _parkingFacilityList;
        
        /// <summary>
        /// <para>List of PARKING FACILITies.</para>
        /// <para>List of values for PARKING FACILITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of PARKING FACILITies.")]
        [System.Xml.Serialization.XmlElementAttribute("ParkingFacilityList")]
        public System.Collections.ObjectModel.Collection<string> ParkingFacilityList
        {
            get
            {
                return _parkingFacilityList;
            }
            private set
            {
                _parkingFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ParkingFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParkingFacilityListSpecified
        {
            get
            {
                return (this.ParkingFacilityList.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Classification of STAFFING.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Classification of STAFFING.")]
        [System.Xml.Serialization.XmlElementAttribute("Staffing")]
        public StaffingEnumeration Staffing { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Staffing property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StaffingSpecified { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Facilities that apply to services and sites.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Facilities that apply to services and sites.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ICommonFacilityGroup
    {
        
        /// <summary>
        /// <para>List of ACCESSIBILITY INFORMATION FACILITies.</para>
        /// <para>List of values for ACCESSIBILITY INFO FACILITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of ACCESSIBILITY INFORMATION FACILITies.")]
        System.Collections.ObjectModel.Collection<string> AccessibilityInfoFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of Couchette FACILITies.</para>
        /// <para>List of values for ASSISTANCE FACILITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of Couchette FACILITies.")]
        System.Collections.ObjectModel.Collection<string> AssistanceFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of TYPEs of ACCESSIBILITY TOOLs.</para>
        /// <para>List of values for TYPE OF ACCESSIBILITY TOOL.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of TYPEs of ACCESSIBILITY TOOLs.")]
        System.Collections.ObjectModel.Collection<string> AccessibilityToolList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of values for CAR SERVICE FACILITY.</para>
        /// </summary>
        System.Collections.ObjectModel.Collection<string> CarServiceFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of values for CATERING FACILITies.</para>
        /// </summary>
        System.Collections.ObjectModel.Collection<string> CateringFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of values for FAMILY FACILITies.</para>
        /// </summary>
        System.Collections.ObjectModel.Collection<string> FamilyFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of Fare Classes.</para>
        /// <para>List of values for FARE CLASSes.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of Fare Classes.")]
        System.Collections.ObjectModel.Collection<string> FareClasses
        {
            get;
        }
        
        GenderLimitationEnumeration GenderLimitation
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>List of values for MEAL FACILITY.</para>
        /// </summary>
        System.Collections.ObjectModel.Collection<string> MealFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of values for MEDICAL FACILITies.</para>
        /// </summary>
        System.Collections.ObjectModel.Collection<string> MedicalFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of values for MOBILITY FACILITY.</para>
        /// </summary>
        System.Collections.ObjectModel.Collection<string> MobilityFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of values for NUISANCE FACILITY.</para>
        /// </summary>
        System.Collections.ObjectModel.Collection<string> NuisanceFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of values for PASSENGER COMMS FACILITies.</para>
        /// </summary>
        System.Collections.ObjectModel.Collection<string> PassengerCommsFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of PASSENGER INFORMATION Equipments.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of PASSENGER INFORMATION Equipments.")]
        PassengerInformationEquipmentEnumeration PassengerInformationEquipmentList
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>List of PASSENGER INFORMATION FACILITies.</para>
        /// <para>List of values for PASSENGER INFO FACILITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of PASSENGER INFORMATION FACILITies.")]
        System.Collections.ObjectModel.Collection<string> PassengerInformationFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of values for RETAIL FACILITies.</para>
        /// </summary>
        System.Collections.ObjectModel.Collection<string> RetailFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of values for SAFETY FACILITies.</para>
        /// </summary>
        System.Collections.ObjectModel.Collection<string> SafetyFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of Sanitary Facilities.</para>
        /// </summary>
        System.Collections.ObjectModel.Collection<string> SanitaryFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of values for TICKETING FACILITies.</para>
        /// </summary>
        System.Collections.ObjectModel.Collection<string> TicketingFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of Ticketing Services.</para>
        /// </summary>
        System.Collections.ObjectModel.Collection<string> TicketingServiceFacilityList
        {
            get;
        }
    }
    
    /// <summary>
    /// <para>Allowed values for Passenger Information Equipment.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Passenger Information Equipment.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PassengerInformationEquipmentEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum PassengerInformationEquipmentEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("timetablePoster")]
        TimetablePoster,
        
        [System.Xml.Serialization.XmlEnumAttribute("fareInformation")]
        FareInformation,
        
        [System.Xml.Serialization.XmlEnumAttribute("lineNetworkPlan")]
        LineNetworkPlan,
        
        [System.Xml.Serialization.XmlEnumAttribute("lineTimetable")]
        LineTimetable,
        
        [System.Xml.Serialization.XmlEnumAttribute("stopTimetable")]
        StopTimetable,
        
        [System.Xml.Serialization.XmlEnumAttribute("journeyPlanning")]
        JourneyPlanning,
        
        [System.Xml.Serialization.XmlEnumAttribute("interactiveKiosk")]
        InteractiveKiosk,
        
        [System.Xml.Serialization.XmlEnumAttribute("informationDesk")]
        InformationDesk,
        
        [System.Xml.Serialization.XmlEnumAttribute("networkStatus")]
        NetworkStatus,
        
        [System.Xml.Serialization.XmlEnumAttribute("realTimeDisruptions")]
        RealTimeDisruptions,
        
        [System.Xml.Serialization.XmlEnumAttribute("realTimeDepartures")]
        RealTimeDepartures,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Facilities that apply to SITEs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Facilities that apply to SITEs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ISiteFacilityGroup
    {
        
        /// <summary>
        /// <para>List of ACCESS FACILITies. + v1.1</para>
        /// <para>List of values for SITE ACCESS FACILITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of ACCESS FACILITies. + v1.1")]
        System.Collections.ObjectModel.Collection<string> AccessFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of EMERGENCY SERVICE FACILITies.</para>
        /// <para>List of values for EMERGENCY SERVICE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of EMERGENCY SERVICE FACILITies.")]
        System.Collections.ObjectModel.Collection<string> EmergencyServiceList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of HIRE FACILITies.</para>
        /// <para>List of values for HIRE FACILITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of HIRE FACILITies.")]
        System.Collections.ObjectModel.Collection<string> HireFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of LUGGAGE LOCKER FACILITies.</para>
        /// <para>List of values for LUGGAGE LOCKER Facility.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of LUGGAGE LOCKER FACILITies.")]
        System.Collections.ObjectModel.Collection<string> LuggageLockerFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of LUGGAGE SERVICE FACILITies.</para>
        /// <para>List of values for LUGGAGE SERVICE FACILITies.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of LUGGAGE SERVICE FACILITies.")]
        System.Collections.ObjectModel.Collection<string> LuggageServiceFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of MONEY FACILITies.</para>
        /// <para>List of values for MONEY FACILITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of MONEY FACILITies.")]
        System.Collections.ObjectModel.Collection<string> MoneyFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of PARKING FACILITies.</para>
        /// <para>List of values for PARKING FACILITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of PARKING FACILITies.")]
        System.Collections.ObjectModel.Collection<string> ParkingFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>Classification of STAFFING.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Classification of STAFFING.")]
        StaffingEnumeration Staffing
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Allowed values for Staffing.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Staffing.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("StaffingEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("Staffing", Namespace="http://www.netex.org.uk/netex")]
    public enum StaffingEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("fullTime")]
        FullTime,
        
        [System.Xml.Serialization.XmlEnumAttribute("partTime")]
        PartTime,
        
        [System.Xml.Serialization.XmlEnumAttribute("unmanned")]
        Unmanned,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("topographicPlaceRefs_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("additionalTopographicPlaces", Namespace="http://www.netex.org.uk/netex")]
    public partial class TopographicPlaceRefsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TopographicPlaceRefStructure> _topographicPlaceRef;
        
        /// <summary>
        /// <para>Reference to a TOPOGRAPHIC PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a TOPOGRAPHIC PLACE.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TopographicPlaceRef")]
        public System.Collections.ObjectModel.Collection<TopographicPlaceRefStructure> TopographicPlaceRef
        {
            get
            {
                return _topographicPlaceRef;
            }
            private set
            {
                _topographicPlaceRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TopographicPlaceRefsRelStructure" /> class.</para>
        /// </summary>
        public TopographicPlaceRefsRelStructure()
        {
            this._topographicPlaceRef = new System.Collections.ObjectModel.Collection<TopographicPlaceRefStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("levels_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("levels", Namespace="http://www.netex.org.uk/netex")]
    public partial class LevelsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Level")]
        public LevelVersionStructure Level { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("entrancesStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("entrances", Namespace="http://www.netex.org.uk/netex")]
    public partial class EntrancesStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<StopPlaceEntranceStructure> _stopPlaceEntrance;
        
        [System.Xml.Serialization.XmlElementAttribute("StopPlaceEntrance")]
        public System.Collections.ObjectModel.Collection<StopPlaceEntranceStructure> StopPlaceEntrance
        {
            get
            {
                return _stopPlaceEntrance;
            }
            private set
            {
                _stopPlaceEntrance = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the StopPlaceEntrance collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StopPlaceEntranceSpecified
        {
            get
            {
                return (this.StopPlaceEntrance.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="EntrancesStructure" /> class.</para>
        /// </summary>
        public EntrancesStructure()
        {
            this._stopPlaceEntrance = new System.Collections.ObjectModel.Collection<StopPlaceEntranceStructure>();
            this._pointOfInterestEntrance = new System.Collections.ObjectModel.Collection<PointOfInterestEntranceStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PointOfInterestEntranceStructure> _pointOfInterestEntrance;
        
        /// <summary>
        /// <para>Specialisation of ENTRANCE of ENTRANCE for a passenger to a POINT OF INTEREST.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Specialisation of ENTRANCE of ENTRANCE for a passenger to a POINT OF INTEREST.")]
        [System.Xml.Serialization.XmlElementAttribute("PointOfInterestEntrance")]
        public System.Collections.ObjectModel.Collection<PointOfInterestEntranceStructure> PointOfInterestEntrance
        {
            get
            {
                return _pointOfInterestEntrance;
            }
            private set
            {
                _pointOfInterestEntrance = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PointOfInterestEntrance collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PointOfInterestEntranceSpecified
        {
            get
            {
                return (this.PointOfInterestEntrance.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// <para>Passenger Entrance to a STOP PLACE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Passenger Entrance to a STOP PLACE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("StopPlaceEntranceStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("StopPlaceEntrance", Namespace="http://www.netex.org.uk/netex")]
    public partial class StopPlaceEntranceStructure : IRestrictedSiteComponentGroup, ISiteEntranceGroup, IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="StopPlaceEntranceStructure" /> class.</para>
        /// </summary>
        public StopPlaceEntranceStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._accessModes = new System.Collections.ObjectModel.Collection<string>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PurposeOfGroupingRef")]
        public PurposeOfGroupingRefStructure PurposeOfGroupingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Centroid")]
        public CentroidStructure Centroid { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Polygon", Namespace="http://www.opengis.net/gml/3.2")]
        public Gml.TPolygon Polygon { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("placeTypes")]
        public PlaceTypesStructure PlaceTypes { get; set; }
        
        /// <summary>
        /// <para>Default URL for ADDRESSABLE PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default URL for ADDRESSABLE PLACE.")]
        [System.Xml.Serialization.XmlElementAttribute("Url")]
        public string Url { get; set; }
        
        /// <summary>
        /// <para>Default image for ADDRESSABLE PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default image for ADDRESSABLE PLACE.")]
        [System.Xml.Serialization.XmlElementAttribute("Image")]
        public string Image { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PostalAddress")]
        public PostalAddressVersionStructure PostalAddress { get; set; }
        
        /// <summary>
        /// <para>ADDRESS of a numbered building on a named road.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("ADDRESS of a numbered building on a named road.")]
        [System.Xml.Serialization.XmlElementAttribute("RoadAddress")]
        public RoadAddressStructure RoadAddress { get; set; }
        
        /// <summary>
        /// <para>Note: Covers only EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: Covers only EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("AccessibilityAssessment")]
        public AccessibilityAssessmentStructure AccessibilityAssessment { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _accessModes;
        
        /// <summary>
        /// <para>Copied from full schema where only single instance is allowed. This is not in line with EPIP documentation that implies one to many.</para>
        /// <para>Allowed values for List of MODES of transport applicable to timetabled public transport.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Copied from full schema where only single instance is allowed. This is not in lin" +
            "e with EPIP documentation that implies one to many.")]
        [System.Xml.Serialization.XmlElementAttribute("AccessModes")]
        public System.Collections.ObjectModel.Collection<string> AccessModes
        {
            get
            {
                return _accessModes;
            }
            private set
            {
                _accessModes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AccessModes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccessModesSpecified
        {
            get
            {
                return (this.AccessModes.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeNames")]
        public AlternativeNamesStructure AlternativeNames { get; set; }
        
        /// <summary>
        /// <para>Name of a Road that crosses the Road the street near the SITE ELEMENT that can be used to describe its relative location.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of a Road that crosses the Road the street near the SITE ELEMENT that can be" +
            " used to describe its relative location.")]
        [System.Xml.Serialization.XmlElementAttribute("CrossRoad")]
        public MultilingualString CrossRoad { get; set; }
        
        /// <summary>
        /// <para>Name of a Landmark near the SITE ELEMENT that can be used to describe its relative location.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of a Landmark near the SITE ELEMENT that can be used to describe its relativ" +
            "e location.")]
        [System.Xml.Serialization.XmlElementAttribute("Landmark")]
        public MultilingualString Landmark { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private PublicUseEnumeration _publicUse = Netex.PublicUseEnumeration.All;
        
        /// <summary>
        /// <para>Not in EPIP. Whether the component is available for public use or is restricted.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.PublicUseEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether the component is available for public use or is restricted.")]
        [System.Xml.Serialization.XmlElementAttribute("PublicUse")]
        public PublicUseEnumeration PublicUse
        {
            get
            {
                return _publicUse;
            }
            set
            {
                _publicUse = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private CoveredEnumeration _covered = Netex.CoveredEnumeration.Indoors;
        
        /// <summary>
        /// <para>Whether the component is Indoors or outdoors. Default is Indoors.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.CoveredEnumeration.Indoors)]
        [System.ComponentModel.DescriptionAttribute("Whether the component is Indoors or outdoors. Default is Indoors.")]
        [System.Xml.Serialization.XmlElementAttribute("Covered")]
        public CoveredEnumeration Covered
        {
            get
            {
                return _covered;
            }
            set
            {
                _covered = value;
            }
        }
        
        /// <summary>
        /// <para>Whether the component is within a gated area or freely accessible without a pass or ticket.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether the component is within a gated area or freely accessible without a pass " +
            "or ticket.")]
        [System.Xml.Serialization.XmlElementAttribute("Gated")]
        public GatedEnumeration Gated { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Gated property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GatedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LightingEnumeration _lighting = Netex.LightingEnumeration.WellLit;
        
        /// <summary>
        /// <para>Whether the component is lit or not. Default is well Lit.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.LightingEnumeration.WellLit)]
        [System.ComponentModel.DescriptionAttribute("Whether the component is lit or not. Default is well Lit.")]
        [System.Xml.Serialization.XmlElementAttribute("Lighting")]
        public LightingEnumeration Lighting
        {
            get
            {
                return _lighting;
            }
            set
            {
                _lighting = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _allAreasWheelchairAccessible = true;
        
        /// <summary>
        /// <para>Not in EPIP.                           Whether all areas of the component are wheelchair accessible.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether all areas of the component are wheelchair accessible.")]
        [System.Xml.Serialization.XmlElementAttribute("AllAreasWheelchairAccessible")]
        public bool AllAreasWheelchairAccessible
        {
            get
            {
                return _allAreasWheelchairAccessible;
            }
            set
            {
                _allAreasWheelchairAccessible = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.                Total number of people that component can contain.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Total number of people that component can contain.")]
        [System.Xml.Serialization.XmlElementAttribute("PersonCapacity")]
        public string PersonCapacity { get; set; }
        
        /// <summary>
        /// <para>Reference to level of SITE COMPONENT within SITE</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to level of SITE COMPONENT within SITE")]
        [System.Xml.Serialization.XmlElementAttribute("LevelRef")]
        public LevelRefStructure LevelRef { get; set; }
        
        /// <summary>
        /// <para>Alternative identifier of ENTRANCE shown to Public.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Alternative identifier of ENTRANCE shown to Public.")]
        [System.Xml.Serialization.XmlElementAttribute("PublicCode")]
        public string PublicCode { get; set; }
        
        /// <summary>
        /// <para>Name of ENTRANCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of ENTRANCE.")]
        [System.Xml.Serialization.XmlElementAttribute("Label")]
        public MultilingualString Label { get; set; }
        
        /// <summary>
        /// <para>Classification of ENTRANCE. Use EQUIPMENT element to describe in further detail.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Classification of ENTRANCE. Use EQUIPMENT element to describe in further detail.")]
        [System.Xml.Serialization.XmlElementAttribute("EntranceType")]
        public EntranceEnumeration EntranceType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EntranceType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EntranceTypeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _isExternal = true;
        
        /// <summary>
        /// <para>Whether ENTRANCE is external to STOP PLACE. Default is true.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTRANCE is external to STOP PLACE. Default is true.")]
        [System.Xml.Serialization.XmlElementAttribute("IsExternal")]
        public bool IsExternal
        {
            get
            {
                return _isExternal;
            }
            set
            {
                _isExternal = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _isEntry = true;
        
        /// <summary>
        /// <para>Whether ENTRANCE can be used for entry. Default is true.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTRANCE can be used for entry. Default is true.")]
        [System.Xml.Serialization.XmlElementAttribute("IsEntry")]
        public bool IsEntry
        {
            get
            {
                return _isEntry;
            }
            set
            {
                _isEntry = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _isExit = true;
        
        /// <summary>
        /// <para>Whether ENTRANCE can be used for exit. Default is true.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTRANCE can be used for exit. Default is true.")]
        [System.Xml.Serialization.XmlElementAttribute("IsExit")]
        public bool IsExit
        {
            get
            {
                return _isExit;
            }
            set
            {
                _isExit = value;
            }
        }
        
        /// <summary>
        /// <para>Width of ENTRANCE in metres.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Width of ENTRANCE in metres.")]
        [System.Xml.Serialization.XmlElementAttribute("Width")]
        public decimal Width { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Width property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WidthSpecified { get; set; }
        
        /// <summary>
        /// <para>Height of ENTRANCE In metres.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Height of ENTRANCE In metres.")]
        [System.Xml.Serialization.XmlElementAttribute("Height")]
        public decimal Height { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Height property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HeightSpecified { get; set; }
        
        /// <summary>
        /// <para>Whether nearest crossing to ENTRANCE has dropped kerb.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether nearest crossing to ENTRANCE has dropped kerb.")]
        [System.Xml.Serialization.XmlElementAttribute("DroppedKerbOutside")]
        public bool DroppedKerbOutside { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DroppedKerbOutside property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DroppedKerbOutsideSpecified { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IRestrictedSiteComponentGroup : IRestrictedSiteElementObjectElementGroup
    {
        
        /// <summary>
        /// <para>Reference to level of SITE COMPONENT within SITE</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to level of SITE COMPONENT within SITE")]
        LevelRefStructure LevelRef
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Elements for a SITE ELEMENT.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for a SITE ELEMENT.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IRestrictedSiteElementObjectElementGroup : IRestrictedAddressablePlaceObjectElementGroup, ISiteElementInternalGroup
    {
    }
    
    /// <summary>
    /// <para>Elements for an ADDRESSABLE PLACE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for an ADDRESSABLE PLACE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IRestrictedAddressablePlaceObjectElementGroup : IRestrictedPlaceObjectElementGroup, IAddressablePlaceInternalGroup
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IRestrictedPlaceObjectElementGroup : IDataManagedObjectElementGroup, IPlaceInternalGroup, IPlaceInternal2Group
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IAddressablePlaceInternalGroup
    {
        
        /// <summary>
        /// <para>Default URL for ADDRESSABLE PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default URL for ADDRESSABLE PLACE.")]
        string Url
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Default image for ADDRESSABLE PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default image for ADDRESSABLE PLACE.")]
        string Image
        {
            get;
            set;
        }
        
        PostalAddressVersionStructure PostalAddress
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>ADDRESS of a numbered building on a named road.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("ADDRESS of a numbered building on a named road.")]
        RoadAddressStructure RoadAddress
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("RoadAddressStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("RoadAddress", Namespace="http://www.netex.org.uk/netex")]
    public partial class RoadAddressStructure : IPlaceObjectElementGroup, IAddressGroup, IRoadAddressGroup, IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="RoadAddressStructure" /> class.</para>
        /// </summary>
        public RoadAddressStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PurposeOfGroupingRef")]
        public PurposeOfGroupingRefStructure PurposeOfGroupingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("members")]
        public PlaceObjectMembers Members { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Centroid")]
        public CentroidStructure Centroid { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Polygon", Namespace="http://www.opengis.net/gml/3.2")]
        public Gml.TPolygon Polygon { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("placeTypes")]
        public PlaceTypesStructure PlaceTypes { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("CountryRef")]
        public CountryRefStructure CountryRef { get; set; }
        
        /// <summary>
        /// <para>Name of Counntry, derivedable from Country Ref.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Counntry, derivedable from Country Ref.")]
        [System.Xml.Serialization.XmlElementAttribute("CountryName")]
        public MultilingualString CountryName { get; set; }
        
        /// <summary>
        /// <para>Reference to a GIS feature identifier.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a GIS feature identifier.")]
        [System.Xml.Serialization.XmlElementAttribute("GisFeatureRef")]
        public string GisFeatureRef { get; set; }
        
        /// <summary>
        /// <para>Road Number.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Road Number.")]
        [System.Xml.Serialization.XmlElementAttribute("RoadNumber")]
        public string RoadNumber { get; set; }
        
        /// <summary>
        /// <para>Road name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Road name.")]
        [System.Xml.Serialization.XmlElementAttribute("RoadName")]
        public MultilingualString RoadName { get; set; }
        
        /// <summary>
        /// <para>Bearing of Road at point in compass octants to North.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Bearing of Road at point in compass octants to North.")]
        [System.Xml.Serialization.XmlElementAttribute("BearingCompass")]
        public CompassBearing16Enumeration BearingCompass { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BearingCompass property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BearingCompassSpecified { get; set; }
        
        /// <summary>
        /// <para>Bearing of Road in absolute degrees against North.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Bearing of Road in absolute degrees against North.")]
        [System.Xml.Serialization.XmlElementAttribute("BearingDegrees")]
        public string BearingDegrees { get; set; }
        
        /// <summary>
        /// <para>Range of odd house numbers that the ROAD ADDRESS covers.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Range of odd house numbers that the ROAD ADDRESS covers.")]
        [System.Xml.Serialization.XmlElementAttribute("OddNumberRange")]
        public RoadNumberRangeStructure OddNumberRange { get; set; }
        
        /// <summary>
        /// <para>Range of even house numbers that the ROAD ADDRESS covers.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Range of even house numbers that the ROAD ADDRESS covers.")]
        [System.Xml.Serialization.XmlElementAttribute("EvenNumberRange")]
        public RoadNumberRangeStructure EvenNumberRange { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    /// <summary>
    /// <para>Elements for a ROAD ADDRESS.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for a ROAD ADDRESS.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IRoadAddressGroup
    {
        
        /// <summary>
        /// <para>Reference to a GIS feature identifier.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a GIS feature identifier.")]
        string GisFeatureRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Road Number.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Road Number.")]
        string RoadNumber
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Road name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Road name.")]
        MultilingualString RoadName
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Bearing of Road at point in compass octants to North.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Bearing of Road at point in compass octants to North.")]
        CompassBearing16Enumeration BearingCompass
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Bearing of Road in absolute degrees against North.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Bearing of Road in absolute degrees against North.")]
        string BearingDegrees
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Range of odd house numbers that the ROAD ADDRESS covers.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Range of odd house numbers that the ROAD ADDRESS covers.")]
        RoadNumberRangeStructure OddNumberRange
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Range of even house numbers that the ROAD ADDRESS covers.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Range of even house numbers that the ROAD ADDRESS covers.")]
        RoadNumberRangeStructure EvenNumberRange
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>16 point compass.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("16 point compass.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CompassBearing16Enumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum CompassBearing16Enumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("SW")]
        Sw,
        
        [System.Xml.Serialization.XmlEnumAttribute("SE")]
        Se,
        
        [System.Xml.Serialization.XmlEnumAttribute("NW")]
        Nw,
        
        [System.Xml.Serialization.XmlEnumAttribute("NE")]
        Ne,
        
        W,
        
        E,
        
        S,
        
        N,
    }
    
    /// <summary>
    /// <para>Type for a range of numbers.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a range of numbers.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("RoadNumberRangeStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RoadNumberRangeStructure
    {
        
        [System.Xml.Serialization.XmlElementAttribute("FromNumber")]
        public string FromNumber { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ToNumber")]
        public string ToNumber { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ISiteElementInternalGroup : IRelativeLocationGroup, ISiteElementPropertiesGroup
    {
        
        /// <summary>
        /// <para>Note: Covers only EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: Covers only EPIP.")]
        AccessibilityAssessmentStructure AccessibilityAssessment
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Copied from full schema where only single instance is allowed. This is not in line with EPIP documentation that implies one to many.</para>
        /// <para>Allowed values for List of MODES of transport applicable to timetabled public transport.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Copied from full schema where only single instance is allowed. This is not in lin" +
            "e with EPIP documentation that implies one to many.")]
        System.Collections.ObjectModel.Collection<string> AccessModes
        {
            get;
        }
        
        AlternativeNamesStructure AlternativeNames
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Properties of a SITE ELEMENT with respect to adjacent features.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Properties of a SITE ELEMENT with respect to adjacent features.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IRelativeLocationGroup
    {
        
        /// <summary>
        /// <para>Name of a Road that crosses the Road the street near the SITE ELEMENT that can be used to describe its relative location.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of a Road that crosses the Road the street near the SITE ELEMENT that can be" +
            " used to describe its relative location.")]
        MultilingualString CrossRoad
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Name of a Landmark near the SITE ELEMENT that can be used to describe its relative location.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of a Landmark near the SITE ELEMENT that can be used to describe its relativ" +
            "e location.")]
        MultilingualString Landmark
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Elements of a SITE ENTRANCE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements of a SITE ENTRANCE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ISiteEntranceGroup
    {
        
        /// <summary>
        /// <para>Alternative identifier of ENTRANCE shown to Public.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Alternative identifier of ENTRANCE shown to Public.")]
        string PublicCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Name of ENTRANCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of ENTRANCE.")]
        MultilingualString Label
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Classification of ENTRANCE. Use EQUIPMENT element to describe in further detail.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Classification of ENTRANCE. Use EQUIPMENT element to describe in further detail.")]
        EntranceEnumeration EntranceType
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether ENTRANCE is external to STOP PLACE. Default is true.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTRANCE is external to STOP PLACE. Default is true.")]
        bool IsExternal
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether ENTRANCE can be used for entry. Default is true.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTRANCE can be used for entry. Default is true.")]
        bool IsEntry
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether ENTRANCE can be used for exit. Default is true.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTRANCE can be used for exit. Default is true.")]
        bool IsExit
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Width of ENTRANCE in metres.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Width of ENTRANCE in metres.")]
        decimal Width
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Height of ENTRANCE In metres.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Height of ENTRANCE In metres.")]
        decimal Height
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Allowed values for doors status.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for doors status.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("EntranceEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum EntranceEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("opening")]
        Opening,
        
        [System.Xml.Serialization.XmlEnumAttribute("openDoor")]
        OpenDoor,
        
        [System.Xml.Serialization.XmlEnumAttribute("door")]
        Door,
        
        [System.Xml.Serialization.XmlEnumAttribute("swingDoor")]
        SwingDoor,
        
        [System.Xml.Serialization.XmlEnumAttribute("revolvingDoor")]
        RevolvingDoor,
        
        [System.Xml.Serialization.XmlEnumAttribute("automaticDoor")]
        AutomaticDoor,
        
        [System.Xml.Serialization.XmlEnumAttribute("ticketBarrier")]
        TicketBarrier,
        
        [System.Xml.Serialization.XmlEnumAttribute("gate")]
        Gate,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Specialisation of ENTRANCE of ENTRANCE for a passenger to a POINT OF INTEREST.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Specialisation of ENTRANCE of ENTRANCE for a passenger to a POINT OF INTEREST.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PointOfInterestEntranceStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("PointOfInterestEntrance", Namespace="http://www.netex.org.uk/netex")]
    public partial class PointOfInterestEntranceStructure : ISiteComponentGroup, ISiteEntranceGroup, IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PointOfInterestEntranceStructure" /> class.</para>
        /// </summary>
        public PointOfInterestEntranceStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._accessModes = new System.Collections.ObjectModel.Collection<string>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PurposeOfGroupingRef")]
        public PurposeOfGroupingRefStructure PurposeOfGroupingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("members")]
        public PlaceObjectMembers Members { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Centroid")]
        public CentroidStructure Centroid { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Polygon", Namespace="http://www.opengis.net/gml/3.2")]
        public Gml.TPolygon Polygon { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("placeTypes")]
        public PlaceTypesStructure PlaceTypes { get; set; }
        
        /// <summary>
        /// <para>Default URL for ADDRESSABLE PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default URL for ADDRESSABLE PLACE.")]
        [System.Xml.Serialization.XmlElementAttribute("Url")]
        public string Url { get; set; }
        
        /// <summary>
        /// <para>Default image for ADDRESSABLE PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default image for ADDRESSABLE PLACE.")]
        [System.Xml.Serialization.XmlElementAttribute("Image")]
        public string Image { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PostalAddress")]
        public PostalAddressVersionStructure PostalAddress { get; set; }
        
        /// <summary>
        /// <para>ADDRESS of a numbered building on a named road.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("ADDRESS of a numbered building on a named road.")]
        [System.Xml.Serialization.XmlElementAttribute("RoadAddress")]
        public RoadAddressStructure RoadAddress { get; set; }
        
        /// <summary>
        /// <para>Note: Covers only EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: Covers only EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("AccessibilityAssessment")]
        public AccessibilityAssessmentStructure AccessibilityAssessment { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _accessModes;
        
        /// <summary>
        /// <para>Copied from full schema where only single instance is allowed. This is not in line with EPIP documentation that implies one to many.</para>
        /// <para>Allowed values for List of MODES of transport applicable to timetabled public transport.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Copied from full schema where only single instance is allowed. This is not in lin" +
            "e with EPIP documentation that implies one to many.")]
        [System.Xml.Serialization.XmlElementAttribute("AccessModes")]
        public System.Collections.ObjectModel.Collection<string> AccessModes
        {
            get
            {
                return _accessModes;
            }
            private set
            {
                _accessModes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AccessModes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccessModesSpecified
        {
            get
            {
                return (this.AccessModes.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeNames")]
        public AlternativeNamesStructure AlternativeNames { get; set; }
        
        /// <summary>
        /// <para>Name of a Road that crosses the Road the street near the SITE ELEMENT that can be used to describe its relative location.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of a Road that crosses the Road the street near the SITE ELEMENT that can be" +
            " used to describe its relative location.")]
        [System.Xml.Serialization.XmlElementAttribute("CrossRoad")]
        public MultilingualString CrossRoad { get; set; }
        
        /// <summary>
        /// <para>Name of a Landmark near the SITE ELEMENT that can be used to describe its relative location.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of a Landmark near the SITE ELEMENT that can be used to describe its relativ" +
            "e location.")]
        [System.Xml.Serialization.XmlElementAttribute("Landmark")]
        public MultilingualString Landmark { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private PublicUseEnumeration _publicUse = Netex.PublicUseEnumeration.All;
        
        /// <summary>
        /// <para>Not in EPIP. Whether the component is available for public use or is restricted.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.PublicUseEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether the component is available for public use or is restricted.")]
        [System.Xml.Serialization.XmlElementAttribute("PublicUse")]
        public PublicUseEnumeration PublicUse
        {
            get
            {
                return _publicUse;
            }
            set
            {
                _publicUse = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private CoveredEnumeration _covered = Netex.CoveredEnumeration.Indoors;
        
        /// <summary>
        /// <para>Whether the component is Indoors or outdoors. Default is Indoors.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.CoveredEnumeration.Indoors)]
        [System.ComponentModel.DescriptionAttribute("Whether the component is Indoors or outdoors. Default is Indoors.")]
        [System.Xml.Serialization.XmlElementAttribute("Covered")]
        public CoveredEnumeration Covered
        {
            get
            {
                return _covered;
            }
            set
            {
                _covered = value;
            }
        }
        
        /// <summary>
        /// <para>Whether the component is within a gated area or freely accessible without a pass or ticket.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether the component is within a gated area or freely accessible without a pass " +
            "or ticket.")]
        [System.Xml.Serialization.XmlElementAttribute("Gated")]
        public GatedEnumeration Gated { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Gated property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GatedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LightingEnumeration _lighting = Netex.LightingEnumeration.WellLit;
        
        /// <summary>
        /// <para>Whether the component is lit or not. Default is well Lit.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.LightingEnumeration.WellLit)]
        [System.ComponentModel.DescriptionAttribute("Whether the component is lit or not. Default is well Lit.")]
        [System.Xml.Serialization.XmlElementAttribute("Lighting")]
        public LightingEnumeration Lighting
        {
            get
            {
                return _lighting;
            }
            set
            {
                _lighting = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _allAreasWheelchairAccessible = true;
        
        /// <summary>
        /// <para>Not in EPIP.                           Whether all areas of the component are wheelchair accessible.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether all areas of the component are wheelchair accessible.")]
        [System.Xml.Serialization.XmlElementAttribute("AllAreasWheelchairAccessible")]
        public bool AllAreasWheelchairAccessible
        {
            get
            {
                return _allAreasWheelchairAccessible;
            }
            set
            {
                _allAreasWheelchairAccessible = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.                Total number of people that component can contain.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Total number of people that component can contain.")]
        [System.Xml.Serialization.XmlElementAttribute("PersonCapacity")]
        public string PersonCapacity { get; set; }
        
        /// <summary>
        /// <para>Reference to level of SITE COMPONENT within SITE</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to level of SITE COMPONENT within SITE")]
        [System.Xml.Serialization.XmlElementAttribute("LevelRef")]
        public LevelRefStructure LevelRef { get; set; }
        
        /// <summary>
        /// <para>Alternative identifier of ENTRANCE shown to Public.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Alternative identifier of ENTRANCE shown to Public.")]
        [System.Xml.Serialization.XmlElementAttribute("PublicCode")]
        public string PublicCode { get; set; }
        
        /// <summary>
        /// <para>Name of ENTRANCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of ENTRANCE.")]
        [System.Xml.Serialization.XmlElementAttribute("Label")]
        public MultilingualString Label { get; set; }
        
        /// <summary>
        /// <para>Classification of ENTRANCE. Use EQUIPMENT element to describe in further detail.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Classification of ENTRANCE. Use EQUIPMENT element to describe in further detail.")]
        [System.Xml.Serialization.XmlElementAttribute("EntranceType")]
        public EntranceEnumeration EntranceType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EntranceType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EntranceTypeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _isExternal = true;
        
        /// <summary>
        /// <para>Whether ENTRANCE is external to STOP PLACE. Default is true.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTRANCE is external to STOP PLACE. Default is true.")]
        [System.Xml.Serialization.XmlElementAttribute("IsExternal")]
        public bool IsExternal
        {
            get
            {
                return _isExternal;
            }
            set
            {
                _isExternal = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _isEntry = true;
        
        /// <summary>
        /// <para>Whether ENTRANCE can be used for entry. Default is true.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTRANCE can be used for entry. Default is true.")]
        [System.Xml.Serialization.XmlElementAttribute("IsEntry")]
        public bool IsEntry
        {
            get
            {
                return _isEntry;
            }
            set
            {
                _isEntry = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _isExit = true;
        
        /// <summary>
        /// <para>Whether ENTRANCE can be used for exit. Default is true.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTRANCE can be used for exit. Default is true.")]
        [System.Xml.Serialization.XmlElementAttribute("IsExit")]
        public bool IsExit
        {
            get
            {
                return _isExit;
            }
            set
            {
                _isExit = value;
            }
        }
        
        /// <summary>
        /// <para>Width of ENTRANCE in metres.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Width of ENTRANCE in metres.")]
        [System.Xml.Serialization.XmlElementAttribute("Width")]
        public decimal Width { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Width property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WidthSpecified { get; set; }
        
        /// <summary>
        /// <para>Height of ENTRANCE In metres.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Height of ENTRANCE In metres.")]
        [System.Xml.Serialization.XmlElementAttribute("Height")]
        public decimal Height { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Height property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HeightSpecified { get; set; }
        
        /// <summary>
        /// <para>Whether nearest crossing to ENTRANCE has dropped kerb.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether nearest crossing to ENTRANCE has dropped kerb.")]
        [System.Xml.Serialization.XmlElementAttribute("DroppedKerbOutside")]
        public bool DroppedKerbOutside { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DroppedKerbOutside property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DroppedKerbOutsideSpecified { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ISiteComponentGroup : ISiteElementObjectElementGroup
    {
        
        /// <summary>
        /// <para>Reference to level of SITE COMPONENT within SITE</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to level of SITE COMPONENT within SITE")]
        LevelRefStructure LevelRef
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Elements for a SITE ELEMENT.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for a SITE ELEMENT.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ISiteElementObjectElementGroup : IAddressablePlaceObjectElementGroup, ISiteElementInternalGroup
    {
    }
    
    /// <summary>
    /// <para>Elements for an ADDRESSABLE PLACE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for an ADDRESSABLE PLACE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IAddressablePlaceObjectElementGroup : IPlaceObjectElementGroup, IAddressablePlaceInternalGroup
    {
    }
    
    /// <summary>
    /// <para>Reference to Organisation.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Reference to Organisation.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IOrganisationRefGroup
    {
        
        OrganisationRefStructure OrganisationRef
        {
            get;
            set;
        }
        
        AuthorityRefStructure AuthorityRef
        {
            get;
            set;
        }
        
        OperatorRefStructure OperatorRef
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PointOfInterestStructureClassifications", Namespace="http://www.netex.org.uk/netex", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PointOfInterestStructureClassifications
    {
        
        /// <summary>
        /// <para>Simplified view of POINT OF INTEREST CLASSIFICATION.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Simplified view of POINT OF INTEREST CLASSIFICATION.")]
        [System.Xml.Serialization.XmlElementAttribute("PointOfInterestClassificationView")]
        public PointOfInterestStructureClassificationsPointOfInterestClassificationView PointOfInterestClassificationView { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PointOfInterestStructureClassificationsPointOfInterestClassificationView", Namespace="http://www.netex.org.uk/netex", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PointOfInterestStructureClassificationsPointOfInterestClassificationView
    {
        
        /// <summary>
        /// <para>Name of POINT OF INTEREST CLASSIFICATION.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of POINT OF INTEREST CLASSIFICATION.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PointOfInterestRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("PointOfInterestRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class PointOfInterestRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PointOnRouteStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("PointOnRoute", Namespace="http://www.netex.org.uk/netex")]
    public partial class PointOnRouteStructure : IEntityAttributeGroup
    {
        
        /// <summary>
        /// <para>Reference to a LINK SEQUENCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a LINK SEQUENCE.")]
        [System.Xml.Serialization.XmlElementAttribute("LinkSequenceRef")]
        public LinkSequenceRefStructure LinkSequenceRef { get; set; }
        
        /// <summary>
        /// <para>Reference to a ROUTE POINT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a ROUTE POINT.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("RoutePointRef")]
        public RoutePointRefStructure RoutePointRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("OnwardRouteLinkRef")]
        public RouteLinkRefStructure OnwardRouteLinkRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Mandatory in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP.")]
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public string Order { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("RoutePointRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("RoutePointRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class RoutePointRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("RouteLinkRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RouteLinkRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PublicationRequestStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublicationRequestStructure
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("RequestTimestamp", DataType="dateTime")]
        public System.DateTime RequestTimestamp { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("ParticipantRef")]
        public string ParticipantRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>One or more Request filters that specify the data to be included in output. Multiple filters are logically ANDed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("One or more Request filters that specify the data to be included in output. Multi" +
            "ple filters are logically ANDed.")]
        [System.Xml.Serialization.XmlElementAttribute("topics")]
        public PublicationRequestTopicsStructure Topics { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _version = "1.0";
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("1.0")]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PublicationRequestTopicsStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublicationRequestTopicsStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<NetworkFrameTopicStructure> _networkFrameTopic;
        
        /// <summary>
        /// <para>EPIP:  Line or Network whose data is contained in the frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("EPIP: Line or Network whose data is contained in the frame.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("NetworkFrameTopic")]
        public System.Collections.ObjectModel.Collection<NetworkFrameTopicStructure> NetworkFrameTopic
        {
            get
            {
                return _networkFrameTopic;
            }
            private set
            {
                _networkFrameTopic = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PublicationRequestTopicsStructure" /> class.</para>
        /// </summary>
        public PublicationRequestTopicsStructure()
        {
            this._networkFrameTopic = new System.Collections.ObjectModel.Collection<NetworkFrameTopicStructure>();
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("RequestPolicy")]
        public NetworkFrameRequestPolicyStructure RequestPolicy { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _version = "1.0";
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("1.0")]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    }
    
    /// <summary>
    /// <para>Type for a Data Object Filter Topic.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a Data Object Filter Topic.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NetworkFrameTopicStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("NetworkFrameTopic", Namespace="http://www.netex.org.uk/netex")]
    public partial class NetworkFrameTopicStructure : IFrameRefsGroup
    {
        
        /// <summary>
        /// <para>Mandatory in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Current")]
        public EmptyType Current { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Current property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CurrentSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<AvailabilityConditionStructure> _selectionValidityConditions;
        
        /// <summary>
        /// <para>Not part of EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not part of EPIP")]
        [System.Xml.Serialization.XmlArrayAttribute("selectionValidityConditions")]
        [System.Xml.Serialization.XmlArrayItemAttribute("AvailabilityCondition", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<AvailabilityConditionStructure> SelectionValidityConditions
        {
            get
            {
                return _selectionValidityConditions;
            }
            private set
            {
                _selectionValidityConditions = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SelectionValidityConditions collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SelectionValidityConditionsSpecified
        {
            get
            {
                return (this.SelectionValidityConditions.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="NetworkFrameTopicStructure" /> class.</para>
        /// </summary>
        public NetworkFrameTopicStructure()
        {
            this._selectionValidityConditions = new System.Collections.ObjectModel.Collection<AvailabilityConditionStructure>();
            this._resourceFrameRef = new System.Collections.ObjectModel.Collection<ResourceFrameRefStructure>();
            this._serviceCalendarFrameRef = new System.Collections.ObjectModel.Collection<ServiceCalendarFrameRefStructure>();
            this._siteFrameRef = new System.Collections.ObjectModel.Collection<SiteFrameRefStructure>();
            this._serviceFrameRef = new System.Collections.ObjectModel.Collection<ServiceFrameRefStructure>();
            this._timetableFrameRef = new System.Collections.ObjectModel.Collection<TimetableFrameRefStructure>();
            this._vehicleScheduleFrameRef = new System.Collections.ObjectModel.Collection<VehicleScheduleFrameRefStructure>();
        }
        
        /// <summary>
        /// <para>Not part of EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not part of EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfFrameRef")]
        public TypeOfFrameRefStructure TypeOfFrameRef { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ResourceFrameRefStructure> _resourceFrameRef;
        
        [System.Xml.Serialization.XmlElementAttribute("ResourceFrameRef")]
        public System.Collections.ObjectModel.Collection<ResourceFrameRefStructure> ResourceFrameRef
        {
            get
            {
                return _resourceFrameRef;
            }
            private set
            {
                _resourceFrameRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ResourceFrameRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ResourceFrameRefSpecified
        {
            get
            {
                return (this.ResourceFrameRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ServiceCalendarFrameRefStructure> _serviceCalendarFrameRef;
        
        [System.Xml.Serialization.XmlElementAttribute("ServiceCalendarFrameRef")]
        public System.Collections.ObjectModel.Collection<ServiceCalendarFrameRefStructure> ServiceCalendarFrameRef
        {
            get
            {
                return _serviceCalendarFrameRef;
            }
            private set
            {
                _serviceCalendarFrameRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ServiceCalendarFrameRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceCalendarFrameRefSpecified
        {
            get
            {
                return (this.ServiceCalendarFrameRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<SiteFrameRefStructure> _siteFrameRef;
        
        [System.Xml.Serialization.XmlElementAttribute("SiteFrameRef")]
        public System.Collections.ObjectModel.Collection<SiteFrameRefStructure> SiteFrameRef
        {
            get
            {
                return _siteFrameRef;
            }
            private set
            {
                _siteFrameRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SiteFrameRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SiteFrameRefSpecified
        {
            get
            {
                return (this.SiteFrameRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ServiceFrameRefStructure> _serviceFrameRef;
        
        [System.Xml.Serialization.XmlElementAttribute("ServiceFrameRef")]
        public System.Collections.ObjectModel.Collection<ServiceFrameRefStructure> ServiceFrameRef
        {
            get
            {
                return _serviceFrameRef;
            }
            private set
            {
                _serviceFrameRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ServiceFrameRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceFrameRefSpecified
        {
            get
            {
                return (this.ServiceFrameRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TimetableFrameRefStructure> _timetableFrameRef;
        
        [System.Xml.Serialization.XmlElementAttribute("TimetableFrameRef")]
        public System.Collections.ObjectModel.Collection<TimetableFrameRefStructure> TimetableFrameRef
        {
            get
            {
                return _timetableFrameRef;
            }
            private set
            {
                _timetableFrameRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TimetableFrameRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimetableFrameRefSpecified
        {
            get
            {
                return (this.TimetableFrameRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<VehicleScheduleFrameRefStructure> _vehicleScheduleFrameRef;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("VehicleScheduleFrameRef")]
        public System.Collections.ObjectModel.Collection<VehicleScheduleFrameRefStructure> VehicleScheduleFrameRef
        {
            get
            {
                return _vehicleScheduleFrameRef;
            }
            private set
            {
                _vehicleScheduleFrameRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the VehicleScheduleFrameRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VehicleScheduleFrameRefSpecified
        {
            get
            {
                return (this.VehicleScheduleFrameRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("NetworkFilterByValue")]
        public NetworkFilterByValueStructure NetworkFilterByValue { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IFrameRefsGroup
    {
        
        System.Collections.ObjectModel.Collection<ResourceFrameRefStructure> ResourceFrameRef
        {
            get;
        }
        
        System.Collections.ObjectModel.Collection<ServiceCalendarFrameRefStructure> ServiceCalendarFrameRef
        {
            get;
        }
        
        System.Collections.ObjectModel.Collection<SiteFrameRefStructure> SiteFrameRef
        {
            get;
        }
        
        System.Collections.ObjectModel.Collection<ServiceFrameRefStructure> ServiceFrameRef
        {
            get;
        }
        
        System.Collections.ObjectModel.Collection<TimetableFrameRefStructure> TimetableFrameRef
        {
            get;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        System.Collections.ObjectModel.Collection<VehicleScheduleFrameRefStructure> VehicleScheduleFrameRef
        {
            get;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ResourceFrameRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ResourceFrameRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ResourceFrameRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ServiceCalendarFrameRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ServiceCalendarFrameRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ServiceCalendarFrameRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SiteFrameRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("SiteFrameRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class SiteFrameRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ServiceFrameRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ServiceFrameRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ServiceFrameRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TimetableFrameRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TimetableFrameRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TimetableFrameRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("VehicleScheduleFrameRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("VehicleScheduleFrameRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class VehicleScheduleFrameRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>A type with no allowed content, used when simply the presence of an element is significant.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A type with no allowed content, used when simply the presence of an element is si" +
        "gnificant.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("EmptyType", Namespace="http://www.netex.org.uk/netex")]
    public enum EmptyType
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("")]
        Empty,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("availabilityConditions_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AvailabilityConditionsRelStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<AvailabilityConditionStructure> _availabilityCondition;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("AvailabilityCondition")]
        public System.Collections.ObjectModel.Collection<AvailabilityConditionStructure> AvailabilityCondition
        {
            get
            {
                return _availabilityCondition;
            }
            private set
            {
                _availabilityCondition = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="AvailabilityConditionsRelStructure" /> class.</para>
        /// </summary>
        public AvailabilityConditionsRelStructure()
        {
            this._availabilityCondition = new System.Collections.ObjectModel.Collection<AvailabilityConditionStructure>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TypeOfFrameRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TypeOfFrameRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TypeOfFrameRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NetworkFilterByValueStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NetworkFilterByValueStructure
    {
        
        /// <summary>
        /// <para>Specifies objects to return Use REF with specific value to identify an object.  Use REF with blank value to specify all object of the object type.  
        ///In EPIP used to state the LINE if type of
        ///CompositeFrame is for LINE_OFFER</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Specifies objects to return Use REF with specific value to identify an object. Us" +
            "e REF with blank value to specify all object of the object type. In EPIP used to" +
            " state the LINE if type of CompositeFrame is for LINE_OFFER")]
        [System.Xml.Serialization.XmlElementAttribute("objectReferences")]
        public NetworkFilterObjectReferencesStructure ObjectReferences { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("NetworkRef")]
        public NetworkRefStructure NetworkRef { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TopographicPlaceRefStructure> _places;
        
        /// <summary>
        /// <para>Return all site elements for given place. EPIP can state Topographical Place eg Country, region or area.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Return all site elements for given place. EPIP can state Topographical Place eg C" +
            "ountry, region or area.")]
        [System.Xml.Serialization.XmlArrayAttribute("places")]
        [System.Xml.Serialization.XmlArrayItemAttribute("TopographicPlaceRef", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<TopographicPlaceRefStructure> Places
        {
            get
            {
                return _places;
            }
            private set
            {
                _places = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Places collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacesSpecified
        {
            get
            {
                return (this.Places.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="NetworkFilterByValueStructure" /> class.</para>
        /// </summary>
        public NetworkFilterByValueStructure()
        {
            this._places = new System.Collections.ObjectModel.Collection<TopographicPlaceRefStructure>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NetworkFilterObjectReferencesStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NetworkFilterObjectReferencesStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LineRefStructure> _lineRef;
        
        [System.Xml.Serialization.XmlElementAttribute("LineRef")]
        public System.Collections.ObjectModel.Collection<LineRefStructure> LineRef
        {
            get
            {
                return _lineRef;
            }
            private set
            {
                _lineRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LineRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineRefSpecified
        {
            get
            {
                return (this.LineRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="NetworkFilterObjectReferencesStructure" /> class.</para>
        /// </summary>
        public NetworkFilterObjectReferencesStructure()
        {
            this._lineRef = new System.Collections.ObjectModel.Collection<LineRefStructure>();
            this._networkRef = new System.Collections.ObjectModel.Collection<NetworkRefStructure>();
            this._typeOfFrameRef = new System.Collections.ObjectModel.Collection<TypeOfFrameRefStructure>();
            this._operatorRef = new System.Collections.ObjectModel.Collection<OperatorRefStructure>();
            this._tariffZoneRef = new System.Collections.ObjectModel.Collection<TariffZoneRefStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<NetworkRefStructure> _networkRef;
        
        [System.Xml.Serialization.XmlElementAttribute("NetworkRef")]
        public System.Collections.ObjectModel.Collection<NetworkRefStructure> NetworkRef
        {
            get
            {
                return _networkRef;
            }
            private set
            {
                _networkRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the NetworkRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NetworkRefSpecified
        {
            get
            {
                return (this.NetworkRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TypeOfFrameRefStructure> _typeOfFrameRef;
        
        [System.Xml.Serialization.XmlElementAttribute("TypeOfFrameRef")]
        public System.Collections.ObjectModel.Collection<TypeOfFrameRefStructure> TypeOfFrameRef
        {
            get
            {
                return _typeOfFrameRef;
            }
            private set
            {
                _typeOfFrameRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TypeOfFrameRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeOfFrameRefSpecified
        {
            get
            {
                return (this.TypeOfFrameRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<OperatorRefStructure> _operatorRef;
        
        [System.Xml.Serialization.XmlElementAttribute("OperatorRef")]
        public System.Collections.ObjectModel.Collection<OperatorRefStructure> OperatorRef
        {
            get
            {
                return _operatorRef;
            }
            private set
            {
                _operatorRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OperatorRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OperatorRefSpecified
        {
            get
            {
                return (this.OperatorRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TariffZoneRefStructure> _tariffZoneRef;
        
        [System.Xml.Serialization.XmlElementAttribute("TariffZoneRef")]
        public System.Collections.ObjectModel.Collection<TariffZoneRefStructure> TariffZoneRef
        {
            get
            {
                return _tariffZoneRef;
            }
            private set
            {
                _tariffZoneRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TariffZoneRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TariffZoneRefSpecified
        {
            get
            {
                return (this.TariffZoneRef.Count != 0);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TariffZoneRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TariffZoneRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TariffZoneRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NetworkFilterPlacesStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NetworkFilterPlacesStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TopographicPlaceRefStructure> _topographicPlaceRef;
        
        [System.Xml.Serialization.XmlElementAttribute("TopographicPlaceRef")]
        public System.Collections.ObjectModel.Collection<TopographicPlaceRefStructure> TopographicPlaceRef
        {
            get
            {
                return _topographicPlaceRef;
            }
            private set
            {
                _topographicPlaceRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TopographicPlaceRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TopographicPlaceRefSpecified
        {
            get
            {
                return (this.TopographicPlaceRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="NetworkFilterPlacesStructure" /> class.</para>
        /// </summary>
        public NetworkFilterPlacesStructure()
        {
            this._topographicPlaceRef = new System.Collections.ObjectModel.Collection<TopographicPlaceRefStructure>();
        }
    }
    
    /// <summary>
    /// <para>A place such as platform, stance, or quayside where passengers have access to PT vehicles, Taxi
    ///cars or other means of transportation. A QUAY may contain other sub QUAYs. A child QUAY must be physically
    ///contained within its parent QUAY.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A place such as platform, stance, or quayside where passengers have access to PT " +
        "vehicles, Taxi cars or other means of transportation. A QUAY may contain other s" +
        "ub QUAYs. A child QUAY must be physically contained within its parent QUAY.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Quay_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Quay", Namespace="http://www.netex.org.uk/netex")]
    public partial class QuayVersionStructure : IStopPlaceSpaceGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="QuayVersionStructure" /> class.</para>
        /// </summary>
        public QuayVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._accessModes = new System.Collections.ObjectModel.Collection<string>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PurposeOfGroupingRef")]
        public PurposeOfGroupingRefStructure PurposeOfGroupingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("members")]
        public PlaceObjectMembers Members { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Centroid")]
        public CentroidStructure Centroid { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Polygon", Namespace="http://www.opengis.net/gml/3.2")]
        public Gml.TPolygon Polygon { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("placeTypes")]
        public PlaceTypesStructure PlaceTypes { get; set; }
        
        /// <summary>
        /// <para>Default URL for ADDRESSABLE PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default URL for ADDRESSABLE PLACE.")]
        [System.Xml.Serialization.XmlElementAttribute("Url")]
        public string Url { get; set; }
        
        /// <summary>
        /// <para>Default image for ADDRESSABLE PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default image for ADDRESSABLE PLACE.")]
        [System.Xml.Serialization.XmlElementAttribute("Image")]
        public string Image { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PostalAddress")]
        public PostalAddressVersionStructure PostalAddress { get; set; }
        
        /// <summary>
        /// <para>ADDRESS of a numbered building on a named road.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("ADDRESS of a numbered building on a named road.")]
        [System.Xml.Serialization.XmlElementAttribute("RoadAddress")]
        public RoadAddressStructure RoadAddress { get; set; }
        
        /// <summary>
        /// <para>Note: Covers only EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: Covers only EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("AccessibilityAssessment")]
        public AccessibilityAssessmentStructure AccessibilityAssessment { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _accessModes;
        
        /// <summary>
        /// <para>Copied from full schema where only single instance is allowed. This is not in line with EPIP documentation that implies one to many.</para>
        /// <para>Allowed values for List of MODES of transport applicable to timetabled public transport.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Copied from full schema where only single instance is allowed. This is not in lin" +
            "e with EPIP documentation that implies one to many.")]
        [System.Xml.Serialization.XmlElementAttribute("AccessModes")]
        public System.Collections.ObjectModel.Collection<string> AccessModes
        {
            get
            {
                return _accessModes;
            }
            private set
            {
                _accessModes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AccessModes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccessModesSpecified
        {
            get
            {
                return (this.AccessModes.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeNames")]
        public AlternativeNamesStructure AlternativeNames { get; set; }
        
        /// <summary>
        /// <para>Name of a Road that crosses the Road the street near the SITE ELEMENT that can be used to describe its relative location.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of a Road that crosses the Road the street near the SITE ELEMENT that can be" +
            " used to describe its relative location.")]
        [System.Xml.Serialization.XmlElementAttribute("CrossRoad")]
        public MultilingualString CrossRoad { get; set; }
        
        /// <summary>
        /// <para>Name of a Landmark near the SITE ELEMENT that can be used to describe its relative location.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of a Landmark near the SITE ELEMENT that can be used to describe its relativ" +
            "e location.")]
        [System.Xml.Serialization.XmlElementAttribute("Landmark")]
        public MultilingualString Landmark { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private PublicUseEnumeration _publicUse = Netex.PublicUseEnumeration.All;
        
        /// <summary>
        /// <para>Not in EPIP. Whether the component is available for public use or is restricted.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.PublicUseEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether the component is available for public use or is restricted.")]
        [System.Xml.Serialization.XmlElementAttribute("PublicUse")]
        public PublicUseEnumeration PublicUse
        {
            get
            {
                return _publicUse;
            }
            set
            {
                _publicUse = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private CoveredEnumeration _covered = Netex.CoveredEnumeration.Indoors;
        
        /// <summary>
        /// <para>Whether the component is Indoors or outdoors. Default is Indoors.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.CoveredEnumeration.Indoors)]
        [System.ComponentModel.DescriptionAttribute("Whether the component is Indoors or outdoors. Default is Indoors.")]
        [System.Xml.Serialization.XmlElementAttribute("Covered")]
        public CoveredEnumeration Covered
        {
            get
            {
                return _covered;
            }
            set
            {
                _covered = value;
            }
        }
        
        /// <summary>
        /// <para>Whether the component is within a gated area or freely accessible without a pass or ticket.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether the component is within a gated area or freely accessible without a pass " +
            "or ticket.")]
        [System.Xml.Serialization.XmlElementAttribute("Gated")]
        public GatedEnumeration Gated { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Gated property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GatedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LightingEnumeration _lighting = Netex.LightingEnumeration.WellLit;
        
        /// <summary>
        /// <para>Whether the component is lit or not. Default is well Lit.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.LightingEnumeration.WellLit)]
        [System.ComponentModel.DescriptionAttribute("Whether the component is lit or not. Default is well Lit.")]
        [System.Xml.Serialization.XmlElementAttribute("Lighting")]
        public LightingEnumeration Lighting
        {
            get
            {
                return _lighting;
            }
            set
            {
                _lighting = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _allAreasWheelchairAccessible = true;
        
        /// <summary>
        /// <para>Not in EPIP.                           Whether all areas of the component are wheelchair accessible.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether all areas of the component are wheelchair accessible.")]
        [System.Xml.Serialization.XmlElementAttribute("AllAreasWheelchairAccessible")]
        public bool AllAreasWheelchairAccessible
        {
            get
            {
                return _allAreasWheelchairAccessible;
            }
            set
            {
                _allAreasWheelchairAccessible = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.                Total number of people that component can contain.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Total number of people that component can contain.")]
        [System.Xml.Serialization.XmlElementAttribute("PersonCapacity")]
        public string PersonCapacity { get; set; }
        
        /// <summary>
        /// <para>Reference to level of SITE COMPONENT within SITE</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to level of SITE COMPONENT within SITE")]
        [System.Xml.Serialization.XmlElementAttribute("LevelRef")]
        public LevelRefStructure LevelRef { get; set; }
        
        /// <summary>
        /// <para>Label of STOP PLACE SPACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Label of STOP PLACE SPACE.")]
        [System.Xml.Serialization.XmlElementAttribute("Label")]
        public string Label { get; set; }
        
        /// <summary>
        /// <para>Pubic identifier code of QUAY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Pubic identifier code of QUAY.")]
        [System.Xml.Serialization.XmlElementAttribute("PublicCode")]
        public string PublicCode { get; set; }
        
        /// <summary>
        /// <para>Plate number for QUAY. An arbitrary asset number that may be placed on stop to identify it.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Plate number for QUAY. An arbitrary asset number that may be placed on stop to id" +
            "entify it.")]
        [System.Xml.Serialization.XmlElementAttribute("PlateCode")]
        public string PlateCode { get; set; }
        
        /// <summary>
        /// <para>Heading of QUAY relative to street.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Heading of QUAY relative to street.")]
        [System.Xml.Serialization.XmlElementAttribute("CompassBearing")]
        public float CompassBearing { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CompassBearing property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CompassBearingSpecified { get; set; }
        
        /// <summary>
        /// <para>Type of QUAY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type of QUAY.")]
        [System.Xml.Serialization.XmlElementAttribute("QuayType")]
        public QuayTypeEnumeration QuayType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the QuayType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool QuayTypeSpecified { get; set; }
        
        /// <summary>
        /// <para>if QUAY is a subzone of another QUAY, identifies parent.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("if QUAY is a subzone of another QUAY, identifies parent.")]
        [System.Xml.Serialization.XmlElementAttribute("ParentQuayRef")]
        public QuayRefStructure ParentQuayRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IStopPlaceSpaceGroup : ISiteComponentGroup
    {
        
        /// <summary>
        /// <para>Label of STOP PLACE SPACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Label of STOP PLACE SPACE.")]
        string Label
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Allowed values for QUAY Component Types.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for QUAY Component Types.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("QuayTypeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("QuayType", Namespace="http://www.netex.org.uk/netex")]
    public enum QuayTypeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("airlineGate")]
        AirlineGate,
        
        [System.Xml.Serialization.XmlEnumAttribute("railPlatform")]
        RailPlatform,
        
        [System.Xml.Serialization.XmlEnumAttribute("metroPlatform")]
        MetroPlatform,
        
        [System.Xml.Serialization.XmlEnumAttribute("coachStop")]
        CoachStop,
        
        [System.Xml.Serialization.XmlEnumAttribute("busStop")]
        BusStop,
        
        [System.Xml.Serialization.XmlEnumAttribute("busPlatform")]
        BusPlatform,
        
        [System.Xml.Serialization.XmlEnumAttribute("busBay")]
        BusBay,
        
        [System.Xml.Serialization.XmlEnumAttribute("tramPlatform")]
        TramPlatform,
        
        [System.Xml.Serialization.XmlEnumAttribute("tramStop")]
        TramStop,
        
        [System.Xml.Serialization.XmlEnumAttribute("boatQuay")]
        BoatQuay,
        
        [System.Xml.Serialization.XmlEnumAttribute("ferryLanding")]
        FerryLanding,
        
        [System.Xml.Serialization.XmlEnumAttribute("telecabinePlatform")]
        TelecabinePlatform,
        
        [System.Xml.Serialization.XmlEnumAttribute("taxiStand")]
        TaxiStand,
        
        [System.Xml.Serialization.XmlEnumAttribute("setDownPlace")]
        SetDownPlace,
        
        [System.Xml.Serialization.XmlEnumAttribute("vehicleLoadingPlace")]
        VehicleLoadingPlace,
        
        [System.Xml.Serialization.XmlEnumAttribute("multimodal")]
        Multimodal,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>A coherent set of reference values for TYPE OF VALUEs , ORGANISATIONs, VEHICLE TYPEs etc that have a common validity, as specified by a set of frame VALIDITY CONDITIONs. Used to define common resources that will be referenced by other types of FRAME.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A coherent set of reference values for TYPE OF VALUEs , ORGANISATIONs, VEHICLE TY" +
        "PEs etc that have a common validity, as specified by a set of frame VALIDITY CON" +
        "DITIONs. Used to define common resources that will be referenced by other types " +
        "of FRAME.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ResourceFrame_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ResourceFrame", Namespace="http://www.netex.org.uk/netex")]
    public partial class ResourceFrameVersionStructure : IVersionFrameGroup, IDataManagedObjectAttributeGroup
    {
        
        /// <summary>
        /// <para>Main construction in EPIP to express validity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Main construction in EPIP to express validity.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public ValidBetweenVersionStructure ValidBetween { get; set; }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject, however EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject, however EPIP restricts use of VALIDITY CONDITIONs to just a simple na" +
            "me.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        /// <summary>
        /// <para>Name of VERSION FRAME.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of VERSION FRAME.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Description of VERSION FRAME contents.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of VERSION FRAME contents.")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Reference to a TYPE OF VERSION FRAME.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a TYPE OF VERSION FRAME.")]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfFrameRef")]
        public TypeOfFrameRefStructure TypeOfFrameRef { get; set; }
        
        /// <summary>
        /// <para>Previous baseline VERSION FRAME that objects in this VERSION require.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Previous baseline VERSION FRAME that objects in this VERSION require.")]
        [System.Xml.Serialization.XmlElementAttribute("BaselineVersionFrameRef")]
        public BaselineVersionFrameRefStructure BaselineVersionFrameRef { get; set; }
        
        /// <summary>
        /// <para>CODE SPACES used in this frame. Normally there will be at least one.  A default may be specified in the Frame defaults.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("CODE SPACES used in this frame. Normally there will be at least one. A default ma" +
            "y be specified in the Frame defaults.")]
        [System.Xml.Serialization.XmlElementAttribute("codespaces")]
        public CodespacesRelStructure Codespaces { get; set; }
        
        /// <summary>
        /// <para>Set of default values to assume for values in the
        ///frame if not explicitly stated on individual
        ///elements.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Set of default values to assume for values in the frame if not explicitly stated " +
            "on individual elements.")]
        [System.Xml.Serialization.XmlElementAttribute("FrameDefaults")]
        public FrameDefaultsStructure FrameDefaults { get; set; }
        
        /// <summary>
        /// <para>Not part of EPIP. Formal definitions of VERSIONs included in frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not part of EPIP. Formal definitions of VERSIONs included in frame.")]
        [System.Xml.Serialization.XmlElementAttribute("versions")]
        public VersionsRelStructure Versions { get; set; }
        
        /// <summary>
        /// <para>Prerequisite VERSION FRAMEs containing elements  that this frame depends on.  +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Prerequisite VERSION FRAMEs containing elements that this frame depends on. +v1.1" +
            "")]
        [System.Xml.Serialization.XmlElementAttribute("prerequisites")]
        public PrerequisitesRelStructure Prerequisites { get; set; }
        
        /// <summary>
        /// <para>Shared VALIDITY CONDITIONs used by elements
        ///in the FRAME. Note, this is NOT the "dominant" FRAME validity condition!</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Shared VALIDITY CONDITIONs used by elements in the FRAME. Note, this is NOT the \"" +
            "dominant\" FRAME validity condition!")]
        [System.Xml.Serialization.XmlElementAttribute("contentValidityConditions")]
        public ContentValidityConditionsRelStructure ContentValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("dataSources")]
        public DataSourcesRelStructure DataSources { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("responsibilitySets")]
        public ResponsibilitySetsRelStructure ResponsibilitySets { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("typesOfValue")]
        public TypesOfValueRelStructure TypesOfValue { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("organisations")]
        public OrganisationsStructure Organisations { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("operationalContexts")]
        public OperationalContextsRelStructure OperationalContexts { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("equipments")]
        public EquipmentsRelStructure Equipments { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("vehicleTypes")]
        public VehicleTypesStructure VehicleTypes { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Common elements of a VERSION FRAME.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Common elements of a VERSION FRAME.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IVersionFrameGroup
    {
        
        /// <summary>
        /// <para>Main construction in EPIP to express validity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Main construction in EPIP to express validity.")]
        ValidBetweenVersionStructure ValidBetween
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject, however EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject, however EPIP restricts use of VALIDITY CONDITIONs to just a simple na" +
            "me.")]
        ValidityConditionsStructure ValidityConditions
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Name of VERSION FRAME.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of VERSION FRAME.")]
        MultilingualString Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Description of VERSION FRAME contents.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of VERSION FRAME contents.")]
        MultilingualString Description
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Reference to a TYPE OF VERSION FRAME.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a TYPE OF VERSION FRAME.")]
        TypeOfFrameRefStructure TypeOfFrameRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Previous baseline VERSION FRAME that objects in this VERSION require.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Previous baseline VERSION FRAME that objects in this VERSION require.")]
        BaselineVersionFrameRefStructure BaselineVersionFrameRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>CODE SPACES used in this frame. Normally there will be at least one.  A default may be specified in the Frame defaults.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("CODE SPACES used in this frame. Normally there will be at least one. A default ma" +
            "y be specified in the Frame defaults.")]
        CodespacesRelStructure Codespaces
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Set of default values to assume for values in the
        ///frame if not explicitly stated on individual
        ///elements.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Set of default values to assume for values in the frame if not explicitly stated " +
            "on individual elements.")]
        FrameDefaultsStructure FrameDefaults
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not part of EPIP. Formal definitions of VERSIONs included in frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not part of EPIP. Formal definitions of VERSIONs included in frame.")]
        VersionsRelStructure Versions
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Prerequisite VERSION FRAMEs containing elements  that this frame depends on.  +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Prerequisite VERSION FRAMEs containing elements that this frame depends on. +v1.1" +
            "")]
        PrerequisitesRelStructure Prerequisites
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Shared VALIDITY CONDITIONs used by elements
        ///in the FRAME. Note, this is NOT the "dominant" FRAME validity condition!</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Shared VALIDITY CONDITIONs used by elements in the FRAME. Note, this is NOT the \"" +
            "dominant\" FRAME validity condition!")]
        ContentValidityConditionsRelStructure ContentValidityConditions
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("codespaces_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("codespaces", Namespace="http://www.netex.org.uk/netex")]
    public partial class CodespacesRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<CodespaceStructure> _codespace;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Codespace")]
        public System.Collections.ObjectModel.Collection<CodespaceStructure> Codespace
        {
            get
            {
                return _codespace;
            }
            private set
            {
                _codespace = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CodespacesRelStructure" /> class.</para>
        /// </summary>
        public CodespacesRelStructure()
        {
            this._codespace = new System.Collections.ObjectModel.Collection<CodespaceStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>Type for containment of a VERSION.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for containment of a VERSION.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("versions_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("versions", Namespace="http://www.netex.org.uk/netex")]
    public partial class VersionsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<VersionRefStructure> _versionRef;
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("VersionRef")]
        public System.Collections.ObjectModel.Collection<VersionRefStructure> VersionRef
        {
            get
            {
                return _versionRef;
            }
            private set
            {
                _versionRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the VersionRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VersionRefSpecified
        {
            get
            {
                return (this.VersionRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="VersionsRelStructure" /> class.</para>
        /// </summary>
        public VersionsRelStructure()
        {
            this._versionRef = new System.Collections.ObjectModel.Collection<VersionRefStructure>();
            this._version = new System.Collections.ObjectModel.Collection<VersionVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<VersionVersionStructure> _version;
        
        /// <summary>
        /// <para>A group of operational data instances which share the same VALIDITY CONDITIONs. A VERSION belongs to a unique VERSION FRAME and is characterized by a unique TYPE OF VERSION. E.g.  NETWORK VERSION for Line 12 starting from 2000-01-01.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A group of operational data instances which share the same VALIDITY CONDITIONs. A" +
            " VERSION belongs to a unique VERSION FRAME and is characterized by a unique TYPE" +
            " OF VERSION. E.g. NETWORK VERSION for Line 12 starting from 2000-01-01.")]
        [System.Xml.Serialization.XmlElementAttribute("Version")]
        public System.Collections.ObjectModel.Collection<VersionVersionStructure> Version
        {
            get
            {
                return _version;
            }
            private set
            {
                _version = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Version collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VersionSpecified
        {
            get
            {
                return (this.Version.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>Reference to a VERSION.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Reference to a VERSION.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("VersionRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("VersionRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class VersionRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Version_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Version", Namespace="http://www.netex.org.uk/netex")]
    public partial class VersionVersionStructure : IDataManagedObjectElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="VersionVersionStructure" /> class.</para>
        /// </summary>
        public VersionVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Date of start of VERSION currency.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date of start of VERSION currency.")]
        [System.Xml.Serialization.XmlElementAttribute("StartDate", DataType="dateTime")]
        public System.DateTime StartDate { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StartDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StartDateSpecified { get; set; }
        
        /// <summary>
        /// <para>Date of end of VERSION currency. Date is INCLUSIVE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date of end of VERSION currency. Date is INCLUSIVE.")]
        [System.Xml.Serialization.XmlElementAttribute("EndDate", DataType="dateTime")]
        public System.DateTime EndDate { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EndDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EndDateSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>VERSION type: Point or Baseline.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("VERSION type: Point or Baseline.")]
        [System.Xml.Serialization.XmlElementAttribute("VersionType")]
        public VersionTypeEnumeration VersionType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VersionType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VersionTypeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Allowed values for Types of VERSION.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Types of VERSION.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("VersionTypeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("VersionType", Namespace="http://www.netex.org.uk/netex")]
    public enum VersionTypeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("point")]
        Point,
        
        [System.Xml.Serialization.XmlEnumAttribute("baseline")]
        Baseline,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("prerequisites_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("prerequisites", Namespace="http://www.netex.org.uk/netex")]
    public partial class PrerequisitesRelStructure : IFrameRefsGroup, IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ResourceFrameRefStructure> _resourceFrameRef;
        
        [System.Xml.Serialization.XmlElementAttribute("ResourceFrameRef")]
        public System.Collections.ObjectModel.Collection<ResourceFrameRefStructure> ResourceFrameRef
        {
            get
            {
                return _resourceFrameRef;
            }
            private set
            {
                _resourceFrameRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ResourceFrameRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ResourceFrameRefSpecified
        {
            get
            {
                return (this.ResourceFrameRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PrerequisitesRelStructure" /> class.</para>
        /// </summary>
        public PrerequisitesRelStructure()
        {
            this._resourceFrameRef = new System.Collections.ObjectModel.Collection<ResourceFrameRefStructure>();
            this._serviceCalendarFrameRef = new System.Collections.ObjectModel.Collection<ServiceCalendarFrameRefStructure>();
            this._siteFrameRef = new System.Collections.ObjectModel.Collection<SiteFrameRefStructure>();
            this._serviceFrameRef = new System.Collections.ObjectModel.Collection<ServiceFrameRefStructure>();
            this._timetableFrameRef = new System.Collections.ObjectModel.Collection<TimetableFrameRefStructure>();
            this._vehicleScheduleFrameRef = new System.Collections.ObjectModel.Collection<VehicleScheduleFrameRefStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ServiceCalendarFrameRefStructure> _serviceCalendarFrameRef;
        
        [System.Xml.Serialization.XmlElementAttribute("ServiceCalendarFrameRef")]
        public System.Collections.ObjectModel.Collection<ServiceCalendarFrameRefStructure> ServiceCalendarFrameRef
        {
            get
            {
                return _serviceCalendarFrameRef;
            }
            private set
            {
                _serviceCalendarFrameRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ServiceCalendarFrameRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceCalendarFrameRefSpecified
        {
            get
            {
                return (this.ServiceCalendarFrameRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<SiteFrameRefStructure> _siteFrameRef;
        
        [System.Xml.Serialization.XmlElementAttribute("SiteFrameRef")]
        public System.Collections.ObjectModel.Collection<SiteFrameRefStructure> SiteFrameRef
        {
            get
            {
                return _siteFrameRef;
            }
            private set
            {
                _siteFrameRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SiteFrameRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SiteFrameRefSpecified
        {
            get
            {
                return (this.SiteFrameRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ServiceFrameRefStructure> _serviceFrameRef;
        
        [System.Xml.Serialization.XmlElementAttribute("ServiceFrameRef")]
        public System.Collections.ObjectModel.Collection<ServiceFrameRefStructure> ServiceFrameRef
        {
            get
            {
                return _serviceFrameRef;
            }
            private set
            {
                _serviceFrameRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ServiceFrameRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceFrameRefSpecified
        {
            get
            {
                return (this.ServiceFrameRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TimetableFrameRefStructure> _timetableFrameRef;
        
        [System.Xml.Serialization.XmlElementAttribute("TimetableFrameRef")]
        public System.Collections.ObjectModel.Collection<TimetableFrameRefStructure> TimetableFrameRef
        {
            get
            {
                return _timetableFrameRef;
            }
            private set
            {
                _timetableFrameRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TimetableFrameRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimetableFrameRefSpecified
        {
            get
            {
                return (this.TimetableFrameRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<VehicleScheduleFrameRefStructure> _vehicleScheduleFrameRef;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("VehicleScheduleFrameRef")]
        public System.Collections.ObjectModel.Collection<VehicleScheduleFrameRefStructure> VehicleScheduleFrameRef
        {
            get
            {
                return _vehicleScheduleFrameRef;
            }
            private set
            {
                _vehicleScheduleFrameRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the VehicleScheduleFrameRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VehicleScheduleFrameRefSpecified
        {
            get
            {
                return (this.VehicleScheduleFrameRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("contentValidityConditions_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContentValidityConditionsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidityConditionVersionStructure> _validityCondition;
        
        [System.Xml.Serialization.XmlElementAttribute("ValidityCondition")]
        public System.Collections.ObjectModel.Collection<ValidityConditionVersionStructure> ValidityCondition
        {
            get
            {
                return _validityCondition;
            }
            private set
            {
                _validityCondition = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidityCondition collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidityConditionSpecified
        {
            get
            {
                return (this.ValidityCondition.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ContentValidityConditionsRelStructure" /> class.</para>
        /// </summary>
        public ContentValidityConditionsRelStructure()
        {
            this._validityCondition = new System.Collections.ObjectModel.Collection<ValidityConditionVersionStructure>();
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._availabilityCondition = new System.Collections.ObjectModel.Collection<AvailabilityConditionStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<AvailabilityConditionStructure> _availabilityCondition;
        
        [System.Xml.Serialization.XmlElementAttribute("AvailabilityCondition")]
        public System.Collections.ObjectModel.Collection<AvailabilityConditionStructure> AvailabilityCondition
        {
            get
            {
                return _availabilityCondition;
            }
            private set
            {
                _availabilityCondition = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AvailabilityCondition collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AvailabilityConditionSpecified
        {
            get
            {
                return (this.AvailabilityCondition.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("dataSources_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("dataSources", Namespace="http://www.netex.org.uk/netex")]
    public partial class DataSourcesRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DataSourceStructure> _dataSource;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("DataSource")]
        public System.Collections.ObjectModel.Collection<DataSourceStructure> DataSource
        {
            get
            {
                return _dataSource;
            }
            private set
            {
                _dataSource = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DataSourcesRelStructure" /> class.</para>
        /// </summary>
        public DataSourcesRelStructure()
        {
            this._dataSource = new System.Collections.ObjectModel.Collection<DataSourceStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("responsibilitySets_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("responsibilitySets", Namespace="http://www.netex.org.uk/netex")]
    public partial class ResponsibilitySetsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ResponsibilitySetVersionStructure> _responsibilitySet;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ResponsibilitySet")]
        public System.Collections.ObjectModel.Collection<ResponsibilitySetVersionStructure> ResponsibilitySet
        {
            get
            {
                return _responsibilitySet;
            }
            private set
            {
                _responsibilitySet = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ResponsibilitySetsRelStructure" /> class.</para>
        /// </summary>
        public ResponsibilitySetsRelStructure()
        {
            this._responsibilitySet = new System.Collections.ObjectModel.Collection<ResponsibilitySetVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ResponsibilitySet_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ResponsibilitySet", Namespace="http://www.netex.org.uk/netex")]
    public partial class ResponsibilitySetVersionStructure : IDataManagedObjectElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ResponsibilitySetVersionStructure" /> class.</para>
        /// </summary>
        public ResponsibilitySetVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._roles = new System.Collections.ObjectModel.Collection<ResponsibilityRoleAssignmentStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>A private code that uniquely identifies the element.
        ///May be used for inter-operating with other (legacy)
        ///systems.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A private code that uniquely identifies the element. May be used for inter-operat" +
            "ing with other (legacy) systems.")]
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ResponsibilityRoleAssignmentStructure> _roles;
        
        /// <summary>
        /// <para>Mandatory in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP")]
        [System.Xml.Serialization.XmlArrayAttribute("roles")]
        [System.Xml.Serialization.XmlArrayItemAttribute("ResponsibilityRoleAssignment", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<ResponsibilityRoleAssignmentStructure> Roles
        {
            get
            {
                return _roles;
            }
            private set
            {
                _roles = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Roles collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RolesSpecified
        {
            get
            {
                return (this.Roles.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("rolesStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("roles", Namespace="http://www.netex.org.uk/netex")]
    public partial class RolesStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ResponsibilityRoleAssignmentStructure> _responsibilityRoleAssignment;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ResponsibilityRoleAssignment")]
        public System.Collections.ObjectModel.Collection<ResponsibilityRoleAssignmentStructure> ResponsibilityRoleAssignment
        {
            get
            {
                return _responsibilityRoleAssignment;
            }
            private set
            {
                _responsibilityRoleAssignment = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="RolesStructure" /> class.</para>
        /// </summary>
        public RolesStructure()
        {
            this._responsibilityRoleAssignment = new System.Collections.ObjectModel.Collection<ResponsibilityRoleAssignmentStructure>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ResponsibilityRoleAssignmentStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ResponsibilityRoleAssignment", Namespace="http://www.netex.org.uk/netex")]
    public partial class ResponsibilityRoleAssignmentStructure : IVersionedChildElementGroup, IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ResponsibilityRoleAssignmentStructure" /> class.</para>
        /// </summary>
        public ResponsibilityRoleAssignmentStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._dataRoleType = new System.Collections.ObjectModel.Collection<string>();
            this._stakeholderRoleType = new System.Collections.ObjectModel.Collection<string>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ResponsibilitySetRef")]
        public ResponsibilitySetRefStructure ResponsibilitySetRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _dataRoleType;
        
        /// <summary>
        /// <para>Data Role type of RESPONSIBILITY ROLE.
        ///• creates
        ///• collects
        ///• aggregates
        ///Only a subset of data related roles are selected
        ///for the EPIP, these distinguish between an
        ///ORGANISATION originating the data (creates);
        ///one collecting them from multiple sources but
        ///without changing them (collects) and one which
        ///integrates data sets (merging, correcting,
        ///enhancing, etc.) (aggregates)</para>
        /// <para>List of Allowed values for Data e Roles.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Data Role type of RESPONSIBILITY ROLE. • creates • collects • aggregates Only a subset of data related roles are selected for the EPIP, these distinguish between an ORGANISATION originating the data (creates); one collecting them from multiple sources but without changing them (collects) and one which integrates data sets (merging, correcting, enhancing, etc.) (aggregates)")]
        [System.Xml.Serialization.XmlElementAttribute("DataRoleType")]
        public System.Collections.ObjectModel.Collection<string> DataRoleType
        {
            get
            {
                return _dataRoleType;
            }
            private set
            {
                _dataRoleType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DataRoleType collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DataRoleTypeSpecified
        {
            get
            {
                return (this.DataRoleType.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _stakeholderRoleType;
        
        /// <summary>
        /// <para>Stakeholder role type of RESPONSIBILITY ROLE.
        ///• Planning
        ///• Operation
        ///Only a subset of data roles are selected for the
        ///EPIP, these distinguish between an
        ///ORGANISATION that does ‘Planning’ (typically an
        ///Authority); one that operate ‘Operation’ some aspect of the network (Operators, site managers,
        ///etc.); and one having the legal ownership (city,
        ///authority, etc.). This information is of relevance
        ///for passengers, especially if they have questions
        ///or complaints to address.</para>
        /// <para>List of Allowed values for Stakeholder Roles.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Stakeholder role type of RESPONSIBILITY ROLE. • Planning • Operation Only a subset of data roles are selected for the EPIP, these distinguish between an ORGANISATION that does ‘Planning’ (typically an Authority); one that operate ‘Operation’ some aspect of the network (Operators, site managers, etc.); and one having the legal ownership (city, authority, etc.). This information is of relevance for passengers, especially if they have questions or complaints to address.")]
        [System.Xml.Serialization.XmlElementAttribute("StakeholderRoleType")]
        public System.Collections.ObjectModel.Collection<string> StakeholderRoleType
        {
            get
            {
                return _stakeholderRoleType;
            }
            private set
            {
                _stakeholderRoleType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the StakeholderRoleType collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StakeholderRoleTypeSpecified
        {
            get
            {
                return (this.StakeholderRoleType.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ResponsibleOrganisationRef")]
        public ResponsibleOrganisationRefStructure ResponsibleOrganisationRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("ResponsiblePartRef")]
        public ResponsiblePartRefStructure ResponsiblePartRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ResponsibleAreaRef")]
        public ResponsibleAreaRefStructure ResponsibleAreaRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ResponsibleOrganisationRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ResponsibleOrganisationRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ResponsibleOrganisationRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ResponsiblePartRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ResponsiblePartRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ResponsiblePartRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ResponsibleAreaRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ResponsibleAreaRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ResponsibleAreaRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("typesOfValue_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("typesOfValue", Namespace="http://www.netex.org.uk/netex")]
    public partial class TypesOfValueRelStructure : ITypeOfValueSubstitutionGroup, IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValueSetStructure> _valueSet;
        
        [System.Xml.Serialization.XmlElementAttribute("ValueSet")]
        public System.Collections.ObjectModel.Collection<ValueSetStructure> ValueSet
        {
            get
            {
                return _valueSet;
            }
            private set
            {
                _valueSet = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValueSet collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValueSetSpecified
        {
            get
            {
                return (this.ValueSet.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TypesOfValueRelStructure" /> class.</para>
        /// </summary>
        public TypesOfValueRelStructure()
        {
            this._valueSet = new System.Collections.ObjectModel.Collection<ValueSetStructure>();
            this._typeOfFrame = new System.Collections.ObjectModel.Collection<TypeOfFrameStructure>();
            this._typeOfPlace = new System.Collections.ObjectModel.Collection<TypeOfPlaceStructure>();
            this._typeOfValidity = new System.Collections.ObjectModel.Collection<TypeOfValidityVersionStructure>();
            this._typeOfFlexibleService = new System.Collections.ObjectModel.Collection<TypeOfFlexibleServiceValueStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TypeOfFrameStructure> _typeOfFrame;
        
        [System.Xml.Serialization.XmlElementAttribute("TypeOfFrame")]
        public System.Collections.ObjectModel.Collection<TypeOfFrameStructure> TypeOfFrame
        {
            get
            {
                return _typeOfFrame;
            }
            private set
            {
                _typeOfFrame = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TypeOfFrame collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeOfFrameSpecified
        {
            get
            {
                return (this.TypeOfFrame.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TypeOfPlaceStructure> _typeOfPlace;
        
        [System.Xml.Serialization.XmlElementAttribute("TypeOfPlace")]
        public System.Collections.ObjectModel.Collection<TypeOfPlaceStructure> TypeOfPlace
        {
            get
            {
                return _typeOfPlace;
            }
            private set
            {
                _typeOfPlace = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TypeOfPlace collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeOfPlaceSpecified
        {
            get
            {
                return (this.TypeOfPlace.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TypeOfValidityVersionStructure> _typeOfValidity;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfValidity")]
        public System.Collections.ObjectModel.Collection<TypeOfValidityVersionStructure> TypeOfValidity
        {
            get
            {
                return _typeOfValidity;
            }
            private set
            {
                _typeOfValidity = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TypeOfValidity collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeOfValiditySpecified
        {
            get
            {
                return (this.TypeOfValidity.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TypeOfFlexibleServiceValueStructure> _typeOfFlexibleService;
        
        [System.Xml.Serialization.XmlElementAttribute("TypeOfFlexibleService")]
        public System.Collections.ObjectModel.Collection<TypeOfFlexibleServiceValueStructure> TypeOfFlexibleService
        {
            get
            {
                return _typeOfFlexibleService;
            }
            private set
            {
                _typeOfFlexibleService = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TypeOfFlexibleService collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeOfFlexibleServiceSpecified
        {
            get
            {
                return (this.TypeOfFlexibleService.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ITypeOfValueSubstitutionGroup
    {
        
        System.Collections.ObjectModel.Collection<TypeOfFrameStructure> TypeOfFrame
        {
            get;
        }
        
        System.Collections.ObjectModel.Collection<TypeOfPlaceStructure> TypeOfPlace
        {
            get;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        System.Collections.ObjectModel.Collection<TypeOfValidityVersionStructure> TypeOfValidity
        {
            get;
        }
        
        System.Collections.ObjectModel.Collection<TypeOfFlexibleServiceValueStructure> TypeOfFlexibleService
        {
            get;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TypeOfFrameStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TypeOfFrame", Namespace="http://www.netex.org.uk/netex")]
    public partial class TypeOfFrameStructure
    {
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TypeOfValidityRef")]
        public TypeOfValidityRefStructure TypeOfValidityRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("FrameClassRef")]
        public FrameClassRefStructure FrameClassRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("classes")]
        public ClassesStructure Classes { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("typesOfEntity")]
        public TypesOfEntityRelStructure TypesOfEntity { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("includes")]
        public IncludesRelStructure Includes { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ModificationSet")]
        public ModificationSetEnumeration ModificationSet { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ModificationSet property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSetSpecified { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TypeOfValidityRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TypeOfValidityRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TypeOfValidityRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("classesStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("classes", Namespace="http://www.netex.org.uk/netex")]
    public partial class ClassesStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ClassInFrameRefStructure> _classInFrameRef;
        
        [System.Xml.Serialization.XmlElementAttribute("ClassInFrameRef")]
        public System.Collections.ObjectModel.Collection<ClassInFrameRefStructure> ClassInFrameRef
        {
            get
            {
                return _classInFrameRef;
            }
            private set
            {
                _classInFrameRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ClassInFrameRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ClassInFrameRefSpecified
        {
            get
            {
                return (this.ClassInFrameRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ClassesStructure" /> class.</para>
        /// </summary>
        public ClassesStructure()
        {
            this._classInFrameRef = new System.Collections.ObjectModel.Collection<ClassInFrameRefStructure>();
            this._classInFrame = new System.Collections.ObjectModel.Collection<ClassInFrameStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ClassInFrameStructure> _classInFrame;
        
        [System.Xml.Serialization.XmlElementAttribute("ClassInFrame")]
        public System.Collections.ObjectModel.Collection<ClassInFrameStructure> ClassInFrame
        {
            get
            {
                return _classInFrame;
            }
            private set
            {
                _classInFrame = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ClassInFrame collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ClassInFrameSpecified
        {
            get
            {
                return (this.ClassInFrame.Count != 0);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("typesOfEntity_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("typesOfEntity", Namespace="http://www.netex.org.uk/netex")]
    public partial class TypesOfEntityRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TypeOfPlaceRefStructure> _typeOfPlaceRef;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfPlaceRef")]
        public System.Collections.ObjectModel.Collection<TypeOfPlaceRefStructure> TypeOfPlaceRef
        {
            get
            {
                return _typeOfPlaceRef;
            }
            private set
            {
                _typeOfPlaceRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TypesOfEntityRelStructure" /> class.</para>
        /// </summary>
        public TypesOfEntityRelStructure()
        {
            this._typeOfPlaceRef = new System.Collections.ObjectModel.Collection<TypeOfPlaceRefStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("includes_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("includes", Namespace="http://www.netex.org.uk/netex")]
    public partial class IncludesRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TypeOfFrameRefStructure> _typeOfFrameRef;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfFrameRef")]
        public System.Collections.ObjectModel.Collection<TypeOfFrameRefStructure> TypeOfFrameRef
        {
            get
            {
                return _typeOfFrameRef;
            }
            private set
            {
                _typeOfFrameRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="IncludesRelStructure" /> class.</para>
        /// </summary>
        public IncludesRelStructure()
        {
            this._typeOfFrameRef = new System.Collections.ObjectModel.Collection<TypeOfFrameRefStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TypeOfPlaceStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TypeOfPlace", Namespace="http://www.netex.org.uk/netex")]
    public partial class TypeOfPlaceStructure : IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TypeOfValidity_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TypeOfValidity", Namespace="http://www.netex.org.uk/netex")]
    public partial class TypeOfValidityVersionStructure : IDataManagedObjectElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TypeOfValidityVersionStructure" /> class.</para>
        /// </summary>
        public TypeOfValidityVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._classes = new System.Collections.ObjectModel.Collection<ClassInFrameRefStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Periodicity of data in frames of this type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Periodicity of data in frames of this type.")]
        [System.Xml.Serialization.XmlElementAttribute("Periodicity")]
        public string Periodicity { get; set; }
        
        /// <summary>
        /// <para>Nature of presence of data in  Frames of this type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of presence of data in Frames of this type.")]
        [System.Xml.Serialization.XmlElementAttribute("Nature")]
        public FrameNatureEnumeration Nature { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Nature property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NatureSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ClassInFrameRefStructure> _classes;
        
        [System.Xml.Serialization.XmlArrayAttribute("classes")]
        [System.Xml.Serialization.XmlArrayItemAttribute("ClassInFrameRef", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<ClassInFrameRefStructure> Classes
        {
            get
            {
                return _classes;
            }
            private set
            {
                _classes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Classes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ClassesSpecified
        {
            get
            {
                return (this.Classes.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Allowed values for Nature of data  in frame.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Nature of data in frame.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("FrameNatureEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum FrameNatureEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("planned")]
        Planned,
        
        [System.Xml.Serialization.XmlEnumAttribute("operational")]
        Operational,
        
        [System.Xml.Serialization.XmlEnumAttribute("contingencyPlan")]
        ContingencyPlan,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("classesStructure2", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ClassesStructure2
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ClassInFrameRefStructure> _classInFrameRef;
        
        [System.Xml.Serialization.XmlElementAttribute("ClassInFrameRef")]
        public System.Collections.ObjectModel.Collection<ClassInFrameRefStructure> ClassInFrameRef
        {
            get
            {
                return _classInFrameRef;
            }
            private set
            {
                _classInFrameRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ClassInFrameRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ClassInFrameRefSpecified
        {
            get
            {
                return (this.ClassInFrameRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ClassesStructure2" /> class.</para>
        /// </summary>
        public ClassesStructure2()
        {
            this._classInFrameRef = new System.Collections.ObjectModel.Collection<ClassInFrameRefStructure>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TypeOfFlexibleService_ValueStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TypeOfFlexibleService", Namespace="http://www.netex.org.uk/netex")]
    public partial class TypeOfFlexibleServiceValueStructure : IDataManagedObjectElementGroup, ITypeOfValueGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TypeOfFlexibleServiceValueStructure" /> class.</para>
        /// </summary>
        public TypeOfFlexibleServiceValueStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of TYPE OF VALUE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of TYPE OF VALUE.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Short Name for TYPE OF VALUE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Short Name for TYPE OF VALUE.")]
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        /// <summary>
        /// <para>Description of TYPE OF VALUE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of TYPE OF VALUE.")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Default image for TYPE OF VALUE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default image for TYPE OF VALUE.")]
        [System.Xml.Serialization.XmlElementAttribute("Image")]
        public string Image { get; set; }
        
        /// <summary>
        /// <para>Default URL for TYPE OF VALUE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default URL for TYPE OF VALUE.")]
        [System.Xml.Serialization.XmlElementAttribute("Url")]
        public string Url { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Elements for TYPE OF VALUE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for TYPE OF VALUE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ITypeOfValueGroup
    {
        
        /// <summary>
        /// <para>Name of TYPE OF VALUE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of TYPE OF VALUE.")]
        MultilingualString Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Short Name for TYPE OF VALUE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Short Name for TYPE OF VALUE.")]
        MultilingualString ShortName
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Description of TYPE OF VALUE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of TYPE OF VALUE.")]
        MultilingualString Description
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Default image for TYPE OF VALUE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default image for TYPE OF VALUE.")]
        string Image
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Default URL for TYPE OF VALUE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default URL for TYPE OF VALUE.")]
        string Url
        {
            get;
            set;
        }
        
        PrivateCodeStructure PrivateCode
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ValueSetStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ValueSet", Namespace="http://www.netex.org.uk/netex")]
    public partial class ValueSetStructure : IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("values")]
        public ValuesStructure Values { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("classOfValues")]
        public string ClassOfValues { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("valuesStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("values", Namespace="http://www.netex.org.uk/netex")]
    public partial class ValuesStructure : ITypeOfValueSubstitutionGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TypeOfFrameStructure> _typeOfFrame;
        
        [System.Xml.Serialization.XmlElementAttribute("TypeOfFrame")]
        public System.Collections.ObjectModel.Collection<TypeOfFrameStructure> TypeOfFrame
        {
            get
            {
                return _typeOfFrame;
            }
            private set
            {
                _typeOfFrame = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TypeOfFrame collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeOfFrameSpecified
        {
            get
            {
                return (this.TypeOfFrame.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ValuesStructure" /> class.</para>
        /// </summary>
        public ValuesStructure()
        {
            this._typeOfFrame = new System.Collections.ObjectModel.Collection<TypeOfFrameStructure>();
            this._typeOfPlace = new System.Collections.ObjectModel.Collection<TypeOfPlaceStructure>();
            this._typeOfValidity = new System.Collections.ObjectModel.Collection<TypeOfValidityVersionStructure>();
            this._typeOfFlexibleService = new System.Collections.ObjectModel.Collection<TypeOfFlexibleServiceValueStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TypeOfPlaceStructure> _typeOfPlace;
        
        [System.Xml.Serialization.XmlElementAttribute("TypeOfPlace")]
        public System.Collections.ObjectModel.Collection<TypeOfPlaceStructure> TypeOfPlace
        {
            get
            {
                return _typeOfPlace;
            }
            private set
            {
                _typeOfPlace = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TypeOfPlace collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeOfPlaceSpecified
        {
            get
            {
                return (this.TypeOfPlace.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TypeOfValidityVersionStructure> _typeOfValidity;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfValidity")]
        public System.Collections.ObjectModel.Collection<TypeOfValidityVersionStructure> TypeOfValidity
        {
            get
            {
                return _typeOfValidity;
            }
            private set
            {
                _typeOfValidity = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TypeOfValidity collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeOfValiditySpecified
        {
            get
            {
                return (this.TypeOfValidity.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TypeOfFlexibleServiceValueStructure> _typeOfFlexibleService;
        
        [System.Xml.Serialization.XmlElementAttribute("TypeOfFlexibleService")]
        public System.Collections.ObjectModel.Collection<TypeOfFlexibleServiceValueStructure> TypeOfFlexibleService
        {
            get
            {
                return _typeOfFlexibleService;
            }
            private set
            {
                _typeOfFlexibleService = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TypeOfFlexibleService collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeOfFlexibleServiceSpecified
        {
            get
            {
                return (this.TypeOfFlexibleService.Count != 0);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("organisationsStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("organisations", Namespace="http://www.netex.org.uk/netex")]
    public partial class OrganisationsStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<OrganisationVersionStructure> _generalOrganisation;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("GeneralOrganisation")]
        public System.Collections.ObjectModel.Collection<OrganisationVersionStructure> GeneralOrganisation
        {
            get
            {
                return _generalOrganisation;
            }
            private set
            {
                _generalOrganisation = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the GeneralOrganisation collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GeneralOrganisationSpecified
        {
            get
            {
                return (this.GeneralOrganisation.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="OrganisationsStructure" /> class.</para>
        /// </summary>
        public OrganisationsStructure()
        {
            this._generalOrganisation = new System.Collections.ObjectModel.Collection<OrganisationVersionStructure>();
            this._authority = new System.Collections.ObjectModel.Collection<AuthorityVersionStructure>();
            this._operator = new System.Collections.ObjectModel.Collection<OperatorVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<AuthorityVersionStructure> _authority;
        
        [System.Xml.Serialization.XmlElementAttribute("Authority")]
        public System.Collections.ObjectModel.Collection<AuthorityVersionStructure> Authority
        {
            get
            {
                return _authority;
            }
            private set
            {
                _authority = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Authority collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AuthoritySpecified
        {
            get
            {
                return (this.Authority.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<OperatorVersionStructure> _operator;
        
        [System.Xml.Serialization.XmlElementAttribute("Operator")]
        public System.Collections.ObjectModel.Collection<OperatorVersionStructure> Operator
        {
            get
            {
                return _operator;
            }
            private set
            {
                _operator = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Operator collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OperatorSpecified
        {
            get
            {
                return (this.Operator.Count != 0);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("operationalContexts_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("operationalContexts", Namespace="http://www.netex.org.uk/netex")]
    public partial class OperationalContextsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<OperationalContextVersionStructure> _operationalContext;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("OperationalContext")]
        public System.Collections.ObjectModel.Collection<OperationalContextVersionStructure> OperationalContext
        {
            get
            {
                return _operationalContext;
            }
            private set
            {
                _operationalContext = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="OperationalContextsRelStructure" /> class.</para>
        /// </summary>
        public OperationalContextsRelStructure()
        {
            this._operationalContext = new System.Collections.ObjectModel.Collection<OperationalContextVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OperationalContext_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("OperationalContext", Namespace="http://www.netex.org.uk/netex")]
    public partial class OperationalContextVersionStructure : IDataManagedObjectElementGroup, IOperationalContextGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="OperationalContextVersionStructure" /> class.</para>
        /// </summary>
        public OperationalContextVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>The name of the OPERATIONAL CONTEXT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The name of the OPERATIONAL CONTEXT.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>A short name of the OPERATIONAL CONTEXT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A short name of the OPERATIONAL CONTEXT.")]
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("OrganisationPartRef")]
        public OrganisationPartRefStructure OrganisationPartRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("VehicleMode")]
        public AllModesEnumeration VehicleMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VehicleMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VehicleModeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TransportSubmode")]
        public TransportSubmodeStructure TransportSubmode { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Elements of an OPERATIONAL CONTEXT.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements of an OPERATIONAL CONTEXT.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IOperationalContextGroup
    {
        
        /// <summary>
        /// <para>The name of the OPERATIONAL CONTEXT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The name of the OPERATIONAL CONTEXT.")]
        MultilingualString Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>A short name of the OPERATIONAL CONTEXT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A short name of the OPERATIONAL CONTEXT.")]
        MultilingualString ShortName
        {
            get;
            set;
        }
        
        PrivateCodeStructure PrivateCode
        {
            get;
            set;
        }
        
        OrganisationPartRefStructure OrganisationPartRef
        {
            get;
            set;
        }
        
        AllModesEnumeration VehicleMode
        {
            get;
            set;
        }
        
        TransportSubmodeStructure TransportSubmode
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("equipments_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("equipments", Namespace="http://www.netex.org.uk/netex")]
    public partial class EquipmentsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<AccessVehicleEquipmentStructure> _accessVehicleEquipment;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("AccessVehicleEquipment")]
        public System.Collections.ObjectModel.Collection<AccessVehicleEquipmentStructure> AccessVehicleEquipment
        {
            get
            {
                return _accessVehicleEquipment;
            }
            private set
            {
                _accessVehicleEquipment = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="EquipmentsRelStructure" /> class.</para>
        /// </summary>
        public EquipmentsRelStructure()
        {
            this._accessVehicleEquipment = new System.Collections.ObjectModel.Collection<AccessVehicleEquipmentStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("vehicleTypesStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("vehicleTypes", Namespace="http://www.netex.org.uk/netex")]
    public partial class VehicleTypesStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<CompoundTrainVersionStructure> _compoundTrain;
        
        [System.Xml.Serialization.XmlElementAttribute("CompoundTrain")]
        public System.Collections.ObjectModel.Collection<CompoundTrainVersionStructure> CompoundTrain
        {
            get
            {
                return _compoundTrain;
            }
            private set
            {
                _compoundTrain = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the CompoundTrain collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CompoundTrainSpecified
        {
            get
            {
                return (this.CompoundTrain.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="VehicleTypesStructure" /> class.</para>
        /// </summary>
        public VehicleTypesStructure()
        {
            this._compoundTrain = new System.Collections.ObjectModel.Collection<CompoundTrainVersionStructure>();
            this._train = new System.Collections.ObjectModel.Collection<TrainVersionStructure>();
            this._vehicleType = new System.Collections.ObjectModel.Collection<VehicleTypeVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TrainVersionStructure> _train;
        
        [System.Xml.Serialization.XmlElementAttribute("Train")]
        public System.Collections.ObjectModel.Collection<TrainVersionStructure> Train
        {
            get
            {
                return _train;
            }
            private set
            {
                _train = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Train collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TrainSpecified
        {
            get
            {
                return (this.Train.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<VehicleTypeVersionStructure> _vehicleType;
        
        [System.Xml.Serialization.XmlElementAttribute("VehicleType")]
        public System.Collections.ObjectModel.Collection<VehicleTypeVersionStructure> VehicleType
        {
            get
            {
                return _vehicleType;
            }
            private set
            {
                _vehicleType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the VehicleType collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VehicleTypeSpecified
        {
            get
            {
                return (this.VehicleType.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// <para>A vehicle composed of COMPOUND TRAIN ELEMENTs in a certain order, i.e. of wagons assembled together and propelled by a locomotive or one of the wagons.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A vehicle composed of COMPOUND TRAIN ELEMENTs in a certain order, i.e. of wagons " +
        "assembled together and propelled by a locomotive or one of the wagons.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CompoundTrain_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("CompoundTrain", Namespace="http://www.netex.org.uk/netex")]
    public partial class CompoundTrainVersionStructure : IDataManagedObjectElementGroup, IVehicleTypePropertiesGroup, ICompoundTrainGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CompoundTrainVersionStructure" /> class.</para>
        /// </summary>
        public CompoundTrainVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._components = new System.Collections.ObjectModel.Collection<TrainInCompoundTrainVersionedChildStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _reversingDirection = true;
        
        /// <summary>
        /// <para>Not in EPIP.              Whether vehicles of the type have a reversing direction.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether vehicles of the type have a reversing direction.")]
        [System.Xml.Serialization.XmlElementAttribute("ReversingDirection")]
        public bool ReversingDirection
        {
            get
            {
                return _reversingDirection;
            }
            set
            {
                _reversingDirection = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _selfPropelled = true;
        
        /// <summary>
        /// <para>Whether vehicles of the type are self-propelled.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Whether vehicles of the type are self-propelled.")]
        [System.Xml.Serialization.XmlElementAttribute("SelfPropelled")]
        public bool SelfPropelled
        {
            get
            {
                return _selfPropelled;
            }
            set
            {
                _selfPropelled = value;
            }
        }
        
        /// <summary>
        /// <para>The type of fuel used by a vehicle of the type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The type of fuel used by a vehicle of the type.")]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfFuel")]
        public string TypeOfFuel { get; set; }
        
        /// <summary>
        /// <para>Euroclass of the vehicle type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Euroclass of the vehicle type.")]
        [System.Xml.Serialization.XmlElementAttribute("EuroClass")]
        public string EuroClass { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.                 Total Number of passengers that VEHICLE TYPE. can carry.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Total Number of passengers that VEHICLE TYPE. can carry.")]
        [System.Xml.Serialization.XmlElementAttribute("PassengerCapacity")]
        public PassengerCapacityVersionStructure PassengerCapacity { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("capacities")]
        public CapacitiesRelStructure Capacities { get; set; }
        
        /// <summary>
        /// <para>Whether Vehicle is low floor to facilitate access by the mobility impaired.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether Vehicle is low floor to facilitate access by the mobility impaired.")]
        [System.Xml.Serialization.XmlElementAttribute("LowFloor")]
        public bool LowFloor { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LowFloor property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LowFloorSpecified { get; set; }
        
        /// <summary>
        /// <para>Whether vehicle has lift or ramp to facilitate wheelchair access.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether vehicle has lift or ramp to facilitate wheelchair access.")]
        [System.Xml.Serialization.XmlElementAttribute("HasLiftOrRamp")]
        public bool HasLiftOrRamp { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HasLiftOrRamp property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HasLiftOrRampSpecified { get; set; }
        
        /// <summary>
        /// <para>Whether vehicle has hoist for wheelchair access.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether vehicle has hoist for wheelchair access.")]
        [System.Xml.Serialization.XmlElementAttribute("HasHoist")]
        public bool HasHoist { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HasHoist property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HasHoistSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.          Maximum step height to board. +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum step height to board. +v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("BoardingHeight")]
        public decimal BoardingHeight { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BoardingHeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BoardingHeightSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.            Expected maximal gap between VEHICLE and platform. +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Expected maximal gap between VEHICLE and platform. +v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("GapToPlatform")]
        public decimal GapToPlatform { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GapToPlatform property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GapToPlatformSpecified { get; set; }
        
        /// <summary>
        /// <para>The length of a VEHICLE of the type.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The length of a VEHICLE of the type.")]
        [System.Xml.Serialization.XmlElementAttribute("Length")]
        public decimal Length { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Length property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LengthSpecified { get; set; }
        
        /// <summary>
        /// <para>The width of a VEHICLE of the type. +v1.1</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The width of a VEHICLE of the type. +v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("Width")]
        public decimal Width { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Width property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WidthSpecified { get; set; }
        
        /// <summary>
        /// <para>The length of a VEHICLE of the type. +v1.1</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The length of a VEHICLE of the type. +v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("Height")]
        public decimal Height { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Height property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HeightSpecified { get; set; }
        
        /// <summary>
        /// <para>The weight of a VEHICLE of the type. +v1.1</para>
        /// <para>Weight type for mass. System for Units can be specified on Frame. Normal default is (kilos) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The weight of a VEHICLE of the type. +v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("Weight")]
        public decimal Weight { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Weight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WeightSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. Facilities of VEHICLE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Facilities of VEHICLE.")]
        [System.Xml.Serialization.XmlElementAttribute("facilities")]
        public ServiceFacilitiesRelStructure Facilities { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TrainInCompoundTrainVersionedChildStructure> _components;
        
        /// <summary>
        /// <para>Ordered collection of TRAIN in COMPOUND TRAINs making up COMPOUND TRAIN. Each references a TRAIN.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Ordered collection of TRAIN in COMPOUND TRAINs making up COMPOUND TRAIN. Each ref" +
            "erences a TRAIN.")]
        [System.Xml.Serialization.XmlArrayAttribute("components")]
        [System.Xml.Serialization.XmlArrayItemAttribute("TrainInCompoundTrain", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<TrainInCompoundTrainVersionedChildStructure> Components
        {
            get
            {
                return _components;
            }
            private set
            {
                _components = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Components collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ComponentsSpecified
        {
            get
            {
                return (this.Components.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Prooprty Elements for a VEHICLE TYPE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Prooprty Elements for a VEHICLE TYPE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IVehicleTypePropertiesGroup : IVehicleAccessibilityRequirementsGroup, IVehicleDimensionsGroup
    {
        
        /// <summary>
        /// <para>Not in EPIP.              Whether vehicles of the type have a reversing direction.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether vehicles of the type have a reversing direction.")]
        bool ReversingDirection
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether vehicles of the type are self-propelled.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Whether vehicles of the type are self-propelled.")]
        bool SelfPropelled
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>The type of fuel used by a vehicle of the type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The type of fuel used by a vehicle of the type.")]
        string TypeOfFuel
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Euroclass of the vehicle type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Euroclass of the vehicle type.")]
        string EuroClass
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.                 Total Number of passengers that VEHICLE TYPE. can carry.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Total Number of passengers that VEHICLE TYPE. can carry.")]
        PassengerCapacityVersionStructure PassengerCapacity
        {
            get;
            set;
        }
        
        CapacitiesRelStructure Capacities
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP. Facilities of VEHICLE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Facilities of VEHICLE.")]
        ServiceFacilitiesRelStructure Facilities
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("capacities_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CapacitiesRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PassengerCapacityVersionStructure> _passengerCapacity;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("PassengerCapacity")]
        public System.Collections.ObjectModel.Collection<PassengerCapacityVersionStructure> PassengerCapacity
        {
            get
            {
                return _passengerCapacity;
            }
            private set
            {
                _passengerCapacity = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CapacitiesRelStructure" /> class.</para>
        /// </summary>
        public CapacitiesRelStructure()
        {
            this._passengerCapacity = new System.Collections.ObjectModel.Collection<PassengerCapacityVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>SERVICE FACILITY SETs associated with entity.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("SERVICE FACILITY SETs associated with entity.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("serviceFacilities_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServiceFacilitiesRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ServiceFacilityRefStructure> _serviceFacilitySetRef;
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("ServiceFacilitySetRef")]
        public System.Collections.ObjectModel.Collection<ServiceFacilityRefStructure> ServiceFacilitySetRef
        {
            get
            {
                return _serviceFacilitySetRef;
            }
            private set
            {
                _serviceFacilitySetRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ServiceFacilitySetRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceFacilitySetRefSpecified
        {
            get
            {
                return (this.ServiceFacilitySetRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ServiceFacilitiesRelStructure" /> class.</para>
        /// </summary>
        public ServiceFacilitiesRelStructure()
        {
            this._serviceFacilitySetRef = new System.Collections.ObjectModel.Collection<ServiceFacilityRefStructure>();
            this._serviceFacilitySet = new System.Collections.ObjectModel.Collection<ServiceFacilitySetVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ServiceFacilitySetVersionStructure> _serviceFacilitySet;
        
        /// <summary>
        /// <para>Service FACILITY. Set of enumerated FACILITY values (Where available names are based on TPEG classifications, augmented with UIC etc.).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Service FACILITY. Set of enumerated FACILITY values (Where available names are ba" +
            "sed on TPEG classifications, augmented with UIC etc.).")]
        [System.Xml.Serialization.XmlElementAttribute("ServiceFacilitySet")]
        public System.Collections.ObjectModel.Collection<ServiceFacilitySetVersionStructure> ServiceFacilitySet
        {
            get
            {
                return _serviceFacilitySet;
            }
            private set
            {
                _serviceFacilitySet = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ServiceFacilitySet collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceFacilitySetSpecified
        {
            get
            {
                return (this.ServiceFacilitySet.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>SERVICE FACILITies associated with entity.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("SERVICE FACILITies associated with entity.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ServiceFacilitySet_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServiceFacilitySetVersionStructure : IDataManagedObjectElementGroup, ICommonFacilityGroup, IServiceFacilityGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ServiceFacilitySetVersionStructure" /> class.</para>
        /// </summary>
        public ServiceFacilitySetVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._accessibilityInfoFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._assistanceFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._accessibilityToolList = new System.Collections.ObjectModel.Collection<string>();
            this._carServiceFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._cateringFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._familyFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._fareClasses = new System.Collections.ObjectModel.Collection<string>();
            this._mealFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._medicalFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._mobilityFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._nuisanceFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._passengerCommsFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._passengerInformationFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._retailFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._safetyFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._sanitaryFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._ticketingFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._ticketingServiceFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._vehicleAccessFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._accommodationAccessList = new System.Collections.ObjectModel.Collection<string>();
            this._accommodationFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._bookingProcessFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._couchetteFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._luggageCarriageFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._serviceReservationFacilityList = new System.Collections.ObjectModel.Collection<string>();
            this._uicProductCharacteristicList = new System.Collections.ObjectModel.Collection<string>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _accessibilityInfoFacilityList;
        
        /// <summary>
        /// <para>List of ACCESSIBILITY INFORMATION FACILITies.</para>
        /// <para>List of values for ACCESSIBILITY INFO FACILITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of ACCESSIBILITY INFORMATION FACILITies.")]
        [System.Xml.Serialization.XmlElementAttribute("AccessibilityInfoFacilityList")]
        public System.Collections.ObjectModel.Collection<string> AccessibilityInfoFacilityList
        {
            get
            {
                return _accessibilityInfoFacilityList;
            }
            private set
            {
                _accessibilityInfoFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AccessibilityInfoFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccessibilityInfoFacilityListSpecified
        {
            get
            {
                return (this.AccessibilityInfoFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _assistanceFacilityList;
        
        /// <summary>
        /// <para>List of Couchette FACILITies.</para>
        /// <para>List of values for ASSISTANCE FACILITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of Couchette FACILITies.")]
        [System.Xml.Serialization.XmlElementAttribute("AssistanceFacilityList")]
        public System.Collections.ObjectModel.Collection<string> AssistanceFacilityList
        {
            get
            {
                return _assistanceFacilityList;
            }
            private set
            {
                _assistanceFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AssistanceFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AssistanceFacilityListSpecified
        {
            get
            {
                return (this.AssistanceFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _accessibilityToolList;
        
        /// <summary>
        /// <para>List of TYPEs of ACCESSIBILITY TOOLs.</para>
        /// <para>List of values for TYPE OF ACCESSIBILITY TOOL.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of TYPEs of ACCESSIBILITY TOOLs.")]
        [System.Xml.Serialization.XmlElementAttribute("AccessibilityToolList")]
        public System.Collections.ObjectModel.Collection<string> AccessibilityToolList
        {
            get
            {
                return _accessibilityToolList;
            }
            private set
            {
                _accessibilityToolList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AccessibilityToolList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccessibilityToolListSpecified
        {
            get
            {
                return (this.AccessibilityToolList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _carServiceFacilityList;
        
        /// <summary>
        /// <para>List of values for CAR SERVICE FACILITY.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("CarServiceFacilityList")]
        public System.Collections.ObjectModel.Collection<string> CarServiceFacilityList
        {
            get
            {
                return _carServiceFacilityList;
            }
            private set
            {
                _carServiceFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the CarServiceFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CarServiceFacilityListSpecified
        {
            get
            {
                return (this.CarServiceFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _cateringFacilityList;
        
        /// <summary>
        /// <para>List of values for CATERING FACILITies.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("CateringFacilityList")]
        public System.Collections.ObjectModel.Collection<string> CateringFacilityList
        {
            get
            {
                return _cateringFacilityList;
            }
            private set
            {
                _cateringFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the CateringFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CateringFacilityListSpecified
        {
            get
            {
                return (this.CateringFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _familyFacilityList;
        
        /// <summary>
        /// <para>List of values for FAMILY FACILITies.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("FamilyFacilityList")]
        public System.Collections.ObjectModel.Collection<string> FamilyFacilityList
        {
            get
            {
                return _familyFacilityList;
            }
            private set
            {
                _familyFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FamilyFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FamilyFacilityListSpecified
        {
            get
            {
                return (this.FamilyFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _fareClasses;
        
        /// <summary>
        /// <para>List of Fare Classes.</para>
        /// <para>List of values for FARE CLASSes.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of Fare Classes.")]
        [System.Xml.Serialization.XmlElementAttribute("FareClasses")]
        public System.Collections.ObjectModel.Collection<string> FareClasses
        {
            get
            {
                return _fareClasses;
            }
            private set
            {
                _fareClasses = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FareClasses collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FareClassesSpecified
        {
            get
            {
                return (this.FareClasses.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("GenderLimitation")]
        public GenderLimitationEnumeration GenderLimitation { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GenderLimitation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GenderLimitationSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _mealFacilityList;
        
        /// <summary>
        /// <para>List of values for MEAL FACILITY.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("MealFacilityList")]
        public System.Collections.ObjectModel.Collection<string> MealFacilityList
        {
            get
            {
                return _mealFacilityList;
            }
            private set
            {
                _mealFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MealFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MealFacilityListSpecified
        {
            get
            {
                return (this.MealFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _medicalFacilityList;
        
        /// <summary>
        /// <para>List of values for MEDICAL FACILITies.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("MedicalFacilityList")]
        public System.Collections.ObjectModel.Collection<string> MedicalFacilityList
        {
            get
            {
                return _medicalFacilityList;
            }
            private set
            {
                _medicalFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MedicalFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MedicalFacilityListSpecified
        {
            get
            {
                return (this.MedicalFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _mobilityFacilityList;
        
        /// <summary>
        /// <para>List of values for MOBILITY FACILITY.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("MobilityFacilityList")]
        public System.Collections.ObjectModel.Collection<string> MobilityFacilityList
        {
            get
            {
                return _mobilityFacilityList;
            }
            private set
            {
                _mobilityFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MobilityFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MobilityFacilityListSpecified
        {
            get
            {
                return (this.MobilityFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _nuisanceFacilityList;
        
        /// <summary>
        /// <para>List of values for NUISANCE FACILITY.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("NuisanceFacilityList")]
        public System.Collections.ObjectModel.Collection<string> NuisanceFacilityList
        {
            get
            {
                return _nuisanceFacilityList;
            }
            private set
            {
                _nuisanceFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the NuisanceFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NuisanceFacilityListSpecified
        {
            get
            {
                return (this.NuisanceFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _passengerCommsFacilityList;
        
        /// <summary>
        /// <para>List of values for PASSENGER COMMS FACILITies.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("PassengerCommsFacilityList")]
        public System.Collections.ObjectModel.Collection<string> PassengerCommsFacilityList
        {
            get
            {
                return _passengerCommsFacilityList;
            }
            private set
            {
                _passengerCommsFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PassengerCommsFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PassengerCommsFacilityListSpecified
        {
            get
            {
                return (this.PassengerCommsFacilityList.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>List of PASSENGER INFORMATION Equipments.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of PASSENGER INFORMATION Equipments.")]
        [System.Xml.Serialization.XmlElementAttribute("PassengerInformationEquipmentList")]
        public PassengerInformationEquipmentEnumeration PassengerInformationEquipmentList { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PassengerInformationEquipmentList property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PassengerInformationEquipmentListSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _passengerInformationFacilityList;
        
        /// <summary>
        /// <para>List of PASSENGER INFORMATION FACILITies.</para>
        /// <para>List of values for PASSENGER INFO FACILITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of PASSENGER INFORMATION FACILITies.")]
        [System.Xml.Serialization.XmlElementAttribute("PassengerInformationFacilityList")]
        public System.Collections.ObjectModel.Collection<string> PassengerInformationFacilityList
        {
            get
            {
                return _passengerInformationFacilityList;
            }
            private set
            {
                _passengerInformationFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PassengerInformationFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PassengerInformationFacilityListSpecified
        {
            get
            {
                return (this.PassengerInformationFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _retailFacilityList;
        
        /// <summary>
        /// <para>List of values for RETAIL FACILITies.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("RetailFacilityList")]
        public System.Collections.ObjectModel.Collection<string> RetailFacilityList
        {
            get
            {
                return _retailFacilityList;
            }
            private set
            {
                _retailFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RetailFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RetailFacilityListSpecified
        {
            get
            {
                return (this.RetailFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _safetyFacilityList;
        
        /// <summary>
        /// <para>List of values for SAFETY FACILITies.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("SafetyFacilityList")]
        public System.Collections.ObjectModel.Collection<string> SafetyFacilityList
        {
            get
            {
                return _safetyFacilityList;
            }
            private set
            {
                _safetyFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SafetyFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SafetyFacilityListSpecified
        {
            get
            {
                return (this.SafetyFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _sanitaryFacilityList;
        
        /// <summary>
        /// <para>List of Sanitary Facilities.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("SanitaryFacilityList")]
        public System.Collections.ObjectModel.Collection<string> SanitaryFacilityList
        {
            get
            {
                return _sanitaryFacilityList;
            }
            private set
            {
                _sanitaryFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SanitaryFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SanitaryFacilityListSpecified
        {
            get
            {
                return (this.SanitaryFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _ticketingFacilityList;
        
        /// <summary>
        /// <para>List of values for TICKETING FACILITies.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TicketingFacilityList")]
        public System.Collections.ObjectModel.Collection<string> TicketingFacilityList
        {
            get
            {
                return _ticketingFacilityList;
            }
            private set
            {
                _ticketingFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TicketingFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TicketingFacilityListSpecified
        {
            get
            {
                return (this.TicketingFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _ticketingServiceFacilityList;
        
        /// <summary>
        /// <para>List of Ticketing Services.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TicketingServiceFacilityList")]
        public System.Collections.ObjectModel.Collection<string> TicketingServiceFacilityList
        {
            get
            {
                return _ticketingServiceFacilityList;
            }
            private set
            {
                _ticketingServiceFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TicketingServiceFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TicketingServiceFacilityListSpecified
        {
            get
            {
                return (this.TicketingServiceFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _vehicleAccessFacilityList;
        
        /// <summary>
        /// <para>List of Vehicle Access FACILITies. +v1.1</para>
        /// <para>List of values for VEHICLE ACCESS FACILITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of Vehicle Access FACILITies. +v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("VehicleAccessFacilityList")]
        public System.Collections.ObjectModel.Collection<string> VehicleAccessFacilityList
        {
            get
            {
                return _vehicleAccessFacilityList;
            }
            private set
            {
                _vehicleAccessFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the VehicleAccessFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VehicleAccessFacilityListSpecified
        {
            get
            {
                return (this.VehicleAccessFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _accommodationAccessList;
        
        /// <summary>
        /// <para>List of ACCOMMODATION Access rights.</para>
        /// <para>List of values for ACCOMMODATION ACCESS.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of ACCOMMODATION Access rights.")]
        [System.Xml.Serialization.XmlElementAttribute("AccommodationAccessList")]
        public System.Collections.ObjectModel.Collection<string> AccommodationAccessList
        {
            get
            {
                return _accommodationAccessList;
            }
            private set
            {
                _accommodationAccessList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AccommodationAccessList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccommodationAccessListSpecified
        {
            get
            {
                return (this.AccommodationAccessList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _accommodationFacilityList;
        
        /// <summary>
        /// <para>List of Accommodation FACILITies.</para>
        /// <para>List of values for ACCOMMODATION FACILITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of Accommodation FACILITies.")]
        [System.Xml.Serialization.XmlElementAttribute("AccommodationFacilityList")]
        public System.Collections.ObjectModel.Collection<string> AccommodationFacilityList
        {
            get
            {
                return _accommodationFacilityList;
            }
            private set
            {
                _accommodationFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AccommodationFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccommodationFacilityListSpecified
        {
            get
            {
                return (this.AccommodationFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BoardingPermission")]
        public BoardingPermissionEnumeration BoardingPermission { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BoardingPermission property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BoardingPermissionSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _bookingProcessFacilityList;
        
        /// <summary>
        /// <para>List of values for BOOKING PROCESS FACILITY UIC 7037 Code list.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("BookingProcessFacilityList")]
        public System.Collections.ObjectModel.Collection<string> BookingProcessFacilityList
        {
            get
            {
                return _bookingProcessFacilityList;
            }
            private set
            {
                _bookingProcessFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BookingProcessFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BookingProcessFacilityListSpecified
        {
            get
            {
                return (this.BookingProcessFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _couchetteFacilityList;
        
        /// <summary>
        /// <para>List of values for COUCHETTE FACILITY.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("CouchetteFacilityList")]
        public System.Collections.ObjectModel.Collection<string> CouchetteFacilityList
        {
            get
            {
                return _couchetteFacilityList;
            }
            private set
            {
                _couchetteFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the CouchetteFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CouchetteFacilityListSpecified
        {
            get
            {
                return (this.CouchetteFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("GroupBookingFacility")]
        public GroupBookingEnumeration GroupBookingFacility { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GroupBookingFacility property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GroupBookingFacilitySpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _luggageCarriageFacilityList;
        
        /// <summary>
        /// <para>List of values for LUGGAGE CARRIAGE FACILITY.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("LuggageCarriageFacilityList")]
        public System.Collections.ObjectModel.Collection<string> LuggageCarriageFacilityList
        {
            get
            {
                return _luggageCarriageFacilityList;
            }
            private set
            {
                _luggageCarriageFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LuggageCarriageFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LuggageCarriageFacilityListSpecified
        {
            get
            {
                return (this.LuggageCarriageFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _serviceReservationFacilityList;
        
        /// <summary>
        /// <para>List of values for RESERVATION FACILITY UIC 7037 Code list.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ServiceReservationFacilityList")]
        public System.Collections.ObjectModel.Collection<string> ServiceReservationFacilityList
        {
            get
            {
                return _serviceReservationFacilityList;
            }
            private set
            {
                _serviceReservationFacilityList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ServiceReservationFacilityList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceReservationFacilityListSpecified
        {
            get
            {
                return (this.ServiceReservationFacilityList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _uicProductCharacteristicList;
        
        /// <summary>
        /// <para>List of values for UIC Product Characteristics UIC 7139 Code list.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("UicProductCharacteristicList")]
        public System.Collections.ObjectModel.Collection<string> UicProductCharacteristicList
        {
            get
            {
                return _uicProductCharacteristicList;
            }
            private set
            {
                _uicProductCharacteristicList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the UicProductCharacteristicList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UicProductCharacteristicListSpecified
        {
            get
            {
                return (this.UicProductCharacteristicList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("UicTrainRate")]
        public UicRateTypeEnumeration UicTrainRate { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UicTrainRate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UicTrainRateSpecified { get; set; }
        
        /// <summary>
        /// <para>Accommodation available on service.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Accommodation available on service.")]
        [System.Xml.Serialization.XmlElementAttribute("accommodations")]
        public AccommodationsRelStructure Accommodations { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. Permission to stay on board the service.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Permission to stay on board the service.")]
        [System.Xml.Serialization.XmlElementAttribute("onboardStays")]
        public OnboardStaysRelStructure OnboardStays { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Facilities that apply to services.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Facilities that apply to services.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IServiceFacilityGroup
    {
        
        /// <summary>
        /// <para>List of Vehicle Access FACILITies. +v1.1</para>
        /// <para>List of values for VEHICLE ACCESS FACILITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of Vehicle Access FACILITies. +v1.1")]
        System.Collections.ObjectModel.Collection<string> VehicleAccessFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of ACCOMMODATION Access rights.</para>
        /// <para>List of values for ACCOMMODATION ACCESS.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of ACCOMMODATION Access rights.")]
        System.Collections.ObjectModel.Collection<string> AccommodationAccessList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of Accommodation FACILITies.</para>
        /// <para>List of values for ACCOMMODATION FACILITY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of Accommodation FACILITies.")]
        System.Collections.ObjectModel.Collection<string> AccommodationFacilityList
        {
            get;
        }
        
        BoardingPermissionEnumeration BoardingPermission
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>List of values for BOOKING PROCESS FACILITY UIC 7037 Code list.</para>
        /// </summary>
        System.Collections.ObjectModel.Collection<string> BookingProcessFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of values for COUCHETTE FACILITY.</para>
        /// </summary>
        System.Collections.ObjectModel.Collection<string> CouchetteFacilityList
        {
            get;
        }
        
        GroupBookingEnumeration GroupBookingFacility
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>List of values for LUGGAGE CARRIAGE FACILITY.</para>
        /// </summary>
        System.Collections.ObjectModel.Collection<string> LuggageCarriageFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of values for RESERVATION FACILITY UIC 7037 Code list.</para>
        /// </summary>
        System.Collections.ObjectModel.Collection<string> ServiceReservationFacilityList
        {
            get;
        }
        
        /// <summary>
        /// <para>List of values for UIC Product Characteristics UIC 7139 Code list.</para>
        /// </summary>
        System.Collections.ObjectModel.Collection<string> UicProductCharacteristicList
        {
            get;
        }
        
        UicRateTypeEnumeration UicTrainRate
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Allowed values for Group Booking.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Group Booking.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GroupBookingEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("GroupBookingFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum GroupBookingEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("groupsAllowed")]
        GroupsAllowed,
        
        [System.Xml.Serialization.XmlEnumAttribute("groupsNotAllowed")]
        GroupsNotAllowed,
        
        [System.Xml.Serialization.XmlEnumAttribute("groupsAllowedWithReservation")]
        GroupsAllowedWithReservation,
        
        [System.Xml.Serialization.XmlEnumAttribute("groupBookingsRestricted")]
        GroupBookingsRestricted,
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
    }
    
    /// <summary>
    /// <para>UIC Rate Type UIC 5263Code list.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("UIC Rate Type UIC 5263Code list.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("UicRateTypeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("UicTrainRate", Namespace="http://www.netex.org.uk/netex")]
    public enum UicRateTypeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("normal")]
        Normal,
        
        [System.Xml.Serialization.XmlEnumAttribute("discountInTrainOtherThanTGV")]
        DiscountInTrainOtherThanTgv,
        
        [System.Xml.Serialization.XmlEnumAttribute("specialFare")]
        SpecialFare,
        
        [System.Xml.Serialization.XmlEnumAttribute("supplement")]
        Supplement,
        
        [System.Xml.Serialization.XmlEnumAttribute("noPublishedTariff")]
        NoPublishedTariff,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("accommodations_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("accommodations", Namespace="http://www.netex.org.uk/netex")]
    public partial class AccommodationsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<AccommodationVersionStructure> _accommodation;
        
        /// <summary>
        /// <para>Allowed combinations of accommodation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Allowed combinations of accommodation.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Accommodation")]
        public System.Collections.ObjectModel.Collection<AccommodationVersionStructure> Accommodation
        {
            get
            {
                return _accommodation;
            }
            private set
            {
                _accommodation = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="AccommodationsRelStructure" /> class.</para>
        /// </summary>
        public AccommodationsRelStructure()
        {
            this._accommodation = new System.Collections.ObjectModel.Collection<AccommodationVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>Type for containment in frame of SERVICE FACILITY SETs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for containment in frame of SERVICE FACILITY SETs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("onboardStays_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OnboardStaysRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<OnboardStayVersionStructure> _onboardStay;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("OnboardStay")]
        public System.Collections.ObjectModel.Collection<OnboardStayVersionStructure> OnboardStay
        {
            get
            {
                return _onboardStay;
            }
            private set
            {
                _onboardStay = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="OnboardStaysRelStructure" /> class.</para>
        /// </summary>
        public OnboardStaysRelStructure()
        {
            this._onboardStay = new System.Collections.ObjectModel.Collection<OnboardStayVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>Elements specifying Requirement properties of VEHICLE TYPE. Vehicle should satisfy these requirements.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements specifying Requirement properties of VEHICLE TYPE. Vehicle should satisf" +
        "y these requirements.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IVehicleAccessibilityRequirementsGroup
    {
        
        /// <summary>
        /// <para>Whether Vehicle is low floor to facilitate access by the mobility impaired.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether Vehicle is low floor to facilitate access by the mobility impaired.")]
        bool LowFloor
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether vehicle has lift or ramp to facilitate wheelchair access.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether vehicle has lift or ramp to facilitate wheelchair access.")]
        bool HasLiftOrRamp
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether vehicle has hoist for wheelchair access.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether vehicle has hoist for wheelchair access.")]
        bool HasHoist
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.          Maximum step height to board. +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum step height to board. +v1.1")]
        decimal BoardingHeight
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.            Expected maximal gap between VEHICLE and platform. +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Expected maximal gap between VEHICLE and platform. +v1.1")]
        decimal GapToPlatform
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>DimensionElements for a VEHICLE TYPE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("DimensionElements for a VEHICLE TYPE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IVehicleDimensionsGroup
    {
        
        /// <summary>
        /// <para>The length of a VEHICLE of the type.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The length of a VEHICLE of the type.")]
        decimal Length
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>The width of a VEHICLE of the type. +v1.1</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The width of a VEHICLE of the type. +v1.1")]
        decimal Width
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>The length of a VEHICLE of the type. +v1.1</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The length of a VEHICLE of the type. +v1.1")]
        decimal Height
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>The weight of a VEHICLE of the type. +v1.1</para>
        /// <para>Weight type for mass. System for Units can be specified on Frame. Normal default is (kilos) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The weight of a VEHICLE of the type. +v1.1")]
        decimal Weight
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Element for COMPOUND TRAIN.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Element for COMPOUND TRAIN.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ICompoundTrainGroup
    {
        
        /// <summary>
        /// <para>Ordered collection of TRAIN in COMPOUND TRAINs making up COMPOUND TRAIN. Each references a TRAIN.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Ordered collection of TRAIN in COMPOUND TRAINs making up COMPOUND TRAIN. Each ref" +
            "erences a TRAIN.")]
        System.Collections.ObjectModel.Collection<TrainInCompoundTrainVersionedChildStructure> Components
        {
            get;
        }
    }
    
    /// <summary>
    /// <para>Type for a list of TRAIN IN COMPOUND TRAIN.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a list of TRAIN IN COMPOUND TRAIN.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("trainsInCompoundTrain_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TrainsInCompoundTrainRelStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TrainInCompoundTrainVersionedChildStructure> _trainInCompoundTrain;
        
        /// <summary>
        /// <para>An instance of a TRAIN making up a COMPOUND TRAIN.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("An instance of a TRAIN making up a COMPOUND TRAIN.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TrainInCompoundTrain")]
        public System.Collections.ObjectModel.Collection<TrainInCompoundTrainVersionedChildStructure> TrainInCompoundTrain
        {
            get
            {
                return _trainInCompoundTrain;
            }
            private set
            {
                _trainInCompoundTrain = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TrainsInCompoundTrainRelStructure" /> class.</para>
        /// </summary>
        public TrainsInCompoundTrainRelStructure()
        {
            this._trainInCompoundTrain = new System.Collections.ObjectModel.Collection<TrainInCompoundTrainVersionedChildStructure>();
        }
    }
    
    /// <summary>
    /// <para>Type for a TRAIN IN COMPOUND TRAIN.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a TRAIN IN COMPOUND TRAIN.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TrainInCompoundTrain_VersionedChildStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TrainInCompoundTrainVersionedChildStructure : IVersionedChildElementGroup, ITrainInCompoundTrainGroup, IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TrainInCompoundTrainVersionedChildStructure" /> class.</para>
        /// </summary>
        public TrainInCompoundTrainVersionedChildStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        /// <summary>
        /// <para>Description of TRAIN IN COMPOUND TRAIN.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of TRAIN IN COMPOUND TRAIN.")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Reference to a TRAIN ELEMENT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a TRAIN ELEMENT.")]
        [System.Xml.Serialization.XmlElementAttribute("CompoundTrainRef")]
        public CompoundTrainRefStructure CompoundTrainRef { get; set; }
        
        /// <summary>
        /// <para>Reference to a TRAIN.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a TRAIN.")]
        [System.Xml.Serialization.XmlElementAttribute("TrainRef")]
        public TrainRefStructure TrainRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Train")]
        public TrainVersionStructure Train { get; set; }
        
        /// <summary>
        /// <para>Label for TRAIN IN COMPOUND TRAIN.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Label for TRAIN IN COMPOUND TRAIN.")]
        [System.Xml.Serialization.XmlElementAttribute("Label")]
        public MultilingualString Label { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private VehicleOrientationEnumeration _operationalOrientation = Netex.VehicleOrientationEnumeration.Forwards;
        
        /// <summary>
        /// <para>Orientation of the  TRAIN IN COMPOUND TRAIN</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.VehicleOrientationEnumeration.Forwards)]
        [System.ComponentModel.DescriptionAttribute("Orientation of the TRAIN IN COMPOUND TRAIN")]
        [System.Xml.Serialization.XmlElementAttribute("OperationalOrientation")]
        public VehicleOrientationEnumeration OperationalOrientation
        {
            get
            {
                return _operationalOrientation;
            }
            set
            {
                _operationalOrientation = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _reversedOrientation = false;
        
        /// <summary>
        /// <para>Whether the component order of the TRAIN IN COMPOUND TRAIN is reversed compared to the order in the TRAIN.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Whether the component order of the TRAIN IN COMPOUND TRAIN is reversed compared t" +
            "o the order in the TRAIN.")]
        [System.Xml.Serialization.XmlElementAttribute("ReversedOrientation")]
        public bool ReversedOrientation
        {
            get
            {
                return _reversedOrientation;
            }
            set
            {
                _reversedOrientation = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Order of TRAIN IN COMPOUND TRAIN within TRAIN.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Order of TRAIN IN COMPOUND TRAIN within TRAIN.")]
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public string Order { get; set; }
    }
    
    /// <summary>
    /// <para>Elements for a TRAIN IN COMPOUND TRAIN.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for a TRAIN IN COMPOUND TRAIN.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ITrainInCompoundTrainGroup
    {
        
        /// <summary>
        /// <para>Description of TRAIN IN COMPOUND TRAIN.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of TRAIN IN COMPOUND TRAIN.")]
        MultilingualString Description
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Reference to a TRAIN ELEMENT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a TRAIN ELEMENT.")]
        CompoundTrainRefStructure CompoundTrainRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Reference to a TRAIN.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a TRAIN.")]
        TrainRefStructure TrainRef
        {
            get;
            set;
        }
        
        TrainVersionStructure Train
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Label for TRAIN IN COMPOUND TRAIN.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Label for TRAIN IN COMPOUND TRAIN.")]
        MultilingualString Label
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Orientation of the  TRAIN IN COMPOUND TRAIN</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.VehicleOrientationEnumeration.Forwards)]
        [System.ComponentModel.DescriptionAttribute("Orientation of the TRAIN IN COMPOUND TRAIN")]
        VehicleOrientationEnumeration OperationalOrientation
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether the component order of the TRAIN IN COMPOUND TRAIN is reversed compared to the order in the TRAIN.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Whether the component order of the TRAIN IN COMPOUND TRAIN is reversed compared t" +
            "o the order in the TRAIN.")]
        bool ReversedOrientation
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CompoundTrainRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("CompoundTrainRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class CompoundTrainRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>A vehicle composed of TRAIN ELEMENTs in a certain order, i.e. of wagons assembled together and propelled by a locomotive or one of the wagons.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A vehicle composed of TRAIN ELEMENTs in a certain order, i.e. of wagons assembled" +
        " together and propelled by a locomotive or one of the wagons.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Train_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Train", Namespace="http://www.netex.org.uk/netex")]
    public partial class TrainVersionStructure : IDataManagedObjectElementGroup, IVehicleTypePropertiesGroup, ITrainGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TrainVersionStructure" /> class.</para>
        /// </summary>
        public TrainVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _reversingDirection = true;
        
        /// <summary>
        /// <para>Not in EPIP.              Whether vehicles of the type have a reversing direction.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether vehicles of the type have a reversing direction.")]
        [System.Xml.Serialization.XmlElementAttribute("ReversingDirection")]
        public bool ReversingDirection
        {
            get
            {
                return _reversingDirection;
            }
            set
            {
                _reversingDirection = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _selfPropelled = true;
        
        /// <summary>
        /// <para>Whether vehicles of the type are self-propelled.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Whether vehicles of the type are self-propelled.")]
        [System.Xml.Serialization.XmlElementAttribute("SelfPropelled")]
        public bool SelfPropelled
        {
            get
            {
                return _selfPropelled;
            }
            set
            {
                _selfPropelled = value;
            }
        }
        
        /// <summary>
        /// <para>The type of fuel used by a vehicle of the type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The type of fuel used by a vehicle of the type.")]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfFuel")]
        public string TypeOfFuel { get; set; }
        
        /// <summary>
        /// <para>Euroclass of the vehicle type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Euroclass of the vehicle type.")]
        [System.Xml.Serialization.XmlElementAttribute("EuroClass")]
        public string EuroClass { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.                 Total Number of passengers that VEHICLE TYPE. can carry.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Total Number of passengers that VEHICLE TYPE. can carry.")]
        [System.Xml.Serialization.XmlElementAttribute("PassengerCapacity")]
        public PassengerCapacityVersionStructure PassengerCapacity { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("capacities")]
        public CapacitiesRelStructure Capacities { get; set; }
        
        /// <summary>
        /// <para>Whether Vehicle is low floor to facilitate access by the mobility impaired.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether Vehicle is low floor to facilitate access by the mobility impaired.")]
        [System.Xml.Serialization.XmlElementAttribute("LowFloor")]
        public bool LowFloor { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LowFloor property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LowFloorSpecified { get; set; }
        
        /// <summary>
        /// <para>Whether vehicle has lift or ramp to facilitate wheelchair access.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether vehicle has lift or ramp to facilitate wheelchair access.")]
        [System.Xml.Serialization.XmlElementAttribute("HasLiftOrRamp")]
        public bool HasLiftOrRamp { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HasLiftOrRamp property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HasLiftOrRampSpecified { get; set; }
        
        /// <summary>
        /// <para>Whether vehicle has hoist for wheelchair access.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether vehicle has hoist for wheelchair access.")]
        [System.Xml.Serialization.XmlElementAttribute("HasHoist")]
        public bool HasHoist { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HasHoist property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HasHoistSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.          Maximum step height to board. +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum step height to board. +v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("BoardingHeight")]
        public decimal BoardingHeight { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BoardingHeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BoardingHeightSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.            Expected maximal gap between VEHICLE and platform. +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Expected maximal gap between VEHICLE and platform. +v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("GapToPlatform")]
        public decimal GapToPlatform { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GapToPlatform property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GapToPlatformSpecified { get; set; }
        
        /// <summary>
        /// <para>The length of a VEHICLE of the type.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The length of a VEHICLE of the type.")]
        [System.Xml.Serialization.XmlElementAttribute("Length")]
        public decimal Length { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Length property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LengthSpecified { get; set; }
        
        /// <summary>
        /// <para>The width of a VEHICLE of the type. +v1.1</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The width of a VEHICLE of the type. +v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("Width")]
        public decimal Width { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Width property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WidthSpecified { get; set; }
        
        /// <summary>
        /// <para>The length of a VEHICLE of the type. +v1.1</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The length of a VEHICLE of the type. +v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("Height")]
        public decimal Height { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Height property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HeightSpecified { get; set; }
        
        /// <summary>
        /// <para>The weight of a VEHICLE of the type. +v1.1</para>
        /// <para>Weight type for mass. System for Units can be specified on Frame. Normal default is (kilos) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The weight of a VEHICLE of the type. +v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("Weight")]
        public decimal Weight { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Weight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WeightSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. Facilities of VEHICLE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Facilities of VEHICLE.")]
        [System.Xml.Serialization.XmlElementAttribute("facilities")]
        public ServiceFacilitiesRelStructure Facilities { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TrainSize")]
        public TrainSizeStructure TrainSize { get; set; }
        
        /// <summary>
        /// <para>Ordered collection of TRAIN COMPONENTs making up TRAIN.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Ordered collection of TRAIN COMPONENTs making up TRAIN.")]
        [System.Xml.Serialization.XmlElementAttribute("components")]
        public TrainComponentsRelStructure Components { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Element for TRAIN.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Element for TRAIN.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ITrainGroup
    {
        
        TrainSizeStructure TrainSize
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Ordered collection of TRAIN COMPONENTs making up TRAIN.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Ordered collection of TRAIN COMPONENTs making up TRAIN.")]
        TrainComponentsRelStructure Components
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Type for a TRAIN SIZE REQUIREMENT.</para>
    /// <para>Requirements for TRAIN SIZe.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a TRAIN SIZE REQUIREMENT.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TrainSizeStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TrainSize", Namespace="http://www.netex.org.uk/netex")]
    public partial class TrainSizeStructure
    {
        
        /// <summary>
        /// <para>Number of cars needed in TRAIN.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Number of cars needed in TRAIN.")]
        [System.Xml.Serialization.XmlElementAttribute("NumberOfCars")]
        public string NumberOfCars { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private TrainSizeEnumeration _trainSizeType = Netex.TrainSizeEnumeration.Normal;
        
        /// <summary>
        /// <para>Nature of Train Size., Short, long, normal. Default is normal.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.TrainSizeEnumeration.Normal)]
        [System.ComponentModel.DescriptionAttribute("Nature of Train Size., Short, long, normal. Default is normal.")]
        [System.Xml.Serialization.XmlElementAttribute("TrainSizeType")]
        public TrainSizeEnumeration TrainSizeType
        {
            get
            {
                return _trainSizeType;
            }
            set
            {
                _trainSizeType = value;
            }
        }
    }
    
    /// <summary>
    /// <para>Allowed values for TYPE OF TRAIIN ELEMENT.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for TYPE OF TRAIIN ELEMENT.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TrainSizeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum TrainSizeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("normal")]
        Normal,
        
        [System.Xml.Serialization.XmlEnumAttribute("short")]
        Short,
        
        [System.Xml.Serialization.XmlEnumAttribute("long")]
        Long,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("trainComponents_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TrainComponentsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TrainComponentVersionStructure> _trainComponent;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TrainComponent")]
        public System.Collections.ObjectModel.Collection<TrainComponentVersionStructure> TrainComponent
        {
            get
            {
                return _trainComponent;
            }
            private set
            {
                _trainComponent = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TrainComponentsRelStructure" /> class.</para>
        /// </summary>
        public TrainComponentsRelStructure()
        {
            this._trainComponent = new System.Collections.ObjectModel.Collection<TrainComponentVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>Specification of the order of TRAIN ELEMENTs in a TRAIN.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Specification of the order of TRAIN ELEMENTs in a TRAIN.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TrainComponent_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TrainComponent", Namespace="http://www.netex.org.uk/netex")]
    public partial class TrainComponentVersionStructure : IDataManagedObjectElementGroup, ITrainComponentGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TrainComponentVersionStructure" /> class.</para>
        /// </summary>
        public TrainComponentVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Label for TRAIN COMPONENT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Label for TRAIN COMPONENT.")]
        [System.Xml.Serialization.XmlElementAttribute("Label")]
        public MultilingualString Label { get; set; }
        
        /// <summary>
        /// <para>Description of TRAIN COMPONENT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of TRAIN COMPONENT.")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TrainElement")]
        public TrainElementVersionStructure TrainElement { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private VehicleOrientationEnumeration _operationalOrientation = Netex.VehicleOrientationEnumeration.Forwards;
        
        /// <summary>
        /// <para>Not in EPIP. Orientation of the  TRAIN ELEMENT within the TRAIN. +v1.1.                                Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.VehicleOrientationEnumeration.Forwards)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Orientation of the TRAIN ELEMENT within the TRAIN. +v1.1. Not in EPI" +
            "P")]
        [System.Xml.Serialization.XmlElementAttribute("OperationalOrientation")]
        public VehicleOrientationEnumeration OperationalOrientation
        {
            get
            {
                return _operationalOrientation;
            }
            set
            {
                _operationalOrientation = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
        
        /// <summary>
        /// <para>Order of TRAIN COMPONENT within TRAIN</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Order of TRAIN COMPONENT within TRAIN")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public string Order { get; set; }
    }
    
    /// <summary>
    /// <para>Elements for a TRAIN COMPONENT.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for a TRAIN COMPONENT.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ITrainComponentGroup
    {
        
        /// <summary>
        /// <para>Label for TRAIN COMPONENT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Label for TRAIN COMPONENT.")]
        MultilingualString Label
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Description of TRAIN COMPONENT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of TRAIN COMPONENT.")]
        MultilingualString Description
        {
            get;
            set;
        }
        
        TrainElementVersionStructure TrainElement
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP. Orientation of the  TRAIN ELEMENT within the TRAIN. +v1.1.                                Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.VehicleOrientationEnumeration.Forwards)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Orientation of the TRAIN ELEMENT within the TRAIN. +v1.1. Not in EPI" +
            "P")]
        VehicleOrientationEnumeration OperationalOrientation
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>An elementary component of a TRAIN (e.g. wagon, locomotive).</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("An elementary component of a TRAIN (e.g. wagon, locomotive).")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TrainElement_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TrainElement", Namespace="http://www.netex.org.uk/netex")]
    public partial class TrainElementVersionStructure : IDataManagedObjectElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TrainElementVersionStructure" /> class.</para>
        /// </summary>
        public TrainElementVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._fareClasses = new System.Collections.ObjectModel.Collection<string>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of TRAIN ELEMENT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of TRAIN ELEMENT.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Description of TRAIN ELEMENT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of TRAIN ELEMENT.")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Type of TRAIN ELEMENT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type of TRAIN ELEMENT.")]
        [System.Xml.Serialization.XmlElementAttribute("TrainElementType")]
        public TrainElementTypeEnumeration TrainElementType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TrainElementType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TrainElementTypeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _fareClasses;
        
        /// <summary>
        /// <para>List of values for FARE CLASSes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("FareClasses")]
        public System.Collections.ObjectModel.Collection<string> FareClasses
        {
            get
            {
                return _fareClasses;
            }
            private set
            {
                _fareClasses = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FareClasses collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FareClassesSpecified
        {
            get
            {
                return (this.FareClasses.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Allowed values for TYPE OF TRAIIN ELEMENT.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for TYPE OF TRAIIN ELEMENT.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TrainElementTypeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum TrainElementTypeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("buffetCar")]
        BuffetCar,
        
        [System.Xml.Serialization.XmlEnumAttribute("carriage")]
        Carriage,
        
        [System.Xml.Serialization.XmlEnumAttribute("engine")]
        Engine,
        
        [System.Xml.Serialization.XmlEnumAttribute("carTransporter")]
        CarTransporter,
        
        [System.Xml.Serialization.XmlEnumAttribute("sleeperCarriage")]
        SleeperCarriage,
        
        [System.Xml.Serialization.XmlEnumAttribute("luggageVan")]
        LuggageVan,
        
        [System.Xml.Serialization.XmlEnumAttribute("restaurantCarriage")]
        RestaurantCarriage,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Allowed values for Vehicle Orientation.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Vehicle Orientation.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("VehicleOrientationEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum VehicleOrientationEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("forwards")]
        Forwards,
        
        [System.Xml.Serialization.XmlEnumAttribute("backwards")]
        Backwards,
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("VehicleType_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("VehicleType", Namespace="http://www.netex.org.uk/netex")]
    public partial class VehicleTypeVersionStructure : IDataManagedObjectElementGroup, IVehicleTypePropertiesGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="VehicleTypeVersionStructure" /> class.</para>
        /// </summary>
        public VehicleTypeVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _reversingDirection = true;
        
        /// <summary>
        /// <para>Not in EPIP.              Whether vehicles of the type have a reversing direction.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether vehicles of the type have a reversing direction.")]
        [System.Xml.Serialization.XmlElementAttribute("ReversingDirection")]
        public bool ReversingDirection
        {
            get
            {
                return _reversingDirection;
            }
            set
            {
                _reversingDirection = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _selfPropelled = true;
        
        /// <summary>
        /// <para>Whether vehicles of the type are self-propelled.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Whether vehicles of the type are self-propelled.")]
        [System.Xml.Serialization.XmlElementAttribute("SelfPropelled")]
        public bool SelfPropelled
        {
            get
            {
                return _selfPropelled;
            }
            set
            {
                _selfPropelled = value;
            }
        }
        
        /// <summary>
        /// <para>The type of fuel used by a vehicle of the type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The type of fuel used by a vehicle of the type.")]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfFuel")]
        public string TypeOfFuel { get; set; }
        
        /// <summary>
        /// <para>Euroclass of the vehicle type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Euroclass of the vehicle type.")]
        [System.Xml.Serialization.XmlElementAttribute("EuroClass")]
        public string EuroClass { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.                 Total Number of passengers that VEHICLE TYPE. can carry.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Total Number of passengers that VEHICLE TYPE. can carry.")]
        [System.Xml.Serialization.XmlElementAttribute("PassengerCapacity")]
        public PassengerCapacityVersionStructure PassengerCapacity { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("capacities")]
        public CapacitiesRelStructure Capacities { get; set; }
        
        /// <summary>
        /// <para>Whether Vehicle is low floor to facilitate access by the mobility impaired.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether Vehicle is low floor to facilitate access by the mobility impaired.")]
        [System.Xml.Serialization.XmlElementAttribute("LowFloor")]
        public bool LowFloor { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LowFloor property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LowFloorSpecified { get; set; }
        
        /// <summary>
        /// <para>Whether vehicle has lift or ramp to facilitate wheelchair access.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether vehicle has lift or ramp to facilitate wheelchair access.")]
        [System.Xml.Serialization.XmlElementAttribute("HasLiftOrRamp")]
        public bool HasLiftOrRamp { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HasLiftOrRamp property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HasLiftOrRampSpecified { get; set; }
        
        /// <summary>
        /// <para>Whether vehicle has hoist for wheelchair access.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether vehicle has hoist for wheelchair access.")]
        [System.Xml.Serialization.XmlElementAttribute("HasHoist")]
        public bool HasHoist { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HasHoist property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HasHoistSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.          Maximum step height to board. +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum step height to board. +v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("BoardingHeight")]
        public decimal BoardingHeight { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BoardingHeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BoardingHeightSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.            Expected maximal gap between VEHICLE and platform. +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Expected maximal gap between VEHICLE and platform. +v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("GapToPlatform")]
        public decimal GapToPlatform { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GapToPlatform property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GapToPlatformSpecified { get; set; }
        
        /// <summary>
        /// <para>The length of a VEHICLE of the type.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The length of a VEHICLE of the type.")]
        [System.Xml.Serialization.XmlElementAttribute("Length")]
        public decimal Length { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Length property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LengthSpecified { get; set; }
        
        /// <summary>
        /// <para>The width of a VEHICLE of the type. +v1.1</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The width of a VEHICLE of the type. +v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("Width")]
        public decimal Width { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Width property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WidthSpecified { get; set; }
        
        /// <summary>
        /// <para>The length of a VEHICLE of the type. +v1.1</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The length of a VEHICLE of the type. +v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("Height")]
        public decimal Height { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Height property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HeightSpecified { get; set; }
        
        /// <summary>
        /// <para>The weight of a VEHICLE of the type. +v1.1</para>
        /// <para>Weight type for mass. System for Units can be specified on Frame. Normal default is (kilos) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The weight of a VEHICLE of the type. +v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("Weight")]
        public decimal Weight { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Weight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WeightSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. Facilities of VEHICLE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Facilities of VEHICLE.")]
        [System.Xml.Serialization.XmlElementAttribute("facilities")]
        public ServiceFacilitiesRelStructure Facilities { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Route_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Route", Namespace="http://www.netex.org.uk/netex")]
    public partial class RouteVersionStructure : ILinkSequenceElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="RouteVersionStructure" /> class.</para>
        /// </summary>
        public RouteVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._projections = new System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure>();
            this._infoLinks = new System.Collections.ObjectModel.Collection<InfoLinkStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of LINK SEQUENCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of LINK SEQUENCE.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Units are as specified
        ///for Frame. Default is SI Metres.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Units are as specified for Frame. Default is SI Metres.")]
        [System.Xml.Serialization.XmlElementAttribute("Distance")]
        public decimal Distance { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Distance property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DistanceSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure> _projections;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlArrayAttribute("projections")]
        [System.Xml.Serialization.XmlArrayItemAttribute("LinkSequenceProjection", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure> Projections
        {
            get
            {
                return _projections;
            }
            private set
            {
                _projections = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Projections collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProjectionsSpecified
        {
            get
            {
                return (this.Projections.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<InfoLinkStructure> _infoLinks;
        
        /// <summary>
        /// <para>Not in EPIP.                      Hyperlinks associated with presentation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Hyperlinks associated with presentation.")]
        [System.Xml.Serialization.XmlArrayAttribute("infoLinks")]
        [System.Xml.Serialization.XmlArrayItemAttribute("InfoLink", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<InfoLinkStructure> InfoLinks
        {
            get
            {
                return _infoLinks;
            }
            private set
            {
                _infoLinks = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the InfoLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InfoLinksSpecified
        {
            get
            {
                return (this.InfoLinks.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LineRef")]
        public LineRefStructure LineRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("DirectionType")]
        public DirectionTypeEnumeration DirectionType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DirectionType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirectionTypeSpecified { get; set; }
        
        /// <summary>
        /// <para>Reference to a DIRECTION.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a DIRECTION.")]
        [System.Xml.Serialization.XmlElementAttribute("DirectionRef")]
        public DirectionRefStructure DirectionRef { get; set; }
        
        /// <summary>
        /// <para>Ordered set of points making up a ROUTE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Ordered set of points making up a ROUTE.")]
        [System.Xml.Serialization.XmlElementAttribute("pointsInSequence")]
        public RoutePointsInSequenceRelStructure PointsInSequence { get; set; }
        
        /// <summary>
        /// <para>Reference to the corresponding matching ROUTE in the  oppositte direction, if any.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to the corresponding matching ROUTE in the oppositte direction, if any." +
            "")]
        [System.Xml.Serialization.XmlElementAttribute("InverseRouteRef")]
        public RouteRefStructure InverseRouteRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("routePointsInSequence_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RoutePointsInSequenceRelStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PointOnRouteStructure> _pointOnRoute;
        
        /// <summary>
        /// <para>A reference to a ROUTE POINT used to define a ROUTE with its order on that ROUTE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A reference to a ROUTE POINT used to define a ROUTE with its order on that ROUTE." +
            "")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("PointOnRoute")]
        public System.Collections.ObjectModel.Collection<PointOnRouteStructure> PointOnRoute
        {
            get
            {
                return _pointOnRoute;
            }
            private set
            {
                _pointOnRoute = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="RoutePointsInSequenceRelStructure" /> class.</para>
        /// </summary>
        public RoutePointsInSequenceRelStructure()
        {
            this._pointOnRoute = new System.Collections.ObjectModel.Collection<PointOnRouteStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    /// <summary>
    /// <para>A POINT used to define the shape of a ROUTE through the network.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A POINT used to define the shape of a ROUTE through the network.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("RoutePoint_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("RoutePoint", Namespace="http://www.netex.org.uk/netex")]
    public partial class RoutePointVersionStructure : IDataManagedObjectElementGroup, IPointContentGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="RoutePointVersionStructure" /> class.</para>
        /// </summary>
        public RoutePointVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._projections = new System.Collections.ObjectModel.Collection<PointProjectionStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of POINT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of POINT.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Mandatory in EPIP. The position of a POINT with a reference to a given LOCATING SYSTEM (e. g. coordinates).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP. The position of a POINT with a reference to a given LOCATING S" +
            "YSTEM (e. g. coordinates).")]
        [System.Xml.Serialization.XmlElementAttribute("Location")]
        public LocationStructure Location { get; set; }
        
        /// <summary>
        /// <para>Arbitrary alternative identifier for the POINT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Arbitrary alternative identifier for the POINT.")]
        [System.Xml.Serialization.XmlElementAttribute("PointNumber")]
        public string PointNumber { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PointProjectionStructure> _projections;
        
        /// <summary>
        /// <para>PROJECTIONs of POINT onto another ENTITY or layer.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("PROJECTIONs of POINT onto another ENTITY or layer.")]
        [System.Xml.Serialization.XmlArrayAttribute("projections")]
        [System.Xml.Serialization.XmlArrayItemAttribute("PointProjection", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<PointProjectionStructure> Projections
        {
            get
            {
                return _projections;
            }
            private set
            {
                _projections = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Projections collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProjectionsSpecified
        {
            get
            {
                return (this.Projections.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Whether ROUTE POINT is a border crossing, that is a point at which an international boundary between two countries may be crossed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether ROUTE POINT is a border crossing, that is a point at which an internation" +
            "al boundary between two countries may be crossed.")]
        [System.Xml.Serialization.XmlElementAttribute("BorderCrossing")]
        public bool BorderCrossing { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BorderCrossing property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BorderCrossingSpecified { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IPointContentGroup
    {
        
        /// <summary>
        /// <para>Name of POINT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of POINT.")]
        MultilingualString Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Mandatory in EPIP. The position of a POINT with a reference to a given LOCATING SYSTEM (e. g. coordinates).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP. The position of a POINT with a reference to a given LOCATING S" +
            "YSTEM (e. g. coordinates).")]
        LocationStructure Location
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Arbitrary alternative identifier for the POINT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Arbitrary alternative identifier for the POINT.")]
        string PointNumber
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>PROJECTIONs of POINT onto another ENTITY or layer.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("PROJECTIONs of POINT onto another ENTITY or layer.")]
        System.Collections.ObjectModel.Collection<PointProjectionStructure> Projections
        {
            get;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("RouteLink_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("RouteLink", Namespace="http://www.netex.org.uk/netex")]
    public partial class RouteLinkVersionStructure : IDataManagedObjectElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="RouteLinkVersionStructure" /> class.</para>
        /// </summary>
        public RouteLinkVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of LINK.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of LINK.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Mandatory in EPIP. Length of LINK.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP. Length of LINK.")]
        [System.Xml.Serialization.XmlElementAttribute("Distance")]
        public decimal Distance { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Distance property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DistanceSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("LineString", Namespace="http://www.opengis.net/gml/3.2")]
        public Gml.TLineString LineString { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("projections")]
        public LinkProjectionsStructure Projections { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("passingThrough")]
        public PointsOnLinkStructure PassingThrough { get; set; }
        
        /// <summary>
        /// <para>Identifier of ROUTE POINT from which Link starts.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of ROUTE POINT from which Link starts.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("FromPointRef")]
        public RoutePointRefStructure FromPointRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of ROUTE POINT from which Link ends.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of ROUTE POINT from which Link ends.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ToPointRef")]
        public RoutePointRefStructure ToPointRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("OperationalContextRef")]
        public OperationalContextRefStructure OperationalContextRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("pointsOnLinkStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PointsOnLinkStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PointOnLinkStructure> _pointOnLink;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("PointOnLink")]
        public System.Collections.ObjectModel.Collection<PointOnLinkStructure> PointOnLink
        {
            get
            {
                return _pointOnLink;
            }
            private set
            {
                _pointOnLink = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PointsOnLinkStructure" /> class.</para>
        /// </summary>
        public PointsOnLinkStructure()
        {
            this._pointOnLink = new System.Collections.ObjectModel.Collection<PointOnLinkStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PointOnLinkStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("PointOnLink", Namespace="http://www.netex.org.uk/netex")]
    public partial class PointOnLinkStructure : IVersionedChildElementGroup, IPointOnLinkGroup, IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PointOnLinkStructure" /> class.</para>
        /// </summary>
        public PointOnLinkStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        /// <summary>
        /// <para>Name of LINK.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of LINK.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Distance of Point on Link from start of LINK.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Distance of Point on Link from start of LINK.")]
        [System.Xml.Serialization.XmlElementAttribute("DistanceFromStart")]
        public decimal DistanceFromStart { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceFromStart property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DistanceFromStartSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PointRef")]
        public PointRefStructure PointRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("RoutePointRef")]
        public RoutePointRefStructure RoutePointRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Point")]
        public PointVersionStructure Point { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public string Order { get; set; }
    }
    
    /// <summary>
    /// <para>Elements for a POINT ON LINK.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for a POINT ON LINK.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IPointOnLinkGroup
    {
        
        /// <summary>
        /// <para>Name of LINK.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of LINK.")]
        MultilingualString Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Distance of Point on Link from start of LINK.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Distance of Point on Link from start of LINK.")]
        decimal DistanceFromStart
        {
            get;
            set;
        }
        
        PointRefStructure PointRef
        {
            get;
            set;
        }
        
        RoutePointRefStructure RoutePointRef
        {
            get;
            set;
        }
        
        PointVersionStructure Point
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Point_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Point", Namespace="http://www.netex.org.uk/netex")]
    public partial class PointVersionStructure : IDataManagedObjectElementGroup, IPointGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PointVersionStructure" /> class.</para>
        /// </summary>
        public PointVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of POINT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of POINT.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>The position of a POINT with a reference to a given LOCATING SYSTEM (e. g. coordinates).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The position of a POINT with a reference to a given LOCATING SYSTEM (e. g. coordi" +
            "nates).")]
        [System.Xml.Serialization.XmlElementAttribute("Location")]
        public LocationStructure Location { get; set; }
        
        /// <summary>
        /// <para>Arbitrary alternative identifier for the POINT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Arbitrary alternative identifier for the POINT.")]
        [System.Xml.Serialization.XmlElementAttribute("PointNumber")]
        public string PointNumber { get; set; }
        
        /// <summary>
        /// <para>Types of POINT. Used for arbitrary documentation - Specific types of POINTs and LINKs such as ROUTE POINT, TIMING POINT, etc are also proper subtypes of POINT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Types of POINT. Used for arbitrary documentation - Specific types of POINTs and L" +
            "INKs such as ROUTE POINT, TIMING POINT, etc are also proper subtypes of POINT.")]
        [System.Xml.Serialization.XmlElementAttribute("types")]
        public TypeOfPointRefsStructure Types { get; set; }
        
        /// <summary>
        /// <para>PROJECTIONs of POINT onto another ENTITY or layer.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("PROJECTIONs of POINT onto another ENTITY or layer.")]
        [System.Xml.Serialization.XmlElementAttribute("projections")]
        public ProjectionsStructure Projections { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Elements for a POINT.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for a POINT.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IPointGroup
    {
        
        /// <summary>
        /// <para>Name of POINT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of POINT.")]
        MultilingualString Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>The position of a POINT with a reference to a given LOCATING SYSTEM (e. g. coordinates).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The position of a POINT with a reference to a given LOCATING SYSTEM (e. g. coordi" +
            "nates).")]
        LocationStructure Location
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Arbitrary alternative identifier for the POINT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Arbitrary alternative identifier for the POINT.")]
        string PointNumber
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Types of POINT. Used for arbitrary documentation - Specific types of POINTs and LINKs such as ROUTE POINT, TIMING POINT, etc are also proper subtypes of POINT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Types of POINT. Used for arbitrary documentation - Specific types of POINTs and L" +
            "INKs such as ROUTE POINT, TIMING POINT, etc are also proper subtypes of POINT.")]
        TypeOfPointRefsStructure Types
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>PROJECTIONs of POINT onto another ENTITY or layer.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("PROJECTIONs of POINT onto another ENTITY or layer.")]
        ProjectionsStructure Projections
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("typeOfPointRefsStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TypeOfPointRefsStructure
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfPointRef")]
        public TypeOfPointRefStructure TypeOfPointRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TypeOfPointRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TypeOfPointRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TypeOfPointRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("projectionsStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProjectionsStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure> _linkSequenceProjection;
        
        [System.Xml.Serialization.XmlElementAttribute("LinkSequenceProjection")]
        public System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure> LinkSequenceProjection
        {
            get
            {
                return _linkSequenceProjection;
            }
            private set
            {
                _linkSequenceProjection = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LinkSequenceProjection collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LinkSequenceProjectionSpecified
        {
            get
            {
                return (this.LinkSequenceProjection.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ProjectionsStructure" /> class.</para>
        /// </summary>
        public ProjectionsStructure()
        {
            this._linkSequenceProjection = new System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure>();
            this._pointProjection = new System.Collections.ObjectModel.Collection<PointProjectionStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PointProjectionStructure> _pointProjection;
        
        [System.Xml.Serialization.XmlElementAttribute("PointProjection")]
        public System.Collections.ObjectModel.Collection<PointProjectionStructure> PointProjection
        {
            get
            {
                return _pointProjection;
            }
            private set
            {
                _pointProjection = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PointProjection collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PointProjectionSpecified
        {
            get
            {
                return (this.PointProjection.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// <para>A POINT where passengers can board or alight from vehicles.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A POINT where passengers can board or alight from vehicles.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ScheduledStopPoint_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ScheduledStopPoint", Namespace="http://www.netex.org.uk/netex")]
    public partial class ScheduledStopPointVersionStructure : IPointElementGroup, IStopPointPropertiesGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ScheduledStopPointVersionStructure" /> class.</para>
        /// </summary>
        public ScheduledStopPointVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._projections = new System.Collections.ObjectModel.Collection<PointProjectionStructure>();
            this._vehicleModes = new System.Collections.ObjectModel.Collection<string>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Mandatory in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Location")]
        public LocationStructure Location { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PointNumber")]
        public string PointNumber { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PointProjectionStructure> _projections;
        
        [System.Xml.Serialization.XmlArrayAttribute("projections")]
        [System.Xml.Serialization.XmlArrayItemAttribute("PointProjection", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<PointProjectionStructure> Projections
        {
            get
            {
                return _projections;
            }
            private set
            {
                _projections = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Projections collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProjectionsSpecified
        {
            get
            {
                return (this.Projections.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("TimingPointStatus")]
        public TimingPointStatusEnumeration TimingPointStatus { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TimingPointStatus property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimingPointStatusSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("stopAreas")]
        public StopAreaRefsRelStructure StopAreas { get; set; }
        
        /// <summary>
        /// <para>TARIFF ZONEs for SCHEDULED STOP POINT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("TARIFF ZONEs for SCHEDULED STOP POINT.")]
        [System.Xml.Serialization.XmlElementAttribute("tariffZones")]
        public TariffZoneRefsRelStructure TariffZones { get; set; }
        
        /// <summary>
        /// <para>Short name of SCHEDULED STOP POINT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Short name of SCHEDULED STOP POINT.")]
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>A PUBLIC code that uniquely identifies the STOP POINT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A PUBLIC code that uniquely identifies the STOP POINT.")]
        [System.Xml.Serialization.XmlElementAttribute("PublicCode")]
        public PrivateCodeStructure PublicCode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        /// <summary>
        /// <para>Categorisation of SCHEDULED STOP POINT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Categorisation of SCHEDULED STOP POINT.")]
        [System.Xml.Serialization.XmlElementAttribute("StopType")]
        public StopTypeEnumeration StopType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StopType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StopTypeSpecified { get; set; }
        
        /// <summary>
        /// <para>Presentation values to use when rendering STOP POINT such as a colour. and font.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Presentation values to use when rendering STOP POINT such as a colour. and font.")]
        [System.Xml.Serialization.XmlElementAttribute("Presentation")]
        public PresentationStructure Presentation { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _vehicleModes;
        
        /// <summary>
        /// <para>TRANSPORT MODE or MODES of STOP POINT.</para>
        /// <para>Allowed values for List of PT MODES of transport applicable to timetabled public transport.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("TRANSPORT MODE or MODES of STOP POINT.")]
        [System.Xml.Serialization.XmlElementAttribute("VehicleModes")]
        public System.Collections.ObjectModel.Collection<string> VehicleModes
        {
            get
            {
                return _vehicleModes;
            }
            private set
            {
                _vehicleModes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the VehicleModes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VehicleModesSpecified
        {
            get
            {
                return (this.VehicleModes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Default for whether SCHEDULED STOP POINT may be used for alighting. May be overridden on specific services.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default for whether SCHEDULED STOP POINT may be used for alighting. May be overri" +
            "dden on specific services.")]
        [System.Xml.Serialization.XmlElementAttribute("ForAlighting")]
        public bool ForAlighting { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ForAlighting property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ForAlightingSpecified { get; set; }
        
        /// <summary>
        /// <para>Default for whether SCHEDULED STOP POINT may be used for boarding. May be overridden on specific services.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default for whether SCHEDULED STOP POINT may be used for boarding. May be overrid" +
            "den on specific services.")]
        [System.Xml.Serialization.XmlElementAttribute("ForBoarding")]
        public bool ForBoarding { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ForBoarding property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ForBoardingSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _requestStop = false;
        
        /// <summary>
        /// <para>Whether stop is by default a request stop in the timetable. May be overridden in specific SERVICE PATTERNs.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Whether stop is by default a request stop in the timetable. May be overridden in " +
            "specific SERVICE PATTERNs.")]
        [System.Xml.Serialization.XmlElementAttribute("RequestStop")]
        public bool RequestStop
        {
            get
            {
                return _requestStop;
            }
            set
            {
                _requestStop = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private RequestMethodTypeEnumeration _requestMethodType = Netex.RequestMethodTypeEnumeration.NoneRequired;
        
        /// <summary>
        /// <para>Method of request stop. Default is noneRequired. + v1.1</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.RequestMethodTypeEnumeration.NoneRequired)]
        [System.ComponentModel.DescriptionAttribute("Method of request stop. Default is noneRequired. + v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("RequestMethodType")]
        public RequestMethodTypeEnumeration RequestMethodType
        {
            get
            {
                return _requestMethodType;
            }
            set
            {
                _requestMethodType = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("TopographicPlaceRef")]
        public TopographicPlaceRefStructure TopographicPlaceRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IPointElementGroup : IDataManagedObjectElementGroup
    {
        
        MultilingualString Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Mandatory in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP")]
        LocationStructure Location
        {
            get;
            set;
        }
        
        string PointNumber
        {
            get;
            set;
        }
        
        System.Collections.ObjectModel.Collection<PointProjectionStructure> Projections
        {
            get;
        }
    }
    
    /// <summary>
    /// <para>Elements for properties of a SCHEDULED STOP POINT.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for properties of a SCHEDULED STOP POINT.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IStopPointPropertiesGroup
    {
        
        /// <summary>
        /// <para>TRANSPORT MODE or MODES of STOP POINT.</para>
        /// <para>Allowed values for List of PT MODES of transport applicable to timetabled public transport.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("TRANSPORT MODE or MODES of STOP POINT.")]
        System.Collections.ObjectModel.Collection<string> VehicleModes
        {
            get;
        }
        
        /// <summary>
        /// <para>Default for whether SCHEDULED STOP POINT may be used for alighting. May be overridden on specific services.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default for whether SCHEDULED STOP POINT may be used for alighting. May be overri" +
            "dden on specific services.")]
        bool ForAlighting
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Default for whether SCHEDULED STOP POINT may be used for boarding. May be overridden on specific services.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default for whether SCHEDULED STOP POINT may be used for boarding. May be overrid" +
            "den on specific services.")]
        bool ForBoarding
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether stop is by default a request stop in the timetable. May be overridden in specific SERVICE PATTERNs.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Whether stop is by default a request stop in the timetable. May be overridden in " +
            "specific SERVICE PATTERNs.")]
        bool RequestStop
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Method of request stop. Default is noneRequired. + v1.1</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.RequestMethodTypeEnumeration.NoneRequired)]
        [System.ComponentModel.DescriptionAttribute("Method of request stop. Default is noneRequired. + v1.1")]
        RequestMethodTypeEnumeration RequestMethodType
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Allowed values for TYPE OF TIMING POINT.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for TYPE OF TIMING POINT.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TimingPointStatusEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum TimingPointStatusEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("timingPoint")]
        TimingPoint,
        
        [System.Xml.Serialization.XmlEnumAttribute("secondaryTimingPoint")]
        SecondaryTimingPoint,
        
        [System.Xml.Serialization.XmlEnumAttribute("notTimingPoint")]
        NotTimingPoint,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("stopAreaRefs_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StopAreaRefsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<StopAreaRefStructure> _stopAreaRef;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("StopAreaRef")]
        public System.Collections.ObjectModel.Collection<StopAreaRefStructure> StopAreaRef
        {
            get
            {
                return _stopAreaRef;
            }
            private set
            {
                _stopAreaRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="StopAreaRefsRelStructure" /> class.</para>
        /// </summary>
        public StopAreaRefsRelStructure()
        {
            this._stopAreaRef = new System.Collections.ObjectModel.Collection<StopAreaRefStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("StopAreaRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("StopAreaRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class StopAreaRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tariffZoneRefs_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TariffZoneRefsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TariffZoneRefStructure> _tariffZoneRef;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TariffZoneRef")]
        public System.Collections.ObjectModel.Collection<TariffZoneRefStructure> TariffZoneRef
        {
            get
            {
                return _tariffZoneRef;
            }
            private set
            {
                _tariffZoneRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TariffZoneRefsRelStructure" /> class.</para>
        /// </summary>
        public TariffZoneRefsRelStructure()
        {
            this._tariffZoneRef = new System.Collections.ObjectModel.Collection<TariffZoneRefStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>Types of STOP PLACE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Types of STOP PLACE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("StopTypeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("StopPlaceType", Namespace="http://www.netex.org.uk/netex")]
    public enum StopTypeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("onstreetBus")]
        OnstreetBus,
        
        [System.Xml.Serialization.XmlEnumAttribute("onstreetTram")]
        OnstreetTram,
        
        [System.Xml.Serialization.XmlEnumAttribute("airport")]
        Airport,
        
        [System.Xml.Serialization.XmlEnumAttribute("railStation")]
        RailStation,
        
        [System.Xml.Serialization.XmlEnumAttribute("metroStation")]
        MetroStation,
        
        [System.Xml.Serialization.XmlEnumAttribute("busStation")]
        BusStation,
        
        [System.Xml.Serialization.XmlEnumAttribute("coachStation")]
        CoachStation,
        
        [System.Xml.Serialization.XmlEnumAttribute("tramStation")]
        TramStation,
        
        [System.Xml.Serialization.XmlEnumAttribute("harbourPort")]
        HarbourPort,
        
        [System.Xml.Serialization.XmlEnumAttribute("ferryPort")]
        FerryPort,
        
        [System.Xml.Serialization.XmlEnumAttribute("ferryStop")]
        FerryStop,
        
        [System.Xml.Serialization.XmlEnumAttribute("liftStation")]
        LiftStation,
        
        [System.Xml.Serialization.XmlEnumAttribute("vehicleRailInterchange")]
        VehicleRailInterchange,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Not in EPIP.                             A group of VEHICLE JOURNEYS following  the same JOURNEY PATTERN having the same "rhythm" every hour (for example runs all xxh10, xxh25 and xxh45... e) between a specified start and end time.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Not in EPIP. A group of VEHICLE JOURNEYS following the same JOURNEY PATTERN havin" +
        "g the same \"rhythm\" every hour (for example runs all xxh10, xxh25 and xxh45... e" +
        ") between a specified start and end time.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("RythmicalJourneyGroup_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RythmicalJourneyGroupVersionStructure : IGroupOfEntitiesElementGroup, IJourneyFrequencyGroupGroup, IOptionalIdDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="RythmicalJourneyGroupVersionStructure" /> class.</para>
        /// </summary>
        public RythmicalJourneyGroupVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._infoLinks = new System.Collections.ObjectModel.Collection<InfoLinkStructure>();
            this._timebands = new System.Collections.ObjectModel.Collection<TimebandRefStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>For EPIP note that Name should be considered as mandatory when in scope of NETWORK.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("For EPIP note that Name should be considered as mandatory when in scope of NETWOR" +
            "K.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PurposeOfGroupingRef")]
        public PurposeOfGroupingRefStructure PurposeOfGroupingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<InfoLinkStructure> _infoLinks;
        
        /// <summary>
        /// <para>Not in EPIP.                      Hyperlinks associated with presentation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Hyperlinks associated with presentation.")]
        [System.Xml.Serialization.XmlArrayAttribute("infoLinks")]
        [System.Xml.Serialization.XmlArrayItemAttribute("InfoLink", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<InfoLinkStructure> InfoLinks
        {
            get
            {
                return _infoLinks;
            }
            private set
            {
                _infoLinks = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the InfoLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InfoLinksSpecified
        {
            get
            {
                return (this.InfoLinks.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Time of first departure in JOURNEY FREQUENCY GROUP.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Time of first departure in JOURNEY FREQUENCY GROUP.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("FirstDepartureTime")]
        public string FirstDepartureTime { get; set; }
        
        /// <summary>
        /// <para>Offset days for the start-time. Number of days after the starting operational day if journey does not start on same calendar day as OPERATING DAY date. Default is 0 for same day.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Offset days for the start-time. Number of days after the starting operational day" +
            " if journey does not start on same calendar day as OPERATING DAY date. Default i" +
            "s 0 for same day.")]
        [System.Xml.Serialization.XmlElementAttribute("FirstDayOffset")]
        public string FirstDayOffset { get; set; }
        
        /// <summary>
        /// <para>Time of last departure in JOURNEY FREQUENCY GROUP.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Time of last departure in JOURNEY FREQUENCY GROUP.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("LastDepartureTime")]
        public string LastDepartureTime { get; set; }
        
        /// <summary>
        /// <para>Offset days for end time. Number of days after the OPERATING DAY date of the template vehicle journey. Default is 0 for same day.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Offset days for end time. Number of days after the OPERATING DAY date of the temp" +
            "late vehicle journey. Default is 0 for same day.")]
        [System.Xml.Serialization.XmlElementAttribute("LastDayOffset")]
        public string LastDayOffset { get; set; }
        
        /// <summary>
        /// <para>Mandatory in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("journeys")]
        public JourneysStructure Journeys { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TimebandRefStructure> _timebands;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlArrayAttribute("timebands")]
        [System.Xml.Serialization.XmlArrayItemAttribute("TimebandRef", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<TimebandRefStructure> Timebands
        {
            get
            {
                return _timebands;
            }
            private set
            {
                _timebands = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that this attribute group is used when id is NOT a MANDATORY attribute in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that this attribute group is used when id is NOT a MANDATORY attribute in EP" +
            "IP.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("RythmicalJourneyGroupVersionStructureTimebands", Namespace="http://www.netex.org.uk/netex", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RythmicalJourneyGroupVersionStructureTimebands
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TimebandRefStructure> _timebandRef;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TimebandRef")]
        public System.Collections.ObjectModel.Collection<TimebandRefStructure> TimebandRef
        {
            get
            {
                return _timebandRef;
            }
            private set
            {
                _timebandRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="RythmicalJourneyGroupVersionStructureTimebands" /> class.</para>
        /// </summary>
        public RythmicalJourneyGroupVersionStructureTimebands()
        {
            this._timebandRef = new System.Collections.ObjectModel.Collection<TimebandRefStructure>();
        }
    }
    
    /// <summary>
    /// <para>A SERVICE CALENDAR. A collection of DAY TYPE ASSIGNMENTs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A SERVICE CALENDAR. A collection of DAY TYPE ASSIGNMENTs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ServiceCalendarStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ServiceCalendar", Namespace="http://www.netex.org.uk/netex")]
    public partial class ServiceCalendarStructure : IDataManagedObjectElementGroup, IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ServiceCalendarStructure" /> class.</para>
        /// </summary>
        public ServiceCalendarStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of SERVICE CALENDAR.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of SERVICE CALENDAR.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Start date of SERVICE CALENDAR.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Start date of SERVICE CALENDAR.")]
        [System.Xml.Serialization.XmlElementAttribute("FromDate", DataType="date")]
        public System.DateTime FromDate { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FromDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FromDateSpecified { get; set; }
        
        /// <summary>
        /// <para>End date of SERVICE CALENDAR. Date is INCLUSIVE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("End date of SERVICE CALENDAR. Date is INCLUSIVE.")]
        [System.Xml.Serialization.XmlElementAttribute("ToDate", DataType="date")]
        public System.DateTime ToDate { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ToDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ToDateSpecified { get; set; }
        
        /// <summary>
        /// <para>DAY TYPEs used in calendar.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("DAY TYPEs used in calendar.")]
        [System.Xml.Serialization.XmlElementAttribute("dayTypes")]
        public DayTypesStructure DayTypes { get; set; }
        
        /// <summary>
        /// <para>Days found in calendar between start and end date. Dates must fall between the start and end date of the calendar.  There is a day for every date in the calendar validity period. Days do not have to be explicitly declared if there is no additional information.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Days found in calendar between start and end date. Dates must fall between the start and end date of the calendar. There is a day for every date in the calendar validity period. Days do not have to be explicitly declared if there is no additional information.")]
        [System.Xml.Serialization.XmlElementAttribute("operatingDays")]
        public OperatingDaysRelStructure OperatingDays { get; set; }
        
        /// <summary>
        /// <para>OPERATING PERIODs belonging to calendar. In EPIP each OPERATING PERIOD defines a set of OPERATING DAY dates.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("OPERATING PERIODs belonging to calendar. In EPIP each OPERATING PERIOD defines a " +
            "set of OPERATING DAY dates.")]
        [System.Xml.Serialization.XmlElementAttribute("operatingPeriods")]
        public OperatingPeriodsStructure OperatingPeriods { get; set; }
        
        /// <summary>
        /// <para>Assignments of DAY TYPEs to specific OPERATING DAYs. The same DAY TYPE may be assigned to multiple Operating dates, and vice versa.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Assignments of DAY TYPEs to specific OPERATING DAYs. The same DAY TYPE may be ass" +
            "igned to multiple Operating dates, and vice versa.")]
        [System.Xml.Serialization.XmlElementAttribute("dayTypeAssignments")]
        public DayTypeAssignmentsRelStructure DayTypeAssignments { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("operatingPeriodsStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("operatingPeriods", Namespace="http://www.netex.org.uk/netex")]
    public partial class OperatingPeriodsStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<OperatingPeriodStructure> _operatingPeriod;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("OperatingPeriod")]
        public System.Collections.ObjectModel.Collection<OperatingPeriodStructure> OperatingPeriod
        {
            get
            {
                return _operatingPeriod;
            }
            private set
            {
                _operatingPeriod = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OperatingPeriod collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OperatingPeriodSpecified
        {
            get
            {
                return (this.OperatingPeriod.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="OperatingPeriodsStructure" /> class.</para>
        /// </summary>
        public OperatingPeriodsStructure()
        {
            this._operatingPeriod = new System.Collections.ObjectModel.Collection<OperatingPeriodStructure>();
            this._uicOperatingPeriod = new System.Collections.ObjectModel.Collection<UicOperatingPeriodVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<UicOperatingPeriodVersionStructure> _uicOperatingPeriod;
        
        [System.Xml.Serialization.XmlElementAttribute("UicOperatingPeriod")]
        public System.Collections.ObjectModel.Collection<UicOperatingPeriodVersionStructure> UicOperatingPeriod
        {
            get
            {
                return _uicOperatingPeriod;
            }
            private set
            {
                _uicOperatingPeriod = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the UicOperatingPeriod collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UicOperatingPeriodSpecified
        {
            get
            {
                return (this.UicOperatingPeriod.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// <para>An OPERATING PERIOD coded in UIC style as a bit string between two dates.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("An OPERATING PERIOD coded in UIC style as a bit string between two dates.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("UicOperatingPeriod_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("UicOperatingPeriod", Namespace="http://www.netex.org.uk/netex")]
    public partial class UicOperatingPeriodVersionStructure : IRestrictedDataManagedObjectElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="UicOperatingPeriodVersionStructure" /> class.</para>
        /// </summary>
        public UicOperatingPeriodVersionStructure()
        {
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._daysOfWeek = new System.Collections.ObjectModel.Collection<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of OPERATING PERIOD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of OPERATING PERIOD.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Start date of OPERATING PERIOD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Start date of OPERATING PERIOD.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("FromDate", DataType="dateTime")]
        public System.DateTime FromDate { get; set; }
        
        /// <summary>
        /// <para>End date of OPERATING PERIOD. Date is INCLUSIVE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("End date of OPERATING PERIOD. Date is INCLUSIVE.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ToDate", DataType="dateTime")]
        public System.DateTime ToDate { get; set; }
        
        /// <summary>
        /// <para>String of bits, one for each day in period: whether valid or not valid on the day.  Normally there will be a bit for every day between start and end date.  If bit is missing, assume available.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("String of bits, one for each day in period: whether valid or not valid on the day" +
            ". Normally there will be a bit for every day between start and end date. If bit " +
            "is missing, assume available.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ValidDayBits")]
        public string ValidDayBits { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _daysOfWeek;
        
        /// <summary>
        /// <para>Days of week to which bits correspond.</para>
        /// <para>Allowed values for List of Days of the Week.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Days of week to which bits correspond.")]
        [System.Xml.Serialization.XmlElementAttribute("DaysOfWeek")]
        public System.Collections.ObjectModel.Collection<string> DaysOfWeek
        {
            get
            {
                return _daysOfWeek;
            }
            private set
            {
                _daysOfWeek = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DaysOfWeek collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DaysOfWeekSpecified
        {
            get
            {
                return (this.DaysOfWeek.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IRestrictedDataManagedObjectElementGroup
    {
        
        System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get;
        }
        
        BrandingRefStructure BrandingRef
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("dayTypeAssignments_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("dayTypeAssignments", Namespace="http://www.netex.org.uk/netex")]
    public partial class DayTypeAssignmentsRelStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DayTypeAssignmentStructure> _dayTypeAssignment;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("DayTypeAssignment")]
        public System.Collections.ObjectModel.Collection<DayTypeAssignmentStructure> DayTypeAssignment
        {
            get
            {
                return _dayTypeAssignment;
            }
            private set
            {
                _dayTypeAssignment = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DayTypeAssignmentsRelStructure" /> class.</para>
        /// </summary>
        public DayTypeAssignmentsRelStructure()
        {
            this._dayTypeAssignment = new System.Collections.ObjectModel.Collection<DayTypeAssignmentStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    /// <summary>
    /// <para>A SERVICE CALENDAR. A coherent set of OPERATING DAYS and DAY TYPES comprising a Calendar.  that may be used to state the temporal VALIDITY of other NeTEx entities such as Timetables, STOP PLACEs, etc. Covers a PERIOD with a collection of assignments of OPERATING DAYS to DAY TYPES.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"A SERVICE CALENDAR. A coherent set of OPERATING DAYS and DAY TYPES comprising a Calendar. that may be used to state the temporal VALIDITY of other NeTEx entities such as Timetables, STOP PLACEs, etc. Covers a PERIOD with a collection of assignments of OPERATING DAYS to DAY TYPES.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ServiceCalendarFrame_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ServiceCalendarFrame", Namespace="http://www.netex.org.uk/netex")]
    public partial class ServiceCalendarFrameVersionStructure : IVersionFrameGroup, IDataManagedObjectAttributeGroup
    {
        
        /// <summary>
        /// <para>Main construction in EPIP to express validity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Main construction in EPIP to express validity.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public ValidBetweenVersionStructure ValidBetween { get; set; }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject, however EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject, however EPIP restricts use of VALIDITY CONDITIONs to just a simple na" +
            "me.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        /// <summary>
        /// <para>Name of VERSION FRAME.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of VERSION FRAME.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Description of VERSION FRAME contents.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of VERSION FRAME contents.")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Reference to a TYPE OF VERSION FRAME.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a TYPE OF VERSION FRAME.")]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfFrameRef")]
        public TypeOfFrameRefStructure TypeOfFrameRef { get; set; }
        
        /// <summary>
        /// <para>Previous baseline VERSION FRAME that objects in this VERSION require.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Previous baseline VERSION FRAME that objects in this VERSION require.")]
        [System.Xml.Serialization.XmlElementAttribute("BaselineVersionFrameRef")]
        public BaselineVersionFrameRefStructure BaselineVersionFrameRef { get; set; }
        
        /// <summary>
        /// <para>CODE SPACES used in this frame. Normally there will be at least one.  A default may be specified in the Frame defaults.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("CODE SPACES used in this frame. Normally there will be at least one. A default ma" +
            "y be specified in the Frame defaults.")]
        [System.Xml.Serialization.XmlElementAttribute("codespaces")]
        public CodespacesRelStructure Codespaces { get; set; }
        
        /// <summary>
        /// <para>Set of default values to assume for values in the
        ///frame if not explicitly stated on individual
        ///elements.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Set of default values to assume for values in the frame if not explicitly stated " +
            "on individual elements.")]
        [System.Xml.Serialization.XmlElementAttribute("FrameDefaults")]
        public FrameDefaultsStructure FrameDefaults { get; set; }
        
        /// <summary>
        /// <para>Not part of EPIP. Formal definitions of VERSIONs included in frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not part of EPIP. Formal definitions of VERSIONs included in frame.")]
        [System.Xml.Serialization.XmlElementAttribute("versions")]
        public VersionsRelStructure Versions { get; set; }
        
        /// <summary>
        /// <para>Prerequisite VERSION FRAMEs containing elements  that this frame depends on.  +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Prerequisite VERSION FRAMEs containing elements that this frame depends on. +v1.1" +
            "")]
        [System.Xml.Serialization.XmlElementAttribute("prerequisites")]
        public PrerequisitesRelStructure Prerequisites { get; set; }
        
        /// <summary>
        /// <para>Shared VALIDITY CONDITIONs used by elements
        ///in the FRAME. Note, this is NOT the "dominant" FRAME validity condition!</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Shared VALIDITY CONDITIONs used by elements in the FRAME. Note, this is NOT the \"" +
            "dominant\" FRAME validity condition!")]
        [System.Xml.Serialization.XmlElementAttribute("contentValidityConditions")]
        public ContentValidityConditionsRelStructure ContentValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ServiceCalendar")]
        public ServiceCalendarStructure ServiceCalendar { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DayTypeStructure> _dayTypes;
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlArrayAttribute("dayTypes")]
        [System.Xml.Serialization.XmlArrayItemAttribute("DayType", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<DayTypeStructure> DayTypes
        {
            get
            {
                return _dayTypes;
            }
            private set
            {
                _dayTypes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DayTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DayTypesSpecified
        {
            get
            {
                return (this.DayTypes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ServiceCalendarFrameVersionStructure" /> class.</para>
        /// </summary>
        public ServiceCalendarFrameVersionStructure()
        {
            this._dayTypes = new System.Collections.ObjectModel.Collection<DayTypeStructure>();
            this._timebands = new System.Collections.ObjectModel.Collection<TimebandVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TimebandVersionStructure> _timebands;
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlArrayAttribute("timebands")]
        [System.Xml.Serialization.XmlArrayItemAttribute("Timeband", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<TimebandVersionStructure> Timebands
        {
            get
            {
                return _timebands;
            }
            private set
            {
                _timebands = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Timebands collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimebandsSpecified
        {
            get
            {
                return (this.Timebands.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("operatingDays")]
        public OperatingDaysRelStructure OperatingDays { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("operatingPeriods")]
        public OperatingPeriodsStructure OperatingPeriods { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("dayTypeAssignments")]
        public DayTypeAssignmentsRelStructure DayTypeAssignments { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("dayTypes1Structure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DayTypes1Structure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DayTypeStructure> _dayType;
        
        [System.Xml.Serialization.XmlElementAttribute("DayType")]
        public System.Collections.ObjectModel.Collection<DayTypeStructure> DayType
        {
            get
            {
                return _dayType;
            }
            private set
            {
                _dayType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DayType collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DayTypeSpecified
        {
            get
            {
                return (this.DayType.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DayTypes1Structure" /> class.</para>
        /// </summary>
        public DayTypes1Structure()
        {
            this._dayType = new System.Collections.ObjectModel.Collection<DayTypeStructure>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ServiceCalendarFrameVersionStructureTimebands", Namespace="http://www.netex.org.uk/netex", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServiceCalendarFrameVersionStructureTimebands
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TimebandVersionStructure> _timeband;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Timeband")]
        public System.Collections.ObjectModel.Collection<TimebandVersionStructure> Timeband
        {
            get
            {
                return _timeband;
            }
            private set
            {
                _timeband = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ServiceCalendarFrameVersionStructureTimebands" /> class.</para>
        /// </summary>
        public ServiceCalendarFrameVersionStructureTimebands()
        {
            this._timeband = new System.Collections.ObjectModel.Collection<TimebandVersionStructure>();
        }
    }
    
    /// <summary>
    /// <para>A coherent set of Service data to which the same frame VALIDITY CONDITIONs have been assigned.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A coherent set of Service data to which the same frame VALIDITY CONDITIONs have b" +
        "een assigned.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ServiceFrame_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ServiceFrame", Namespace="http://www.netex.org.uk/netex")]
    public partial class ServiceFrameVersionStructure : IVersionFrameGroup, IDataManagedObjectAttributeGroup
    {
        
        /// <summary>
        /// <para>Main construction in EPIP to express validity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Main construction in EPIP to express validity.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public ValidBetweenVersionStructure ValidBetween { get; set; }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject, however EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject, however EPIP restricts use of VALIDITY CONDITIONs to just a simple na" +
            "me.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        /// <summary>
        /// <para>Name of VERSION FRAME.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of VERSION FRAME.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Description of VERSION FRAME contents.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of VERSION FRAME contents.")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Reference to a TYPE OF VERSION FRAME.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a TYPE OF VERSION FRAME.")]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfFrameRef")]
        public TypeOfFrameRefStructure TypeOfFrameRef { get; set; }
        
        /// <summary>
        /// <para>Previous baseline VERSION FRAME that objects in this VERSION require.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Previous baseline VERSION FRAME that objects in this VERSION require.")]
        [System.Xml.Serialization.XmlElementAttribute("BaselineVersionFrameRef")]
        public BaselineVersionFrameRefStructure BaselineVersionFrameRef { get; set; }
        
        /// <summary>
        /// <para>CODE SPACES used in this frame. Normally there will be at least one.  A default may be specified in the Frame defaults.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("CODE SPACES used in this frame. Normally there will be at least one. A default ma" +
            "y be specified in the Frame defaults.")]
        [System.Xml.Serialization.XmlElementAttribute("codespaces")]
        public CodespacesRelStructure Codespaces { get; set; }
        
        /// <summary>
        /// <para>Set of default values to assume for values in the
        ///frame if not explicitly stated on individual
        ///elements.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Set of default values to assume for values in the frame if not explicitly stated " +
            "on individual elements.")]
        [System.Xml.Serialization.XmlElementAttribute("FrameDefaults")]
        public FrameDefaultsStructure FrameDefaults { get; set; }
        
        /// <summary>
        /// <para>Not part of EPIP. Formal definitions of VERSIONs included in frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not part of EPIP. Formal definitions of VERSIONs included in frame.")]
        [System.Xml.Serialization.XmlElementAttribute("versions")]
        public VersionsRelStructure Versions { get; set; }
        
        /// <summary>
        /// <para>Prerequisite VERSION FRAMEs containing elements  that this frame depends on.  +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Prerequisite VERSION FRAMEs containing elements that this frame depends on. +v1.1" +
            "")]
        [System.Xml.Serialization.XmlElementAttribute("prerequisites")]
        public PrerequisitesRelStructure Prerequisites { get; set; }
        
        /// <summary>
        /// <para>Shared VALIDITY CONDITIONs used by elements
        ///in the FRAME. Note, this is NOT the "dominant" FRAME validity condition!</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Shared VALIDITY CONDITIONs used by elements in the FRAME. Note, this is NOT the \"" +
            "dominant\" FRAME validity condition!")]
        [System.Xml.Serialization.XmlElementAttribute("contentValidityConditions")]
        public ContentValidityConditionsRelStructure ContentValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Network")]
        public NetworkVersionStructure Network { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("additionalNetworks")]
        public AdditionalNetworksRelStructure AdditionalNetworks { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("directions")]
        public DirectionsRelStructure Directions { get; set; }
        
        /// <summary>
        /// <para>Not necessarily required in EPIP, compare what is annotated for routes.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not necessarily required in EPIP, compare what is annotated for routes.")]
        [System.Xml.Serialization.XmlElementAttribute("routePoints")]
        public RoutePointsRelStructure RoutePoints { get; set; }
        
        /// <summary>
        /// <para>Not necessarily required in EPIP, compare what is annotated for routes.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not necessarily required in EPIP, compare what is annotated for routes.")]
        [System.Xml.Serialization.XmlElementAttribute("routeLinks")]
        public RouteLinksRelStructure RouteLinks { get; set; }
        
        /// <summary>
        /// <para>Not required in EPIP as data may not be available. However note that it is possible to align with SERVICE PATTERN, thus using the SCHEDULED STOP POINTs as a base for creating ROUTE POINTs, the POINTs IN JOURNEY
        ///PATTERN for POINTs ON ROUTE, and the SERVICE LINKs for ROUTE LINKs</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Not required in EPIP as data may not be available. However note that it is possible to align with SERVICE PATTERN, thus using the SCHEDULED STOP POINTs as a base for creating ROUTE POINTs, the POINTs IN JOURNEY PATTERN for POINTs ON ROUTE, and the SERVICE LINKs for ROUTE LINKs")]
        [System.Xml.Serialization.XmlElementAttribute("routes")]
        public RoutesRelStructure Routes { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("lines")]
        public LinesRelStructure Lines { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("groupsOfLines")]
        public GroupsOfLinesRelStructure GroupsOfLines { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("destinationDisplays")]
        public DestinationDisplaysRelStructure DestinationDisplays { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("scheduledStopPoints")]
        public ScheduledStopPointsRelStructure ScheduledStopPoints { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("serviceLinks")]
        public ServiceLinksRelStructure ServiceLinks { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<JourneyPatternVersionStructure> _servicePatterns;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlArrayAttribute("servicePatterns")]
        [System.Xml.Serialization.XmlArrayItemAttribute("ServicePattern", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<JourneyPatternVersionStructure> ServicePatterns
        {
            get
            {
                return _servicePatterns;
            }
            private set
            {
                _servicePatterns = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ServicePatterns collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServicePatternsSpecified
        {
            get
            {
                return (this.ServicePatterns.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ServiceFrameVersionStructure" /> class.</para>
        /// </summary>
        public ServiceFrameVersionStructure()
        {
            this._servicePatterns = new System.Collections.ObjectModel.Collection<JourneyPatternVersionStructure>();
            this._tariffZones = new System.Collections.ObjectModel.Collection<TariffZoneVersionStructure>();
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("stopAreas")]
        public StopAreasRelStructure StopAreas { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("connections")]
        public ConnectionsStructure Connections { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TariffZoneVersionStructure> _tariffZones;
        
        [System.Xml.Serialization.XmlArrayAttribute("tariffZones")]
        [System.Xml.Serialization.XmlArrayItemAttribute("TariffZone", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<TariffZoneVersionStructure> TariffZones
        {
            get
            {
                return _tariffZones;
            }
            private set
            {
                _tariffZones = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TariffZones collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TariffZonesSpecified
        {
            get
            {
                return (this.TariffZones.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("stopAssignments")]
        public StopAssignmentsStructure StopAssignments { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("timingPoints")]
        public TimingPointsRelStructure TimingPoints { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("timingLinks")]
        public TimingLinksRelStructure TimingLinks { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("journeyPatterns")]
        public JourneyPatternsStructure JourneyPatterns { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("timeDemandTypes")]
        public TimeDemandTypesInFrameRelStructure TimeDemandTypes { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("notices")]
        public NoticesRelStructure Notices { get; set; }
        
        /// <summary>
        /// <para>EPIP: Do not specify here, use embedding in object in question instead.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("EPIP: Do not specify here, use embedding in object in question instead.")]
        [System.Xml.Serialization.XmlElementAttribute("noticeAssignments")]
        public NoticeAssignmentsRelStructure NoticeAssignments { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("additionalNetworks_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("additionalNetworks", Namespace="http://www.netex.org.uk/netex")]
    public partial class AdditionalNetworksRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<NetworkVersionStructure> _network;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Network")]
        public System.Collections.ObjectModel.Collection<NetworkVersionStructure> Network
        {
            get
            {
                return _network;
            }
            private set
            {
                _network = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="AdditionalNetworksRelStructure" /> class.</para>
        /// </summary>
        public AdditionalNetworksRelStructure()
        {
            this._network = new System.Collections.ObjectModel.Collection<NetworkVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("directions_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("directions", Namespace="http://www.netex.org.uk/netex")]
    public partial class DirectionsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DirectionVersionStructure> _direction;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Direction")]
        public System.Collections.ObjectModel.Collection<DirectionVersionStructure> Direction
        {
            get
            {
                return _direction;
            }
            private set
            {
                _direction = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DirectionsRelStructure" /> class.</para>
        /// </summary>
        public DirectionsRelStructure()
        {
            this._direction = new System.Collections.ObjectModel.Collection<DirectionVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("routePoints_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("routePoints", Namespace="http://www.netex.org.uk/netex")]
    public partial class RoutePointsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<RoutePointVersionStructure> _routePoint;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("RoutePoint")]
        public System.Collections.ObjectModel.Collection<RoutePointVersionStructure> RoutePoint
        {
            get
            {
                return _routePoint;
            }
            private set
            {
                _routePoint = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="RoutePointsRelStructure" /> class.</para>
        /// </summary>
        public RoutePointsRelStructure()
        {
            this._routePoint = new System.Collections.ObjectModel.Collection<RoutePointVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("routeLinks_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("routeLinks", Namespace="http://www.netex.org.uk/netex")]
    public partial class RouteLinksRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<RouteLinkVersionStructure> _routeLink;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("RouteLink")]
        public System.Collections.ObjectModel.Collection<RouteLinkVersionStructure> RouteLink
        {
            get
            {
                return _routeLink;
            }
            private set
            {
                _routeLink = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="RouteLinksRelStructure" /> class.</para>
        /// </summary>
        public RouteLinksRelStructure()
        {
            this._routeLink = new System.Collections.ObjectModel.Collection<RouteLinkVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("routes_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("routes", Namespace="http://www.netex.org.uk/netex")]
    public partial class RoutesRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<RouteVersionStructure> _route;
        
        [System.Xml.Serialization.XmlElementAttribute("Route")]
        public System.Collections.ObjectModel.Collection<RouteVersionStructure> Route
        {
            get
            {
                return _route;
            }
            private set
            {
                _route = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Route collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RouteSpecified
        {
            get
            {
                return (this.Route.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="RoutesRelStructure" /> class.</para>
        /// </summary>
        public RoutesRelStructure()
        {
            this._route = new System.Collections.ObjectModel.Collection<RouteVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("lines_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("lines", Namespace="http://www.netex.org.uk/netex")]
    public partial class LinesRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LineStructure> _line;
        
        [System.Xml.Serialization.XmlElementAttribute("Line")]
        public System.Collections.ObjectModel.Collection<LineStructure> Line
        {
            get
            {
                return _line;
            }
            private set
            {
                _line = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Line collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineSpecified
        {
            get
            {
                return (this.Line.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LinesRelStructure" /> class.</para>
        /// </summary>
        public LinesRelStructure()
        {
            this._line = new System.Collections.ObjectModel.Collection<LineStructure>();
            this._flexibleLine = new System.Collections.ObjectModel.Collection<FlexibleLineStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<FlexibleLineStructure> _flexibleLine;
        
        /// <summary>
        /// <para>A group of FLEXIBLE ROUTEs of which is generally known to the public by a similar name or number and which have common booking arrangements.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A group of FLEXIBLE ROUTEs of which is generally known to the public by a similar" +
            " name or number and which have common booking arrangements.")]
        [System.Xml.Serialization.XmlElementAttribute("FlexibleLine")]
        public System.Collections.ObjectModel.Collection<FlexibleLineStructure> FlexibleLine
        {
            get
            {
                return _flexibleLine;
            }
            private set
            {
                _flexibleLine = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FlexibleLine collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FlexibleLineSpecified
        {
            get
            {
                return (this.FlexibleLine.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("destinationDisplays_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("destinationDisplays", Namespace="http://www.netex.org.uk/netex")]
    public partial class DestinationDisplaysRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DestinationDisplayVersionStructure> _destinationDisplay;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("DestinationDisplay")]
        public System.Collections.ObjectModel.Collection<DestinationDisplayVersionStructure> DestinationDisplay
        {
            get
            {
                return _destinationDisplay;
            }
            private set
            {
                _destinationDisplay = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DestinationDisplaysRelStructure" /> class.</para>
        /// </summary>
        public DestinationDisplaysRelStructure()
        {
            this._destinationDisplay = new System.Collections.ObjectModel.Collection<DestinationDisplayVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("scheduledStopPoints_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("scheduledStopPoints", Namespace="http://www.netex.org.uk/netex")]
    public partial class ScheduledStopPointsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ScheduledStopPointVersionStructure> _scheduledStopPoint;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ScheduledStopPoint")]
        public System.Collections.ObjectModel.Collection<ScheduledStopPointVersionStructure> ScheduledStopPoint
        {
            get
            {
                return _scheduledStopPoint;
            }
            private set
            {
                _scheduledStopPoint = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ScheduledStopPointsRelStructure" /> class.</para>
        /// </summary>
        public ScheduledStopPointsRelStructure()
        {
            this._scheduledStopPoint = new System.Collections.ObjectModel.Collection<ScheduledStopPointVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("serviceLinks_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("serviceLinks", Namespace="http://www.netex.org.uk/netex")]
    public partial class ServiceLinksRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ServiceLinkVersionStructure> _serviceLink;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ServiceLink")]
        public System.Collections.ObjectModel.Collection<ServiceLinkVersionStructure> ServiceLink
        {
            get
            {
                return _serviceLink;
            }
            private set
            {
                _serviceLink = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ServiceLinksRelStructure" /> class.</para>
        /// </summary>
        public ServiceLinksRelStructure()
        {
            this._serviceLink = new System.Collections.ObjectModel.Collection<ServiceLinkVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>A LINK between an ordered pair of STOP POINTs.  Service links are directional - there will be separate links for each direction of a route.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A LINK between an ordered pair of STOP POINTs. Service links are directional - th" +
        "ere will be separate links for each direction of a route.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ServiceLink_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ServiceLink", Namespace="http://www.netex.org.uk/netex")]
    public partial class ServiceLinkVersionStructure : IDataManagedObjectElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ServiceLinkVersionStructure" /> class.</para>
        /// </summary>
        public ServiceLinkVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Length of LINK.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Length of LINK.")]
        [System.Xml.Serialization.XmlElementAttribute("Distance")]
        public decimal Distance { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Distance property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DistanceSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("LineString", Namespace="http://www.opengis.net/gml/3.2")]
        public Gml.TLineString LineString { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("projections")]
        public LinkProjectionsStructure Projections { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("passingThrough")]
        public PointsOnLinkStructure PassingThrough { get; set; }
        
        /// <summary>
        /// <para>Identifier of SCHEDULED STOP POINT from which Link starts.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of SCHEDULED STOP POINT from which Link starts.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("FromPointRef")]
        public ScheduledStopPointRefStructure FromPointRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of SCHEDULED STOP POINT at which Link ends.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of SCHEDULED STOP POINT at which Link ends.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ToPointRef")]
        public ScheduledStopPointRefStructure ToPointRef { get; set; }
        
        /// <summary>
        /// <para>Not part of EPIP?</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not part of EPIP?")]
        [System.Xml.Serialization.XmlElementAttribute("VehicleMode")]
        public AllModesEnumeration VehicleMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VehicleMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VehicleModeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Not in EPIP</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("servicePatternsStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("servicePatterns", Namespace="http://www.netex.org.uk/netex")]
    public partial class ServicePatternsStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<JourneyPatternVersionStructure> _servicePattern;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("ServicePattern")]
        public System.Collections.ObjectModel.Collection<JourneyPatternVersionStructure> ServicePattern
        {
            get
            {
                return _servicePattern;
            }
            private set
            {
                _servicePattern = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ServicePattern collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServicePatternSpecified
        {
            get
            {
                return (this.ServicePattern.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ServicePatternsStructure" /> class.</para>
        /// </summary>
        public ServicePatternsStructure()
        {
            this._servicePattern = new System.Collections.ObjectModel.Collection<JourneyPatternVersionStructure>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("stopAreas_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StopAreasRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<StopAreaVersionStructure> _stopArea;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("StopArea")]
        public System.Collections.ObjectModel.Collection<StopAreaVersionStructure> StopArea
        {
            get
            {
                return _stopArea;
            }
            private set
            {
                _stopArea = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="StopAreasRelStructure" /> class.</para>
        /// </summary>
        public StopAreasRelStructure()
        {
            this._stopArea = new System.Collections.ObjectModel.Collection<StopAreaVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>Simplified - Not complete</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Simplified - Not complete")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("StopArea_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("StopArea", Namespace="http://www.netex.org.uk/netex")]
    public partial class StopAreaVersionStructure : IGroupOfEntitiesElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="StopAreaVersionStructure" /> class.</para>
        /// </summary>
        public StopAreaVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._infoLinks = new System.Collections.ObjectModel.Collection<InfoLinkStructure>();
            this._projections = new System.Collections.ObjectModel.Collection<PointProjectionStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>For EPIP note that Name should be considered as mandatory when in scope of NETWORK.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("For EPIP note that Name should be considered as mandatory when in scope of NETWOR" +
            "K.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PurposeOfGroupingRef")]
        public PurposeOfGroupingRefStructure PurposeOfGroupingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<InfoLinkStructure> _infoLinks;
        
        /// <summary>
        /// <para>Not in EPIP.                      Hyperlinks associated with presentation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Hyperlinks associated with presentation.")]
        [System.Xml.Serialization.XmlArrayAttribute("infoLinks")]
        [System.Xml.Serialization.XmlArrayItemAttribute("InfoLink", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<InfoLinkStructure> InfoLinks
        {
            get
            {
                return _infoLinks;
            }
            private set
            {
                _infoLinks = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the InfoLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InfoLinksSpecified
        {
            get
            {
                return (this.InfoLinks.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Centroid")]
        public CentroidStructure Centroid { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PointProjectionStructure> _projections;
        
        [System.Xml.Serialization.XmlArrayAttribute("projections")]
        [System.Xml.Serialization.XmlArrayItemAttribute("PointProjection", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<PointProjectionStructure> Projections
        {
            get
            {
                return _projections;
            }
            private set
            {
                _projections = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Projections collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProjectionsSpecified
        {
            get
            {
                return (this.Projections.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PublicCode")]
        public string PublicCode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ParentStopAreaRef")]
        public StopAreaRefStructure ParentStopAreaRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("connectionsStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("connections", Namespace="http://www.netex.org.uk/netex")]
    public partial class ConnectionsStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ConnectionVersionStructure> _connection;
        
        [System.Xml.Serialization.XmlElementAttribute("Connection")]
        public System.Collections.ObjectModel.Collection<ConnectionVersionStructure> Connection
        {
            get
            {
                return _connection;
            }
            private set
            {
                _connection = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Connection collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ConnectionSpecified
        {
            get
            {
                return (this.Connection.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ConnectionsStructure" /> class.</para>
        /// </summary>
        public ConnectionsStructure()
        {
            this._connection = new System.Collections.ObjectModel.Collection<ConnectionVersionStructure>();
            this._defaultConnection = new System.Collections.ObjectModel.Collection<DefaultConnectionVersionStructure>();
            this._siteConnection = new System.Collections.ObjectModel.Collection<SiteConnectionVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DefaultConnectionVersionStructure> _defaultConnection;
        
        /// <summary>
        /// <para>At the most general level, a DEFAULT CONNECTION sets a default time for a transfer between modes on any
        ///SITE, to be used if there is no more specific value for an individual site. It is of particular interest for journey
        ///planners when connection times are not provided. The from and to attribute can refer the same place,
        ///therefore meaning that the default connection information is valid for all connections internal to the
        ///referenced place.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"At the most general level, a DEFAULT CONNECTION sets a default time for a transfer between modes on any SITE, to be used if there is no more specific value for an individual site. It is of particular interest for journey planners when connection times are not provided. The from and to attribute can refer the same place, therefore meaning that the default connection information is valid for all connections internal to the referenced place.")]
        [System.Xml.Serialization.XmlElementAttribute("DefaultConnection")]
        public System.Collections.ObjectModel.Collection<DefaultConnectionVersionStructure> DefaultConnection
        {
            get
            {
                return _defaultConnection;
            }
            private set
            {
                _defaultConnection = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DefaultConnection collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultConnectionSpecified
        {
            get
            {
                return (this.DefaultConnection.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<SiteConnectionVersionStructure> _siteConnection;
        
        /// <summary>
        /// <para>The SITE CONNECTION is similar to the CONNECTION but describes the physical (spatial) possibility for a
        ///passenger to go from a site (STOP PLACE or POINT OF INTEREST in the EPIP) to another.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The SITE CONNECTION is similar to the CONNECTION but describes the physical (spat" +
            "ial) possibility for a passenger to go from a site (STOP PLACE or POINT OF INTER" +
            "EST in the EPIP) to another.")]
        [System.Xml.Serialization.XmlElementAttribute("SiteConnection")]
        public System.Collections.ObjectModel.Collection<SiteConnectionVersionStructure> SiteConnection
        {
            get
            {
                return _siteConnection;
            }
            private set
            {
                _siteConnection = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SiteConnection collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SiteConnectionSpecified
        {
            get
            {
                return (this.SiteConnection.Count != 0);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SiteConnection_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("SiteConnection", Namespace="http://www.netex.org.uk/netex")]
    public partial class SiteConnectionVersionStructure : IDataManagedObjectElementGroup, ITransferGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="SiteConnectionVersionStructure" /> class.</para>
        /// </summary>
        public SiteConnectionVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of TRANSFER</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of TRANSFER")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Reference to TYPE OF TRANSFER.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to TYPE OF TRANSFER.")]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfTransferRef")]
        public TypeOfTransferRefStructure TypeOfTransferRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Distance of TRANSFER link.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Distance of TRANSFER link.")]
        [System.Xml.Serialization.XmlElementAttribute("Distance")]
        public decimal Distance { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Distance property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DistanceSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("TransferDuration")]
        public TransferDurationStructure TransferDuration { get; set; }
        
        /// <summary>
        /// <para>Walking TRANSFER TIMEs that apply to TRANSFER.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Walking TRANSFER TIMEs that apply to TRANSFER.")]
        [System.Xml.Serialization.XmlElementAttribute("WalkTransferDuration")]
        public TransferDurationStructure WalkTransferDuration { get; set; }
        
        /// <summary>
        /// <para>Whether timings and validity applies to both directions (true) or just to the from-to direction of the TRANSFER.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether timings and validity applies to both directions (true) or just to the fro" +
            "m-to direction of the TRANSFER.")]
        [System.Xml.Serialization.XmlElementAttribute("BothWays")]
        public bool BothWays { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BothWays property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BothWaysSpecified { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("From")]
        public SiteConnectionEndStructure From { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("To")]
        public SiteConnectionEndStructure To { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("navigationPaths")]
        public NavigationPathsRelStructure NavigationPaths { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SiteConnectionEndStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SiteConnectionEndStructure : ISiteConnectionEndGroup
    {
        
        /// <summary>
        /// <para>Not in EPIP. Primary MODE of Vehicle transport associated by this component.                        Unclear if part of EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Primary MODE of Vehicle transport associated by this component. Uncl" +
            "ear if part of EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("TransportMode")]
        public VehicleModeEnumeration TransportMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransportMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TransportModeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ScheduledStopPointRef")]
        public ScheduledStopPointRefStructure ScheduledStopPointRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("StopPlaceRef")]
        public StopPlaceRefStructure StopPlaceRef { get; set; }
        
        /// <summary>
        /// <para>Not part of EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not part of EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("AccessSpaceRef")]
        public AccessSpaceRefStructure AccessSpaceRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("QuayRef")]
        public QuayRefStructure QuayRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("StopPlaceEntranceRef")]
        public StopPlaceEntranceRefStructure StopPlaceEntranceRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PointOfInterestRef")]
        public PointOfInterestRefStructure PointOfInterestRef { get; set; }
    }
    
    /// <summary>
    /// <para>The SITE CONNECTION is similar to the CONNECTION but describes the physical (spatial) possibility for a
    ///passenger to go from a site (STOP PLACE or POINT OF INTEREST in the EPIP) to another.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The SITE CONNECTION is similar to the CONNECTION but describes the physical (spat" +
        "ial) possibility for a passenger to go from a site (STOP PLACE or POINT OF INTER" +
        "EST in the EPIP) to another.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ISiteConnectionEndGroup
    {
        
        /// <summary>
        /// <para>Not in EPIP. Primary MODE of Vehicle transport associated by this component.                        Unclear if part of EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Primary MODE of Vehicle transport associated by this component. Uncl" +
            "ear if part of EPIP.")]
        VehicleModeEnumeration TransportMode
        {
            get;
            set;
        }
        
        ScheduledStopPointRefStructure ScheduledStopPointRef
        {
            get;
            set;
        }
        
        StopPlaceRefStructure StopPlaceRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not part of EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not part of EPIP")]
        AccessSpaceRefStructure AccessSpaceRef
        {
            get;
            set;
        }
        
        QuayRefStructure QuayRef
        {
            get;
            set;
        }
        
        StopPlaceEntranceRefStructure StopPlaceEntranceRef
        {
            get;
            set;
        }
        
        PointOfInterestRefStructure PointOfInterestRef
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("StopPlaceEntranceRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("StopPlaceEntranceRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class StopPlaceEntranceRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("navigationPaths_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("navigationPaths", Namespace="http://www.netex.org.uk/netex")]
    public partial class NavigationPathsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<NavigationPathStructure> _navigationPath;
        
        /// <summary>
        /// <para>Only basics included...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Only basics included...")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("NavigationPath")]
        public System.Collections.ObjectModel.Collection<NavigationPathStructure> NavigationPath
        {
            get
            {
                return _navigationPath;
            }
            private set
            {
                _navigationPath = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="NavigationPathsRelStructure" /> class.</para>
        /// </summary>
        public NavigationPathsRelStructure()
        {
            this._navigationPath = new System.Collections.ObjectModel.Collection<NavigationPathStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tariffZonesStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("tariffZones", Namespace="http://www.netex.org.uk/netex")]
    public partial class TariffZonesStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TariffZoneVersionStructure> _tariffZone;
        
        [System.Xml.Serialization.XmlElementAttribute("TariffZone")]
        public System.Collections.ObjectModel.Collection<TariffZoneVersionStructure> TariffZone
        {
            get
            {
                return _tariffZone;
            }
            private set
            {
                _tariffZone = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TariffZone collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TariffZoneSpecified
        {
            get
            {
                return (this.TariffZone.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TariffZonesStructure" /> class.</para>
        /// </summary>
        public TariffZonesStructure()
        {
            this._tariffZone = new System.Collections.ObjectModel.Collection<TariffZoneVersionStructure>();
        }
    }
    
    /// <summary>
    /// <para>A ZONE used to define a zonal fare structure in a zone-counting or zone-matrix system.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A ZONE used to define a zonal fare structure in a zone-counting or zone-matrix sy" +
        "stem.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TariffZone_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TariffZone", Namespace="http://www.netex.org.uk/netex")]
    public partial class TariffZoneVersionStructure : IGroupOfEntitiesElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TariffZoneVersionStructure" /> class.</para>
        /// </summary>
        public TariffZoneVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._infoLinks = new System.Collections.ObjectModel.Collection<InfoLinkStructure>();
            this._members = new System.Collections.ObjectModel.Collection<ScheduledStopPointRefStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>For EPIP note that Name should be considered as mandatory when in scope of NETWORK.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("For EPIP note that Name should be considered as mandatory when in scope of NETWOR" +
            "K.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PurposeOfGroupingRef")]
        public PurposeOfGroupingRefStructure PurposeOfGroupingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<InfoLinkStructure> _infoLinks;
        
        /// <summary>
        /// <para>Not in EPIP.                      Hyperlinks associated with presentation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Hyperlinks associated with presentation.")]
        [System.Xml.Serialization.XmlArrayAttribute("infoLinks")]
        [System.Xml.Serialization.XmlArrayItemAttribute("InfoLink", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<InfoLinkStructure> InfoLinks
        {
            get
            {
                return _infoLinks;
            }
            private set
            {
                _infoLinks = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the InfoLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InfoLinksSpecified
        {
            get
            {
                return (this.InfoLinks.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ScheduledStopPointRefStructure> _members;
        
        /// <summary>
        /// <para>Do not use members in EPIP!  The reference should instead be made from the respective ScheduledStopPoint.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Do not use members in EPIP! The reference should instead be made from the respect" +
            "ive ScheduledStopPoint.")]
        [System.Xml.Serialization.XmlArrayAttribute("members")]
        [System.Xml.Serialization.XmlArrayItemAttribute("ScheduledStopPointRef", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<ScheduledStopPointRefStructure> Members
        {
            get
            {
                return _members;
            }
            private set
            {
                _members = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Members collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MembersSpecified
        {
            get
            {
                return (this.Members.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("types")]
        public TypesStructure Types { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Centroid")]
        public CentroidStructure Centroid { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Polygon", Namespace="http://www.opengis.net/gml/3.2")]
        public Gml.TPolygon Polygon { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Presentation")]
        public PresentationStructure Presentation { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TariffZoneMembers", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TariffZoneMembers
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ScheduledStopPointRefStructure> _scheduledStopPointRef;
        
        [System.Xml.Serialization.XmlElementAttribute("ScheduledStopPointRef")]
        public System.Collections.ObjectModel.Collection<ScheduledStopPointRefStructure> ScheduledStopPointRef
        {
            get
            {
                return _scheduledStopPointRef;
            }
            private set
            {
                _scheduledStopPointRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ScheduledStopPointRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ScheduledStopPointRefSpecified
        {
            get
            {
                return (this.ScheduledStopPointRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TariffZoneMembers" /> class.</para>
        /// </summary>
        public TariffZoneMembers()
        {
            this._scheduledStopPointRef = new System.Collections.ObjectModel.Collection<ScheduledStopPointRefStructure>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("typesStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("types", Namespace="http://www.netex.org.uk/netex")]
    public partial class TypesStructure
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfZoneRef")]
        public TypeOfZoneRefStructure TypeOfZoneRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TypeOfZoneRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TypeOfZoneRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TypeOfZoneRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("stopAssignmentsStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("stopAssignments", Namespace="http://www.netex.org.uk/netex")]
    public partial class StopAssignmentsStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PassengerStopAssignmentVersionStructure> _passengerStopAssignment;
        
        [System.Xml.Serialization.XmlElementAttribute("PassengerStopAssignment")]
        public System.Collections.ObjectModel.Collection<PassengerStopAssignmentVersionStructure> PassengerStopAssignment
        {
            get
            {
                return _passengerStopAssignment;
            }
            private set
            {
                _passengerStopAssignment = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PassengerStopAssignment collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PassengerStopAssignmentSpecified
        {
            get
            {
                return (this.PassengerStopAssignment.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="StopAssignmentsStructure" /> class.</para>
        /// </summary>
        public StopAssignmentsStructure()
        {
            this._passengerStopAssignment = new System.Collections.ObjectModel.Collection<PassengerStopAssignmentVersionStructure>();
            this._dynamicStopAssignment = new System.Collections.ObjectModel.Collection<DynamicStopAssignmentVersionStructure>();
            this._trainStopAssignment = new System.Collections.ObjectModel.Collection<TrainStopAssignmentVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DynamicStopAssignmentVersionStructure> _dynamicStopAssignment;
        
        /// <summary>
        /// <para>A DYNAMIC STOP ASSIGNMENT in effect specifies a change to another PASSENGER STOP ASSIGNMENT, for
        ///exampel to make a platform (QUAY) change; it may apply to all journeys at the SCHEUDLED STOP POINT or
        ///to just the journeys following a particular JOURNEY PATTERN.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"A DYNAMIC STOP ASSIGNMENT in effect specifies a change to another PASSENGER STOP ASSIGNMENT, for exampel to make a platform (QUAY) change; it may apply to all journeys at the SCHEUDLED STOP POINT or to just the journeys following a particular JOURNEY PATTERN.")]
        [System.Xml.Serialization.XmlElementAttribute("DynamicStopAssignment")]
        public System.Collections.ObjectModel.Collection<DynamicStopAssignmentVersionStructure> DynamicStopAssignment
        {
            get
            {
                return _dynamicStopAssignment;
            }
            private set
            {
                _dynamicStopAssignment = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DynamicStopAssignment collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DynamicStopAssignmentSpecified
        {
            get
            {
                return (this.DynamicStopAssignment.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TrainStopAssignmentVersionStructure> _trainStopAssignment;
        
        [System.Xml.Serialization.XmlElementAttribute("TrainStopAssignment")]
        public System.Collections.ObjectModel.Collection<TrainStopAssignmentVersionStructure> TrainStopAssignment
        {
            get
            {
                return _trainStopAssignment;
            }
            private set
            {
                _trainStopAssignment = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TrainStopAssignment collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TrainStopAssignmentSpecified
        {
            get
            {
                return (this.TrainStopAssignment.Count != 0);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("timingPoints_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("timingPoints", Namespace="http://www.netex.org.uk/netex")]
    public partial class TimingPointsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TimingPointStructure> _timingPoint;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TimingPoint")]
        public System.Collections.ObjectModel.Collection<TimingPointStructure> TimingPoint
        {
            get
            {
                return _timingPoint;
            }
            private set
            {
                _timingPoint = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TimingPointsRelStructure" /> class.</para>
        /// </summary>
        public TimingPointsRelStructure()
        {
            this._timingPoint = new System.Collections.ObjectModel.Collection<TimingPointStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TimingPointStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TimingPoint", Namespace="http://www.netex.org.uk/netex")]
    public partial class TimingPointStructure : IPointElementGroup, IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TimingPointStructure" /> class.</para>
        /// </summary>
        public TimingPointStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._projections = new System.Collections.ObjectModel.Collection<PointProjectionStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Mandatory in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Location")]
        public LocationStructure Location { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PointNumber")]
        public string PointNumber { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PointProjectionStructure> _projections;
        
        [System.Xml.Serialization.XmlArrayAttribute("projections")]
        [System.Xml.Serialization.XmlArrayItemAttribute("PointProjection", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<PointProjectionStructure> Projections
        {
            get
            {
                return _projections;
            }
            private set
            {
                _projections = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Projections collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProjectionsSpecified
        {
            get
            {
                return (this.Projections.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("TimingPointStatus")]
        public TimingPointStatusEnumeration TimingPointStatus { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TimingPointStatus property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimingPointStatusSpecified { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("timingLinks_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("timingLinks", Namespace="http://www.netex.org.uk/netex")]
    public partial class TimingLinksRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TimingLinkVersionStructure> _timingLink;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TimingLink")]
        public System.Collections.ObjectModel.Collection<TimingLinkVersionStructure> TimingLink
        {
            get
            {
                return _timingLink;
            }
            private set
            {
                _timingLink = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TimingLinksRelStructure" /> class.</para>
        /// </summary>
        public TimingLinksRelStructure()
        {
            this._timingLink = new System.Collections.ObjectModel.Collection<TimingLinkVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TimingLink_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TimingLink", Namespace="http://www.netex.org.uk/netex")]
    public partial class TimingLinkVersionStructure : IDataManagedObjectElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TimingLinkVersionStructure" /> class.</para>
        /// </summary>
        public TimingLinkVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Distance")]
        public decimal Distance { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Distance property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DistanceSpecified { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("FromPointRef")]
        public ScheduledStopPointRefStructure FromPointRef { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ToPointRef")]
        public ScheduledStopPointRefStructure ToPointRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("OperationalContextRef")]
        public OperationalContextRefStructure OperationalContextRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("journeyPatternsStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("journeyPatterns", Namespace="http://www.netex.org.uk/netex")]
    public partial class JourneyPatternsStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<JourneyPatternVersionStructure> _journeyPattern;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("JourneyPattern")]
        public System.Collections.ObjectModel.Collection<JourneyPatternVersionStructure> JourneyPattern
        {
            get
            {
                return _journeyPattern;
            }
            private set
            {
                _journeyPattern = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the JourneyPattern collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool JourneyPatternSpecified
        {
            get
            {
                return (this.JourneyPattern.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyPatternsStructure" /> class.</para>
        /// </summary>
        public JourneyPatternsStructure()
        {
            this._journeyPattern = new System.Collections.ObjectModel.Collection<JourneyPatternVersionStructure>();
            this._serviceJourneyPattern = new System.Collections.ObjectModel.Collection<JourneyPatternVersionStructure>();
            this._deadRunJourneyPattern = new System.Collections.ObjectModel.Collection<DeadRunJourneyPatternVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<JourneyPatternVersionStructure> _serviceJourneyPattern;
        
        [System.Xml.Serialization.XmlElementAttribute("ServiceJourneyPattern")]
        public System.Collections.ObjectModel.Collection<JourneyPatternVersionStructure> ServiceJourneyPattern
        {
            get
            {
                return _serviceJourneyPattern;
            }
            private set
            {
                _serviceJourneyPattern = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ServiceJourneyPattern collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceJourneyPatternSpecified
        {
            get
            {
                return (this.ServiceJourneyPattern.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DeadRunJourneyPatternVersionStructure> _deadRunJourneyPattern;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("DeadRunJourneyPattern")]
        public System.Collections.ObjectModel.Collection<DeadRunJourneyPatternVersionStructure> DeadRunJourneyPattern
        {
            get
            {
                return _deadRunJourneyPattern;
            }
            private set
            {
                _deadRunJourneyPattern = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DeadRunJourneyPattern collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DeadRunJourneyPatternSpecified
        {
            get
            {
                return (this.DeadRunJourneyPattern.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DeadRunJourneyPattern_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("DeadRunJourneyPattern", Namespace="http://www.netex.org.uk/netex")]
    public partial class DeadRunJourneyPatternVersionStructure : ILinkSequenceElementGroup, IJourneyPatternTimingsGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DeadRunJourneyPatternVersionStructure" /> class.</para>
        /// </summary>
        public DeadRunJourneyPatternVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._projections = new System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure>();
            this._infoLinks = new System.Collections.ObjectModel.Collection<InfoLinkStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of LINK SEQUENCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of LINK SEQUENCE.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Units are as specified
        ///for Frame. Default is SI Metres.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Units are as specified for Frame. Default is SI Metres.")]
        [System.Xml.Serialization.XmlElementAttribute("Distance")]
        public decimal Distance { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Distance property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DistanceSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure> _projections;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlArrayAttribute("projections")]
        [System.Xml.Serialization.XmlArrayItemAttribute("LinkSequenceProjection", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure> Projections
        {
            get
            {
                return _projections;
            }
            private set
            {
                _projections = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Projections collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProjectionsSpecified
        {
            get
            {
                return (this.Projections.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<InfoLinkStructure> _infoLinks;
        
        /// <summary>
        /// <para>Not in EPIP.                      Hyperlinks associated with presentation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Hyperlinks associated with presentation.")]
        [System.Xml.Serialization.XmlArrayAttribute("infoLinks")]
        [System.Xml.Serialization.XmlArrayItemAttribute("InfoLink", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<InfoLinkStructure> InfoLinks
        {
            get
            {
                return _infoLinks;
            }
            private set
            {
                _infoLinks = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the InfoLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InfoLinksSpecified
        {
            get
            {
                return (this.InfoLinks.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("runTimes")]
        public JourneyPatternRunTimesStructure RunTimes { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("waitTimes")]
        public JourneyPatternWaitTimesStructure WaitTimes { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("headways")]
        public JourneyPatternHeadwaysStructure Headways { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("layovers")]
        public JourneyPatternLayoversStructure Layovers { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("pointsInSequence")]
        public StopPointsInSequenceRelStructure PointsInSequence { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("linksInSequence")]
        public LinksInSequenceRelStructure LinksInSequence { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Type for containment in frame of TIME DEMAND TYPE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for containment in frame of TIME DEMAND TYPE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("timeDemandTypesInFrame_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TimeDemandTypesInFrameRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TimeDemandTypeVersionStructure> _timeDemandType;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TimeDemandType")]
        public System.Collections.ObjectModel.Collection<TimeDemandTypeVersionStructure> TimeDemandType
        {
            get
            {
                return _timeDemandType;
            }
            private set
            {
                _timeDemandType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TimeDemandTypesInFrameRelStructure" /> class.</para>
        /// </summary>
        public TimeDemandTypesInFrameRelStructure()
        {
            this._timeDemandType = new System.Collections.ObjectModel.Collection<TimeDemandTypeVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TimeDemandType_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TimeDemandType", Namespace="http://www.netex.org.uk/netex")]
    public partial class TimeDemandTypeVersionStructure : IDataManagedObjectElementGroup, ITimeDemandTypeGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TimeDemandTypeVersionStructure" /> class.</para>
        /// </summary>
        public TimeDemandTypeVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of TIME DEMAND TYPE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of TIME DEMAND TYPE.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Description of TIME DEMAND TYPE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of TIME DEMAND TYPE.")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TypeOfTimeDemandTypeRef")]
        public TypeOfTimeDemandTypeRefStructure TypeOfTimeDemandTypeRef { get; set; }
        
        /// <summary>
        /// <para>The presentation colours to use for this demand type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The presentation colours to use for this demand type.")]
        [System.Xml.Serialization.XmlElementAttribute("Presentation")]
        public PresentationStructure Presentation { get; set; }
        
        /// <summary>
        /// <para>RUN TIMEs for TIME DEMAND TYPE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("RUN TIMEs for TIME DEMAND TYPE.")]
        [System.Xml.Serialization.XmlElementAttribute("runTimes")]
        public JourneyRunTimesStructure RunTimes { get; set; }
        
        /// <summary>
        /// <para>WAIT TIMEs for TIME DEMAND TYPE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("WAIT TIMEs for TIME DEMAND TYPE.")]
        [System.Xml.Serialization.XmlElementAttribute("waitTimes")]
        public JourneyWaitTimesStructure WaitTimes { get; set; }
        
        /// <summary>
        /// <para>LAYOVERs for TIME DEMAND TYPE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("LAYOVERs for TIME DEMAND TYPE.")]
        [System.Xml.Serialization.XmlElementAttribute("layovers")]
        public JourneyLayoversStructure Layovers { get; set; }
        
        /// <summary>
        /// <para>HEADWAYs for TIME DEMAND TYPE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("HEADWAYs for TIME DEMAND TYPE.")]
        [System.Xml.Serialization.XmlElementAttribute("headways")]
        public JourneyHeadwaysStructure Headways { get; set; }
        
        /// <summary>
        /// <para>VWHICLE PREFERENCEs for TIME DEMAND TYPE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("VWHICLE PREFERENCEs for TIME DEMAND TYPE.")]
        [System.Xml.Serialization.XmlElementAttribute("vehiclePreferences")]
        public VehicleTypePreferencesStructure VehiclePreferences { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Elements for a TIME DEMAND TYPE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for a TIME DEMAND TYPE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ITimeDemandTypeGroup : ITimeDemandTypeTimingsGroup
    {
        
        /// <summary>
        /// <para>Name of TIME DEMAND TYPE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of TIME DEMAND TYPE.")]
        MultilingualString Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Description of TIME DEMAND TYPE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of TIME DEMAND TYPE.")]
        MultilingualString Description
        {
            get;
            set;
        }
        
        PrivateCodeStructure PrivateCode
        {
            get;
            set;
        }
        
        TypeOfTimeDemandTypeRefStructure TypeOfTimeDemandTypeRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>The presentation colours to use for this demand type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The presentation colours to use for this demand type.")]
        PresentationStructure Presentation
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TypeOfTimeDemandTypeRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TypeOfTimeDemandTypeRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TypeOfTimeDemandTypeRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Timing Elements for a TIME DEMAND TYPE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Timing Elements for a TIME DEMAND TYPE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ITimeDemandTypeTimingsGroup
    {
        
        /// <summary>
        /// <para>RUN TIMEs for TIME DEMAND TYPE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("RUN TIMEs for TIME DEMAND TYPE.")]
        JourneyRunTimesStructure RunTimes
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>WAIT TIMEs for TIME DEMAND TYPE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("WAIT TIMEs for TIME DEMAND TYPE.")]
        JourneyWaitTimesStructure WaitTimes
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>LAYOVERs for TIME DEMAND TYPE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("LAYOVERs for TIME DEMAND TYPE.")]
        JourneyLayoversStructure Layovers
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>HEADWAYs for TIME DEMAND TYPE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("HEADWAYs for TIME DEMAND TYPE.")]
        JourneyHeadwaysStructure Headways
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>VWHICLE PREFERENCEs for TIME DEMAND TYPE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("VWHICLE PREFERENCEs for TIME DEMAND TYPE.")]
        VehicleTypePreferencesStructure VehiclePreferences
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Type for a list of JOURNEY RUN TIME.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a list of JOURNEY RUN TIME.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("journeyRunTimesStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JourneyRunTimesStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<JourneyRunTimeStructure> _journeyRunTime;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("JourneyRunTime")]
        public System.Collections.ObjectModel.Collection<JourneyRunTimeStructure> JourneyRunTime
        {
            get
            {
                return _journeyRunTime;
            }
            private set
            {
                _journeyRunTime = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyRunTimesStructure" /> class.</para>
        /// </summary>
        public JourneyRunTimesStructure()
        {
            this._journeyRunTime = new System.Collections.ObjectModel.Collection<JourneyRunTimeStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    /// <summary>
    /// <para>Type for a list of JOURNEY WAIT TIMEs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a list of JOURNEY WAIT TIMEs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("journeyWaitTimesStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JourneyWaitTimesStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<JourneyWaitTimeStructure> _journeyWaitTime;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("JourneyWaitTime")]
        public System.Collections.ObjectModel.Collection<JourneyWaitTimeStructure> JourneyWaitTime
        {
            get
            {
                return _journeyWaitTime;
            }
            private set
            {
                _journeyWaitTime = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyWaitTimesStructure" /> class.</para>
        /// </summary>
        public JourneyWaitTimesStructure()
        {
            this._journeyWaitTime = new System.Collections.ObjectModel.Collection<JourneyWaitTimeStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    /// <summary>
    /// <para>Type for a list of JOURNEY LAYOVERs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a list of JOURNEY LAYOVERs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("journeyLayoversStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JourneyLayoversStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<JourneyLayoverStructure> _journeyLayover;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("JourneyLayover")]
        public System.Collections.ObjectModel.Collection<JourneyLayoverStructure> JourneyLayover
        {
            get
            {
                return _journeyLayover;
            }
            private set
            {
                _journeyLayover = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyLayoversStructure" /> class.</para>
        /// </summary>
        public JourneyLayoversStructure()
        {
            this._journeyLayover = new System.Collections.ObjectModel.Collection<JourneyLayoverStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    /// <summary>
    /// <para>Type for a list of JOURNEY HEADWAY Interval.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a list of JOURNEY HEADWAY Interval.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("journeyHeadwaysStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JourneyHeadwaysStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<JourneyHeadwayStructure> _journeyHeadway;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("JourneyHeadway")]
        public System.Collections.ObjectModel.Collection<JourneyHeadwayStructure> JourneyHeadway
        {
            get
            {
                return _journeyHeadway;
            }
            private set
            {
                _journeyHeadway = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyHeadwaysStructure" /> class.</para>
        /// </summary>
        public JourneyHeadwaysStructure()
        {
            this._journeyHeadway = new System.Collections.ObjectModel.Collection<JourneyHeadwayStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    /// <summary>
    /// <para>Type for a list of VEHICLE TYPE PREFERENCEs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a list of VEHICLE TYPE PREFERENCEs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("vehicleTypePreferencesStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VehicleTypePreferencesStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<VehicleTypePreferenceStructure> _vehicleTypePreference;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("VehicleTypePreference")]
        public System.Collections.ObjectModel.Collection<VehicleTypePreferenceStructure> VehicleTypePreference
        {
            get
            {
                return _vehicleTypePreference;
            }
            private set
            {
                _vehicleTypePreference = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="VehicleTypePreferencesStructure" /> class.</para>
        /// </summary>
        public VehicleTypePreferencesStructure()
        {
            this._vehicleTypePreference = new System.Collections.ObjectModel.Collection<VehicleTypePreferenceStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    /// <summary>
    /// <para>Type for a VEHICLE TYPE PREFERENCE.</para>
    /// <para>The preference for the use of a particular VEHICLE TYPE for a SERVICE JOURNEY PATTERN, depending on the DAY TYPE and TIME DEMAND TYPE. The rank of preferences must be recorded. Different VEHICLE TYPEs may be given the same rank.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a VEHICLE TYPE PREFERENCE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("VehicleTypePreferenceStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("VehicleTypePreference", Namespace="http://www.netex.org.uk/netex")]
    public partial class VehicleTypePreferenceStructure : IVersionedChildElementGroup, IJourneyTimingGroup, IVehicleTypePreferenceGroup, IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="VehicleTypePreferenceStructure" /> class.</para>
        /// </summary>
        public VehicleTypePreferenceStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        /// <summary>
        /// <para>Name of JOURNEY TIMING.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of JOURNEY TIMING.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TimeDemandTypeRef")]
        public TimeDemandTypeRefStructure TimeDemandTypeRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TimebandRef")]
        public TimebandRefStructure TimebandRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("VehicleMode")]
        public AllModesEnumeration VehicleMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VehicleMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VehicleModeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("OperationalContextRef")]
        public OperationalContextRefStructure OperationalContextRef { get; set; }
        
        /// <summary>
        /// <para>Relative ranking of this preference.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Relative ranking of this preference.")]
        [System.Xml.Serialization.XmlElementAttribute("Rank")]
        public string Rank { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("DayTypeRef")]
        public DayTypeRefStructure DayTypeRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("VehicleTypePreferenceRef")]
        public VehicleTypePreferenceRefStructure VehicleTypePreferenceRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    /// <summary>
    /// <para>Elements for a VEHICLE TYPE PREFERENCE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for a VEHICLE TYPE PREFERENCE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IVehicleTypePreferenceGroup
    {
        
        /// <summary>
        /// <para>Relative ranking of this preference.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Relative ranking of this preference.")]
        string Rank
        {
            get;
            set;
        }
        
        DayTypeRefStructure DayTypeRef
        {
            get;
            set;
        }
        
        VehicleTypePreferenceRefStructure VehicleTypePreferenceRef
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("VehicleTypePreferenceRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("VehicleTypePreferenceRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class VehicleTypePreferenceRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("notices_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("notices", Namespace="http://www.netex.org.uk/netex")]
    public partial class NoticesRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<NoticeVersionStructure> _notice;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Notice")]
        public System.Collections.ObjectModel.Collection<NoticeVersionStructure> Notice
        {
            get
            {
                return _notice;
            }
            private set
            {
                _notice = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="NoticesRelStructure" /> class.</para>
        /// </summary>
        public NoticesRelStructure()
        {
            this._notice = new System.Collections.ObjectModel.Collection<NoticeVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ServiceJourney_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ServiceJourney", Namespace="http://www.netex.org.uk/netex")]
    public partial class ServiceJourneyVersionStructure : ILinkSequenceElementGroup, IJourneyBaseContentGroup, IServiceJourneyGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ServiceJourneyVersionStructure" /> class.</para>
        /// </summary>
        public ServiceJourneyVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._projections = new System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure>();
            this._infoLinks = new System.Collections.ObjectModel.Collection<InfoLinkStructure>();
            this._dayTypes = new System.Collections.ObjectModel.Collection<DayTypeRefStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of LINK SEQUENCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of LINK SEQUENCE.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Units are as specified
        ///for Frame. Default is SI Metres.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Units are as specified for Frame. Default is SI Metres.")]
        [System.Xml.Serialization.XmlElementAttribute("Distance")]
        public decimal Distance { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Distance property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DistanceSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure> _projections;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlArrayAttribute("projections")]
        [System.Xml.Serialization.XmlArrayItemAttribute("LinkSequenceProjection", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure> Projections
        {
            get
            {
                return _projections;
            }
            private set
            {
                _projections = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Projections collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProjectionsSpecified
        {
            get
            {
                return (this.Projections.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<InfoLinkStructure> _infoLinks;
        
        /// <summary>
        /// <para>Not in EPIP.                      Hyperlinks associated with presentation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Hyperlinks associated with presentation.")]
        [System.Xml.Serialization.XmlArrayAttribute("infoLinks")]
        [System.Xml.Serialization.XmlArrayItemAttribute("InfoLink", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<InfoLinkStructure> InfoLinks
        {
            get
            {
                return _infoLinks;
            }
            private set
            {
                _infoLinks = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the InfoLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InfoLinksSpecified
        {
            get
            {
                return (this.InfoLinks.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>MODE of transport of JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("MODE of transport of JOURNEY.")]
        [System.Xml.Serialization.XmlElementAttribute("TransportMode")]
        public AllVehicleModesOfTransportEnumeration TransportMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransportMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TransportModeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TransportSubmode")]
        public TransportSubmodeStructure TransportSubmode { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Monitored")]
        public bool Monitored { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Monitored property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MonitoredSpecified { get; set; }
        
        /// <summary>
        /// <para>NOTICEs relevant for this Journey.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("NOTICEs relevant for this Journey.")]
        [System.Xml.Serialization.XmlElementAttribute("noticeAssignments")]
        public NoticeAssignmentsRelStructure NoticeAssignments { get; set; }
        
        /// <summary>
        /// <para>Time of departure.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Time of departure.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("DepartureTime")]
        public string DepartureTime { get; set; }
        
        /// <summary>
        /// <para>Day offset if day of departure time of VEHICLE JOURNEY differs from the current OPERATING DAY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Day offset if day of departure time of VEHICLE JOURNEY differs from the current O" +
            "PERATING DAY.")]
        [System.Xml.Serialization.XmlElementAttribute("DepartureDayOffset")]
        public string DepartureDayOffset { get; set; }
        
        /// <summary>
        /// <para>Not part of EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not part of EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Frequency")]
        public FrequencyStructure Frequency { get; set; }
        
        /// <summary>
        /// <para>Total length of Journey. Can be computed from individual times.  Add to Departure time to obtain JOURNEY arrival time.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Total length of Journey. Can be computed from individual times. Add to Departure " +
            "time to obtain JOURNEY arrival time.")]
        [System.Xml.Serialization.XmlElementAttribute("JourneyDuration")]
        public string JourneyDuration { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DayTypeRefStructure> _dayTypes;
        
        [System.Xml.Serialization.XmlArrayAttribute("dayTypes")]
        [System.Xml.Serialization.XmlArrayItemAttribute("DayTypeRef", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<DayTypeRefStructure> DayTypes
        {
            get
            {
                return _dayTypes;
            }
            private set
            {
                _dayTypes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DayTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DayTypesSpecified
        {
            get
            {
                return (this.DayTypes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("RouteRef")]
        public RouteRefStructure RouteRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("JourneyPatternRef")]
        public JourneyPatternRefStructure JourneyPatternRef { get; set; }
        
        /// <summary>
        /// <para>The only concrete JourneyPatternRef in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The only concrete JourneyPatternRef in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("ServiceJourneyPatternRef")]
        public ServiceJourneyPatternRefStructure ServiceJourneyPatternRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("ServicePatternRef")]
        public JourneyPatternRefStructure ServicePatternRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("TimeDemandTypeRef")]
        public TimeDemandTypeRefStructure TimeDemandTypeRef { get; set; }
        
        /// <summary>
        /// <para>Reference to TYPE OF VEHICLE to use on SERVICE
        ///JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to TYPE OF VEHICLE to use on SERVICE JOURNEY.")]
        [System.Xml.Serialization.XmlElementAttribute("VehicleTypeRef")]
        public VehicleTypeRefStructure VehicleTypeRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("TrainRef")]
        public TrainRefStructure TrainRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("BlockRef")]
        public BlockRefStructure BlockRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("OperatorRef")]
        public OperatorRefStructure OperatorRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("OperatorView")]
        public OperatorViewStructure OperatorView { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("LineRef")]
        public LineRefStructure LineRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("LineView")]
        public LineViewStructure LineView { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("FlexibleLineView")]
        public FlexibleLineViewStructure FlexibleLineView { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("DirectionType")]
        public DirectionTypeEnumeration DirectionType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DirectionType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirectionTypeSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("JourneyPatternView")]
        public JourneyPatternViewStructure JourneyPatternView { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("timeDemandTypes")]
        public TimeDemandTypeRefsRelStructure TimeDemandTypes { get; set; }
        
        /// <summary>
        /// <para>TRAIN NUMBER(s) associated with SERVICE JOURNEY or part of the SERVICE JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("TRAIN NUMBER(s) associated with SERVICE JOURNEY or part of the SERVICE JOURNEY.")]
        [System.Xml.Serialization.XmlElementAttribute("trainNumbers")]
        public TrainNumberOrRefsStructure TrainNumbers { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("waitTimes")]
        public VehicleJourneyWaitTimesStructure WaitTimes { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("runTimes")]
        public VehicleJourneyRunTimesStructure RunTimes { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("layovers")]
        public VehicleJourneyLayoversStructure Layovers { get; set; }
        
        /// <summary>
        /// <para>Mandatory in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("passingTimes")]
        public PassingTimesRelStructure PassingTimes { get; set; }
        
        /// <summary>
        /// <para>In the EPIP, the JOURNEY PARTs should be embedded in-line with their parent SERVICE JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("In the EPIP, the JOURNEY PARTs should be embedded in-line with their parent SERVI" +
            "CE JOURNEY.")]
        [System.Xml.Serialization.XmlElementAttribute("parts")]
        public JourneyPartsRelStructure Parts { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("calls")]
        public ServiceJourneyCallsRelStructure Calls { get; set; }
        
        /// <summary>
        /// <para>Facilities available associated with JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Facilities available associated with JOURNEY.")]
        [System.Xml.Serialization.XmlElementAttribute("facilities")]
        public ServiceFacilitiesRelStructure Facilities { get; set; }
        
        /// <summary>
        /// <para>Requirements for TRAIN SIZE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Requirements for TRAIN SIZE.")]
        [System.Xml.Serialization.XmlElementAttribute("TrainSize")]
        public TrainSizeStructure TrainSize { get; set; }
        
        /// <summary>
        /// <para>VEHICLE EQUIPMENT available on servce. Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("VEHICLE EQUIPMENT available on servce. Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("equipments")]
        public EquipmentsRelStructure Equipments { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("FlexibleServiceProperties")]
        public FlexibleServicePropertiesVersionStructure FlexibleServiceProperties { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IJourneyBaseContentGroup
    {
        
        /// <summary>
        /// <para>MODE of transport of JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("MODE of transport of JOURNEY.")]
        AllVehicleModesOfTransportEnumeration TransportMode
        {
            get;
            set;
        }
        
        TransportSubmodeStructure TransportSubmode
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        bool Monitored
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>NOTICEs relevant for this Journey.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("NOTICEs relevant for this Journey.")]
        NoticeAssignmentsRelStructure NoticeAssignments
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IServiceJourneyGroup : IServiceTimeGroup, IJourneyPatternRefGroup, IVehicleJourneyTimingsGroup
    {
        
        System.Collections.ObjectModel.Collection<DayTypeRefStructure> DayTypes
        {
            get;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        RouteRefStructure RouteRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        TimeDemandTypeRefStructure TimeDemandTypeRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Reference to TYPE OF VEHICLE to use on SERVICE
        ///JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to TYPE OF VEHICLE to use on SERVICE JOURNEY.")]
        VehicleTypeRefStructure VehicleTypeRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        TrainRefStructure TrainRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        BlockRefStructure BlockRef
        {
            get;
            set;
        }
        
        OperatorRefStructure OperatorRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        OperatorViewStructure OperatorView
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        LineRefStructure LineRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        LineViewStructure LineView
        {
            get;
            set;
        }
        
        FlexibleLineViewStructure FlexibleLineView
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        DirectionTypeEnumeration DirectionType
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        JourneyPatternViewStructure JourneyPatternView
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        TimeDemandTypeRefsRelStructure TimeDemandTypes
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>TRAIN NUMBER(s) associated with SERVICE JOURNEY or part of the SERVICE JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("TRAIN NUMBER(s) associated with SERVICE JOURNEY or part of the SERVICE JOURNEY.")]
        TrainNumberOrRefsStructure TrainNumbers
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Mandatory in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP.")]
        PassingTimesRelStructure PassingTimes
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>In the EPIP, the JOURNEY PARTs should be embedded in-line with their parent SERVICE JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("In the EPIP, the JOURNEY PARTs should be embedded in-line with their parent SERVI" +
            "CE JOURNEY.")]
        JourneyPartsRelStructure Parts
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        ServiceJourneyCallsRelStructure Calls
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Facilities available associated with JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Facilities available associated with JOURNEY.")]
        ServiceFacilitiesRelStructure Facilities
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Requirements for TRAIN SIZE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Requirements for TRAIN SIZE.")]
        TrainSizeStructure TrainSize
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>VEHICLE EQUIPMENT available on servce. Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("VEHICLE EQUIPMENT available on servce. Not in EPIP.")]
        EquipmentsRelStructure Equipments
        {
            get;
            set;
        }
        
        FlexibleServicePropertiesVersionStructure FlexibleServiceProperties
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("dayTypes2Structure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DayTypes2Structure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DayTypeRefStructure> _dayTypeRef;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("DayTypeRef")]
        public System.Collections.ObjectModel.Collection<DayTypeRefStructure> DayTypeRef
        {
            get
            {
                return _dayTypeRef;
            }
            private set
            {
                _dayTypeRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DayTypes2Structure" /> class.</para>
        /// </summary>
        public DayTypes2Structure()
        {
            this._dayTypeRef = new System.Collections.ObjectModel.Collection<DayTypeRefStructure>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("VehicleTypeRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("VehicleTypeRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class VehicleTypeRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("JourneyPatternViewStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("JourneyPatternView", Namespace="http://www.netex.org.uk/netex")]
    public partial class JourneyPatternViewStructure : IJourneyPatternProperties
    {
        
        [System.Xml.Serialization.XmlElementAttribute("RouteRef")]
        public RouteRefStructure RouteRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("RouteView")]
        public RouteViewStructure RouteView { get; set; }
        
        /// <summary>
        /// <para>DIRECTION of JOURNEY PATTERN. Should be same as for ROUTE on which PATTERN is based.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("DIRECTION of JOURNEY PATTERN. Should be same as for ROUTE on which PATTERN is bas" +
            "ed.")]
        [System.Xml.Serialization.XmlElementAttribute("DirectionType")]
        public DirectionTypeEnumeration DirectionType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DirectionType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirectionTypeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("DirectionRef")]
        public DirectionRefStructure DirectionRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("DestinationDisplayRef")]
        public DestinationDisplayRefStructure DestinationDisplayRef { get; set; }
        
        /// <summary>
        /// <para>Destination / Direction name for JOURNEY PATTERN.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Destination / Direction name for JOURNEY PATTERN.")]
        [System.Xml.Serialization.XmlElementAttribute("DestinationDisplayView")]
        public DestinationDisplayViewStructure DestinationDisplayView { get; set; }
        
        /// <summary>
        /// <para>Notices for JOURNEY PATTERN Points may be</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Notices for JOURNEY PATTERN Points may be")]
        [System.Xml.Serialization.XmlElementAttribute("noticeAssignments")]
        public NoticeAssignmentsRelStructure NoticeAssignments { get; set; }
    }
    
    /// <summary>
    /// <para>Elements for a JOURNEY PATTERN PROPERTies.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for a JOURNEY PATTERN PROPERTies.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IJourneyPatternProperties
    {
        
        RouteRefStructure RouteRef
        {
            get;
            set;
        }
        
        RouteViewStructure RouteView
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>DIRECTION of JOURNEY PATTERN. Should be same as for ROUTE on which PATTERN is based.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("DIRECTION of JOURNEY PATTERN. Should be same as for ROUTE on which PATTERN is bas" +
            "ed.")]
        DirectionTypeEnumeration DirectionType
        {
            get;
            set;
        }
        
        DirectionRefStructure DirectionRef
        {
            get;
            set;
        }
        
        DestinationDisplayRefStructure DestinationDisplayRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Destination / Direction name for JOURNEY PATTERN.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Destination / Direction name for JOURNEY PATTERN.")]
        DestinationDisplayViewStructure DestinationDisplayView
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Notices for JOURNEY PATTERN Points may be</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Notices for JOURNEY PATTERN Points may be")]
        NoticeAssignmentsRelStructure NoticeAssignments
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("timeDemandTypeRefs_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("timeDemandTypes", Namespace="http://www.netex.org.uk/netex")]
    public partial class TimeDemandTypeRefsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TimeDemandTypeRefStructure> _timeDemandTypeRef;
        
        [System.Xml.Serialization.XmlElementAttribute("TimeDemandTypeRef")]
        public System.Collections.ObjectModel.Collection<TimeDemandTypeRefStructure> TimeDemandTypeRef
        {
            get
            {
                return _timeDemandTypeRef;
            }
            private set
            {
                _timeDemandTypeRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TimeDemandTypeRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeDemandTypeRefSpecified
        {
            get
            {
                return (this.TimeDemandTypeRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TimeDemandTypeRefsRelStructure" /> class.</para>
        /// </summary>
        public TimeDemandTypeRefsRelStructure()
        {
            this._timeDemandTypeRef = new System.Collections.ObjectModel.Collection<TimeDemandTypeRefStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("trainNumberOrRefsStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TrainNumberOrRefsStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TrainNumberRefStructure> _trainNumberRef;
        
        [System.Xml.Serialization.XmlElementAttribute("TrainNumberRef")]
        public System.Collections.ObjectModel.Collection<TrainNumberRefStructure> TrainNumberRef
        {
            get
            {
                return _trainNumberRef;
            }
            private set
            {
                _trainNumberRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TrainNumberRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TrainNumberRefSpecified
        {
            get
            {
                return (this.TrainNumberRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TrainNumberOrRefsStructure" /> class.</para>
        /// </summary>
        public TrainNumberOrRefsStructure()
        {
            this._trainNumberRef = new System.Collections.ObjectModel.Collection<TrainNumberRefStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("passingTimes_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("passingTimes", Namespace="http://www.netex.org.uk/netex")]
    public partial class PassingTimesRelStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TimetabledPassingTimeStructure> _timetabledPassingTime;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TimetabledPassingTime")]
        public System.Collections.ObjectModel.Collection<TimetabledPassingTimeStructure> TimetabledPassingTime
        {
            get
            {
                return _timetabledPassingTime;
            }
            private set
            {
                _timetabledPassingTime = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PassingTimesRelStructure" /> class.</para>
        /// </summary>
        public PassingTimesRelStructure()
        {
            this._timetabledPassingTime = new System.Collections.ObjectModel.Collection<TimetabledPassingTimeStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    /// <summary>
    /// <para>TIMETABLED PASSING TIME at TIMING POINT.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("TIMETABLED PASSING TIME at TIMING POINT.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TimetabledPassingTimeStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TimetabledPassingTime", Namespace="http://www.netex.org.uk/netex")]
    public partial class TimetabledPassingTimeStructure : IPointInJourneyPatternPointGroup, IEntityAttributeGroup
    {
        
        /// <summary>
        /// <para>To be used in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("To be used in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("StopPointInJourneyPatternRef")]
        public StopPointInJourneyPatternRefStructure StopPointInJourneyPatternRef { get; set; }
        
        /// <summary>
        /// <para>Timetabled arrival time.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Timetabled arrival time.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("ArrivalTime")]
        public string ArrivalTime { get; set; }
        
        /// <summary>
        /// <para>Number of days after the starting time of the journey if  not same calendar day. Default is 0 for same day.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Number of days after the starting time of the journey if not same calendar day. D" +
            "efault is 0 for same day.")]
        [System.Xml.Serialization.XmlElementAttribute("ArrivalDayOffset")]
        public string ArrivalDayOffset { get; set; }
        
        /// <summary>
        /// <para>Timetabled departure time.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Timetabled departure time.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("DepartureTime")]
        public string DepartureTime { get; set; }
        
        /// <summary>
        /// <para>Number of days after the starting time of the journey if  not same calendar day. Default is 0 for same day.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Number of days after the starting time of the journey if not same calendar day. D" +
            "efault is 0 for same day.")]
        [System.Xml.Serialization.XmlElementAttribute("DepartureDayOffset")]
        public string DepartureDayOffset { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Headway")]
        public HeadwayIntervalStructure Headway { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IPointInJourneyPatternPointGroup
    {
        
        /// <summary>
        /// <para>To be used in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("To be used in EPIP.")]
        StopPointInJourneyPatternRefStructure StopPointInJourneyPatternRef
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("StopPointInJourneyPatternRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PointInJourneyPatternRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StopPointInJourneyPatternRef))]
    public partial class StopPointInJourneyPatternRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("journeyParts_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JourneyPartsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<JourneyPartRefStructure> _journeyPartRef;
        
        /// <summary>
        /// <para>Not to be used in EPIP. In the EPIP, the JOURNEY PARTs should be embedded in-line with their parent SERVICE JOURNEY</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not to be used in EPIP. In the EPIP, the JOURNEY PARTs should be embedded in-line" +
            " with their parent SERVICE JOURNEY")]
        [System.Xml.Serialization.XmlElementAttribute("JourneyPartRef")]
        public System.Collections.ObjectModel.Collection<JourneyPartRefStructure> JourneyPartRef
        {
            get
            {
                return _journeyPartRef;
            }
            private set
            {
                _journeyPartRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the JourneyPartRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool JourneyPartRefSpecified
        {
            get
            {
                return (this.JourneyPartRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyPartsRelStructure" /> class.</para>
        /// </summary>
        public JourneyPartsRelStructure()
        {
            this._journeyPartRef = new System.Collections.ObjectModel.Collection<JourneyPartRefStructure>();
            this._journeyPart = new System.Collections.ObjectModel.Collection<JourneyPartVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<JourneyPartVersionStructure> _journeyPart;
        
        /// <summary>
        /// <para>A JOURNEY PART is a part of a VEHICLE JOURNEY created to distinguish a specific functional purpose, for instance in situations when vehicle coupling or separating occurs. A JOURNEY PART can be demarcated by a
        ///start and end SCHEDULED STOP POINT. (NB A given stop may be visited only once within a JOURNEY PART).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"A JOURNEY PART is a part of a VEHICLE JOURNEY created to distinguish a specific functional purpose, for instance in situations when vehicle coupling or separating occurs. A JOURNEY PART can be demarcated by a start and end SCHEDULED STOP POINT. (NB A given stop may be visited only once within a JOURNEY PART).")]
        [System.Xml.Serialization.XmlElementAttribute("JourneyPart")]
        public System.Collections.ObjectModel.Collection<JourneyPartVersionStructure> JourneyPart
        {
            get
            {
                return _journeyPart;
            }
            private set
            {
                _journeyPart = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the JourneyPart collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool JourneyPartSpecified
        {
            get
            {
                return (this.JourneyPart.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>A part of a VEHICLE JOURNEY created according to a specific functional purpose, for instance in situations when vehicle coupling or separating occurs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A part of a VEHICLE JOURNEY created according to a specific functional purpose, f" +
        "or instance in situations when vehicle coupling or separating occurs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("JourneyPart_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("JourneyPart", Namespace="http://www.netex.org.uk/netex")]
    public partial class JourneyPartVersionStructure : IDataManagedObjectElementGroup, IJourneyPartGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyPartVersionStructure" /> class.</para>
        /// </summary>
        public JourneyPartVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Description of JOURNEY PART.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of JOURNEY PART.")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. Reference to parent of which this is part. If given by context does not need to be stated.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Reference to parent of which this is part. If given by context does " +
            "not need to be stated.")]
        [System.Xml.Serialization.XmlElementAttribute("ParentJourneyRef")]
        public VehicleJourneyRefStructure ParentJourneyRef { get; set; }
        
        /// <summary>
        /// <para>Main JOURNEY PART for journey.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Main JOURNEY PART for journey.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("MainPartRef")]
        public JourneyPartCoupleRefStructure MainPartRef { get; set; }
        
        /// <summary>
        /// <para>Reference to JOURNEY PART COUPLE of the JOURNEY that JOURNEY PART joins.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to JOURNEY PART COUPLE of the JOURNEY that JOURNEY PART joins.")]
        [System.Xml.Serialization.XmlElementAttribute("JourneyPartCoupleRef")]
        public JourneyPartCoupleRefStructure JourneyPartCoupleRef { get; set; }
        
        /// <summary>
        /// <para>Reference to a TRAIN NUMBER.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a TRAIN NUMBER.")]
        [System.Xml.Serialization.XmlElementAttribute("TrainNumberRef")]
        public TrainNumberRefStructure TrainNumberRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("BlockPartRef")]
        public BlockPartRefStructure BlockPartRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("TrainBlockPartRef")]
        public TrainBlockPartRefStructure TrainBlockPartRef { get; set; }
        
        /// <summary>
        /// <para>Point at which this JOURNEY PART starts.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Point at which this JOURNEY PART starts.")]
        [System.Xml.Serialization.XmlElementAttribute("FromStopPointRef")]
        public ScheduledStopPointRefStructure FromStopPointRef { get; set; }
        
        /// <summary>
        /// <para>Point at which this JOURNEY PART ends.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Point at which this JOURNEY PART ends.")]
        [System.Xml.Serialization.XmlElementAttribute("ToStopPointRef")]
        public ScheduledStopPointRefStructure ToStopPointRef { get; set; }
        
        /// <summary>
        /// <para>Start time of JOURNEY PART.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Start time of JOURNEY PART.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("StartTime")]
        public string StartTime { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _startTimeDayOffset = "0";
        
        /// <summary>
        /// <para>Number of days after journey start time that start time is.</para>
        /// <para>Offset in days.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("0")]
        [System.ComponentModel.DescriptionAttribute("Number of days after journey start time that start time is.")]
        [System.Xml.Serialization.XmlElementAttribute("StartTimeDayOffset")]
        public string StartTimeDayOffset
        {
            get
            {
                return _startTimeDayOffset;
            }
            set
            {
                _startTimeDayOffset = value;
            }
        }
        
        /// <summary>
        /// <para>End time of JOURNEY PART.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("End time of JOURNEY PART.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("EndTime")]
        public string EndTime { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _endTimeDayOffset = "0";
        
        /// <summary>
        /// <para>Number of days after journey start time that end time is.</para>
        /// <para>Offset in days.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("0")]
        [System.ComponentModel.DescriptionAttribute("Number of days after journey start time that end time is.")]
        [System.Xml.Serialization.XmlElementAttribute("EndTimeDayOffset")]
        public string EndTimeDayOffset
        {
            get
            {
                return _endTimeDayOffset;
            }
            set
            {
                _endTimeDayOffset = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _vehicleOrientation = true;
        
        /// <summary>
        /// <para>Not in EPIP. Orientation of the vehicle carrying
        ///out the JOURNEY PART compared to the definition
        ///of the corresponding VEHICLE TYPE. true for forward.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Orientation of the vehicle carrying out the JOURNEY PART compared to" +
            " the definition of the corresponding VEHICLE TYPE. true for forward.")]
        [System.Xml.Serialization.XmlElementAttribute("VehicleOrientation")]
        public bool VehicleOrientation
        {
            get
            {
                return _vehicleOrientation;
            }
            set
            {
                _vehicleOrientation = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("PurposeOfJourneyPartitionRef")]
        public PurposeOfJourneyPartitionRefStructure PurposeOfJourneyPartitionRef { get; set; }
        
        /// <summary>
        /// <para>Facilities available during JOURNEY PART.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Facilities available during JOURNEY PART.")]
        [System.Xml.Serialization.XmlElementAttribute("facilities")]
        public ServiceFacilitiesRelStructure Facilities { get; set; }
        
        /// <summary>
        /// <para>Positions in Train of JOURNEY PART.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Positions in Train of JOURNEY PART.")]
        [System.Xml.Serialization.XmlElementAttribute("journeyPartPositions")]
        public JourneyPartPositionsRelStructure JourneyPartPositions { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
        
        /// <summary>
        /// <para>Order of JOURNEY PART  within JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Order of JOURNEY PART within JOURNEY.")]
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public string Order { get; set; }
    }
    
    /// <summary>
    /// <para>Elements for JOURNEY PART.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for JOURNEY PART.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IJourneyPartGroup : IJourneyPartReferencesGroup, IJourneyPartTimeGroup
    {
        
        /// <summary>
        /// <para>Description of JOURNEY PART.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of JOURNEY PART.")]
        MultilingualString Description
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP. Reference to parent of which this is part. If given by context does not need to be stated.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Reference to parent of which this is part. If given by context does " +
            "not need to be stated.")]
        VehicleJourneyRefStructure ParentJourneyRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP. Orientation of the vehicle carrying
        ///out the JOURNEY PART compared to the definition
        ///of the corresponding VEHICLE TYPE. true for forward.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Orientation of the vehicle carrying out the JOURNEY PART compared to" +
            " the definition of the corresponding VEHICLE TYPE. true for forward.")]
        bool VehicleOrientation
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        PurposeOfJourneyPartitionRefStructure PurposeOfJourneyPartitionRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Facilities available during JOURNEY PART.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Facilities available during JOURNEY PART.")]
        ServiceFacilitiesRelStructure Facilities
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Positions in Train of JOURNEY PART.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Positions in Train of JOURNEY PART.")]
        JourneyPartPositionsRelStructure JourneyPartPositions
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PurposeOfJourneyPartitionRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("PurposeOfJourneyPartitionRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class PurposeOfJourneyPartitionRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Type for a list of JOURNEY PART POSITIONs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a list of JOURNEY PART POSITIONs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("journeyPartPositions_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JourneyPartPositionsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<JourneyPartPositionStructure> _journeyPartPosition;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("JourneyPartPosition")]
        public System.Collections.ObjectModel.Collection<JourneyPartPositionStructure> JourneyPartPosition
        {
            get
            {
                return _journeyPartPosition;
            }
            private set
            {
                _journeyPartPosition = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyPartPositionsRelStructure" /> class.</para>
        /// </summary>
        public JourneyPartPositionsRelStructure()
        {
            this._journeyPartPosition = new System.Collections.ObjectModel.Collection<JourneyPartPositionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>Reference Elements for JOURNEY PART.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Reference Elements for JOURNEY PART.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IJourneyPartReferencesGroup
    {
        
        /// <summary>
        /// <para>Main JOURNEY PART for journey.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Main JOURNEY PART for journey.")]
        JourneyPartCoupleRefStructure MainPartRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Reference to JOURNEY PART COUPLE of the JOURNEY that JOURNEY PART joins.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to JOURNEY PART COUPLE of the JOURNEY that JOURNEY PART joins.")]
        JourneyPartCoupleRefStructure JourneyPartCoupleRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Reference to a TRAIN NUMBER.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a TRAIN NUMBER.")]
        TrainNumberRefStructure TrainNumberRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        BlockPartRefStructure BlockPartRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        TrainBlockPartRefStructure TrainBlockPartRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Point at which this JOURNEY PART starts.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Point at which this JOURNEY PART starts.")]
        ScheduledStopPointRefStructure FromStopPointRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Point at which this JOURNEY PART ends.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Point at which this JOURNEY PART ends.")]
        ScheduledStopPointRefStructure ToStopPointRef
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BlockPartRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("BlockPartRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class BlockPartRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TrainBlockPartRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TrainBlockPartRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TrainBlockPartRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Time Elements for JOURNEY PART.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Time Elements for JOURNEY PART.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IJourneyPartTimeGroup
    {
        
        /// <summary>
        /// <para>Start time of JOURNEY PART.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Start time of JOURNEY PART.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        string StartTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Number of days after journey start time that start time is.</para>
        /// <para>Offset in days.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("0")]
        [System.ComponentModel.DescriptionAttribute("Number of days after journey start time that start time is.")]
        string StartTimeDayOffset
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>End time of JOURNEY PART.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("End time of JOURNEY PART.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        string EndTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Number of days after journey start time that end time is.</para>
        /// <para>Offset in days.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("0")]
        [System.ComponentModel.DescriptionAttribute("Number of days after journey start time that end time is.")]
        string EndTimeDayOffset
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("serviceJourneyCalls_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServiceJourneyCallsRelStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<CallStructure> _call;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Call")]
        public System.Collections.ObjectModel.Collection<CallStructure> Call
        {
            get
            {
                return _call;
            }
            private set
            {
                _call = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ServiceJourneyCallsRelStructure" /> class.</para>
        /// </summary>
        public ServiceJourneyCallsRelStructure()
        {
            this._call = new System.Collections.ObjectModel.Collection<CallStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CallStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Call", Namespace="http://www.netex.org.uk/netex")]
    public partial class CallStructure : IEntityAttributeGroup
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ScheduledStopPointRef")]
        public ScheduledStopPointRefStructure ScheduledStopPointRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("OnwardTimingLinkView")]
        public TimingLinkViewStructure OnwardTimingLinkView { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TimingPointStatus")]
        public string TimingPointStatus { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Arrival")]
        public ArrivalStructure Arrival { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DepartureStructure> _departure;
        
        [System.Xml.Serialization.XmlElementAttribute("Departure")]
        public System.Collections.ObjectModel.Collection<DepartureStructure> Departure
        {
            get
            {
                return _departure;
            }
            private set
            {
                _departure = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Departure collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DepartureSpecified
        {
            get
            {
                return (this.Departure.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CallStructure" /> class.</para>
        /// </summary>
        public CallStructure()
        {
            this._departure = new System.Collections.ObjectModel.Collection<DepartureStructure>();
        }
        
        /// <summary>
        /// <para>Reference to a DESTINATION DISPLAY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a DESTINATION DISPLAY.")]
        [System.Xml.Serialization.XmlElementAttribute("DestinationDisplayRef")]
        public DestinationDisplayRefStructure DestinationDisplayRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("DestinationDisplayView")]
        public DestinationDisplayViewStructure DestinationDisplayView { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("FlexiblePointProperties")]
        public FlexiblePointPropertiesStructure FlexiblePointProperties { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ChangeOfDestinationDisplay")]
        public bool ChangeOfDestinationDisplay { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChangeOfDestinationDisplay property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangeOfDestinationDisplaySpecified { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public string Order { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TimingLinkViewStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TimingLinkViewStructure
    {
        
        [System.Xml.Serialization.XmlElementAttribute("TimingLinkRef")]
        public TimingLinkRefStructure TimingLinkRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ToPointRef")]
        public ScheduledStopPointRefStructure ToPointRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("RunTime")]
        public string RunTime { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ArrivalStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Arrival", Namespace="http://www.netex.org.uk/netex")]
    public partial class ArrivalStructure
    {
        
        /// <summary>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("Time")]
        public string Time { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("DayOffset")]
        public int DayOffset { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DayOffset property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DayOffsetSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _forAlighting = true;
        
        /// <summary>
        /// <para>Whether  alighting is allowed at the stop  Default is true.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Whether alighting is allowed at the stop Default is true.")]
        [System.Xml.Serialization.XmlElementAttribute("ForAlighting")]
        public bool ForAlighting
        {
            get
            {
                return _forAlighting;
            }
            set
            {
                _forAlighting = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _isFlexible = false;
        
        /// <summary>
        /// <para>Whether use of stop is flexible, i.e. requires phoning to arrange. Must be a  FLEXIBLE LINE.  Default is false.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Whether use of stop is flexible, i.e. requires phoning to arrange. Must be a FLEX" +
            "IBLE LINE. Default is false.")]
        [System.Xml.Serialization.XmlElementAttribute("IsFlexible")]
        public bool IsFlexible
        {
            get
            {
                return _isFlexible;
            }
            set
            {
                _isFlexible = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DepartureStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Departure", Namespace="http://www.netex.org.uk/netex")]
    public partial class DepartureStructure : ICallDeparturePartGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("Time")]
        public string Time { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("DayOffset")]
        public int DayOffset { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DayOffset property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DayOffsetSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _forBoarding = true;
        
        /// <summary>
        /// <para>Whether  boarding is allowed at the stop. Default is true.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Whether boarding is allowed at the stop. Default is true.")]
        [System.Xml.Serialization.XmlElementAttribute("ForBoarding")]
        public bool ForBoarding
        {
            get
            {
                return _forBoarding;
            }
            set
            {
                _forBoarding = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _isFlexible = false;
        
        /// <summary>
        /// <para>Whether use of stop is flexible, i.e. requires phoning to arrange. Must be a FLEXIBLE LINE.  Default is false.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Whether use of stop is flexible, i.e. requires phoning to arrange. Must be a FLEX" +
            "IBLE LINE. Default is false.")]
        [System.Xml.Serialization.XmlElementAttribute("IsFlexible")]
        public bool IsFlexible
        {
            get
            {
                return _isFlexible;
            }
            set
            {
                _isFlexible = value;
            }
        }
        
        /// <summary>
        /// <para>Timetabled waiting interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Timetabled waiting interval.")]
        [System.Xml.Serialization.XmlElementAttribute("WaitTime")]
        public string WaitTime { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("JourneyPartRef")]
        public JourneyPartRefStructure JourneyPartRef { get; set; }
        
        /// <summary>
        /// <para>INTERCHANGE RULEs for visit.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("INTERCHANGE RULEs for visit.")]
        [System.Xml.Serialization.XmlElementAttribute("interchangeRules")]
        public DepartureInterchangeRulesRelStructure InterchangeRules { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TimeDemandTypeRef")]
        public TimeDemandTypeRefStructure TimeDemandTypeRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TimebandRef")]
        public TimebandRefStructure TimebandRef { get; set; }
        
        /// <summary>
        /// <para>NOTICEs of a CALL that apply only to the Departure.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("NOTICEs of a CALL that apply only to the Departure.")]
        [System.Xml.Serialization.XmlElementAttribute("noticeAssignments")]
        public NoticeAssignmentsRelStructure NoticeAssignments { get; set; }
    }
    
    /// <summary>
    /// <para>Elements describing a Departure part of the CALL.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements describing a Departure part of the CALL.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ICallDeparturePartGroup
    {
        
        JourneyPartRefStructure JourneyPartRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>INTERCHANGE RULEs for visit.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("INTERCHANGE RULEs for visit.")]
        DepartureInterchangeRulesRelStructure InterchangeRules
        {
            get;
            set;
        }
        
        TimeDemandTypeRefStructure TimeDemandTypeRef
        {
            get;
            set;
        }
        
        TimebandRefStructure TimebandRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>NOTICEs of a CALL that apply only to the Departure.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("NOTICEs of a CALL that apply only to the Departure.")]
        NoticeAssignmentsRelStructure NoticeAssignments
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("departureInterchangeRules_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DepartureInterchangeRulesRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DepartureInterchangeRuleVersionStructure> _interchangeRule;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("InterchangeRule")]
        public System.Collections.ObjectModel.Collection<DepartureInterchangeRuleVersionStructure> InterchangeRule
        {
            get
            {
                return _interchangeRule;
            }
            private set
            {
                _interchangeRule = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DepartureInterchangeRulesRelStructure" /> class.</para>
        /// </summary>
        public DepartureInterchangeRulesRelStructure()
        {
            this._interchangeRule = new System.Collections.ObjectModel.Collection<DepartureInterchangeRuleVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DepartureInterchangeRule_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DepartureInterchangeRuleVersionStructure : IDataManagedObjectElementGroup, IInterchangeBaseGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DepartureInterchangeRuleVersionStructure" /> class.</para>
        /// </summary>
        public DepartureInterchangeRuleVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.  Used for VDV compatibility.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Used for VDV compatibility.")]
        [System.Xml.Serialization.XmlElementAttribute("ExternalInterchangeRef")]
        public ExternalObjectRefStructure ExternalInterchangeRef { get; set; }
        
        /// <summary>
        /// <para>Reference to a CONNECTION Link over which the INTERCHANGE takes place.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a CONNECTION Link over which the INTERCHANGE takes place.")]
        [System.Xml.Serialization.XmlElementAttribute("ConnectionRef")]
        public ConnectionRefStructure ConnectionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Priority")]
        public string Priority { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _staySeated = false;
        
        /// <summary>
        /// <para>Whether the passenger can remain in vehicle (i.e. block linking). Default is false: the passenger must change vehicles for this INTERCHANGE.
        ///Default is false.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Whether the passenger can remain in vehicle (i.e. block linking). Default is fals" +
            "e: the passenger must change vehicles for this INTERCHANGE. Default is false.")]
        [System.Xml.Serialization.XmlElementAttribute("StaySeated")]
        public bool StaySeated
        {
            get
            {
                return _staySeated;
            }
            set
            {
                _staySeated = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _crossBorder = false;
        
        /// <summary>
        /// <para>Whether INTERCHANGE  involves crossing an international border.
        /// Default is false.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Whether INTERCHANGE involves crossing an international border. Default is false.")]
        [System.Xml.Serialization.XmlElementAttribute("CrossBorder")]
        public bool CrossBorder
        {
            get
            {
                return _crossBorder;
            }
            set
            {
                _crossBorder = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _guaranteed = false;
        
        /// <summary>
        /// <para>Not in EPIP.            Whether INTERCHANGE is guaranteed. Default is false.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether INTERCHANGE is guaranteed. Default is false.")]
        [System.Xml.Serialization.XmlElementAttribute("Guaranteed")]
        public bool Guaranteed
        {
            get
            {
                return _guaranteed;
            }
            set
            {
                _guaranteed = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _advertised = true;
        
        /// <summary>
        /// <para>Not in EPIP.            Whether INTERCHANGE is advertised as an interchange. Default is true.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether INTERCHANGE is advertised as an interchange. Default is true" +
            ".")]
        [System.Xml.Serialization.XmlElementAttribute("Advertised")]
        public bool Advertised
        {
            get
            {
                return _advertised;
            }
            set
            {
                _advertised = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.            Standard wait time for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Standard wait time for INTERCHANGE.")]
        [System.Xml.Serialization.XmlElementAttribute("StandardWaitTime")]
        public string StandardWaitTime { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.            Maximum wait time for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum wait time for INTERCHANGE.")]
        [System.Xml.Serialization.XmlElementAttribute("MaximumWaitTime")]
        public string MaximumWaitTime { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.                         Maximum automatic wait time for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum automatic wait time for INTERCHANGE.")]
        [System.Xml.Serialization.XmlElementAttribute("MaximumAutomaticWaitTime")]
        public string MaximumAutomaticWaitTime { get; set; }
        
        /// <summary>
        /// <para>Standard transfer  duration for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Standard transfer duration for INTERCHANGE.")]
        [System.Xml.Serialization.XmlElementAttribute("StandardTransferTime")]
        public string StandardTransferTime { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.              Maximum transfer duration for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum transfer duration for INTERCHANGE.")]
        [System.Xml.Serialization.XmlElementAttribute("MinimumTransferTime")]
        public string MinimumTransferTime { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.              Maximum transfer duration for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum transfer duration for INTERCHANGE.")]
        [System.Xml.Serialization.XmlElementAttribute("MaximumTransferTime")]
        public string MaximumTransferTime { get; set; }
        
        /// <summary>
        /// <para>Filter Elements for an INTERCHANGE RULE.  Single Elements are Logically ANDed together . Multiple elements (e.g. Line) are Logically ORed with each other.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Filter Elements for an INTERCHANGE RULE. Single Elements are Logically ANDed toge" +
            "ther . Multiple elements (e.g. Line) are Logically ORed with each other.")]
        [System.Xml.Serialization.XmlElementAttribute("FeederFilter")]
        public InterchangeFilterStructure FeederFilter { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IInterchangeBaseGroup : IInterchangeWaitTimeGroup, IInterchangeTransferDurationGroup
    {
        
        /// <summary>
        /// <para>Not in EPIP.  Used for VDV compatibility.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Used for VDV compatibility.")]
        ExternalObjectRefStructure ExternalInterchangeRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Reference to a CONNECTION Link over which the INTERCHANGE takes place.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a CONNECTION Link over which the INTERCHANGE takes place.")]
        ConnectionRefStructure ConnectionRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        string Priority
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether the passenger can remain in vehicle (i.e. block linking). Default is false: the passenger must change vehicles for this INTERCHANGE.
        ///Default is false.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Whether the passenger can remain in vehicle (i.e. block linking). Default is fals" +
            "e: the passenger must change vehicles for this INTERCHANGE. Default is false.")]
        bool StaySeated
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Whether INTERCHANGE  involves crossing an international border.
        /// Default is false.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Whether INTERCHANGE involves crossing an international border. Default is false.")]
        bool CrossBorder
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.            Whether INTERCHANGE is guaranteed. Default is false.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether INTERCHANGE is guaranteed. Default is false.")]
        bool Guaranteed
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.            Whether INTERCHANGE is advertised as an interchange. Default is true.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether INTERCHANGE is advertised as an interchange. Default is true" +
            ".")]
        bool Advertised
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Not in EPIP. Elements for INTERCHANGE WAIT TIME.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Not in EPIP. Elements for INTERCHANGE WAIT TIME.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IInterchangeWaitTimeGroup
    {
        
        /// <summary>
        /// <para>Not in EPIP.            Standard wait time for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Standard wait time for INTERCHANGE.")]
        string StandardWaitTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.            Maximum wait time for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum wait time for INTERCHANGE.")]
        string MaximumWaitTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.                         Maximum automatic wait time for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum automatic wait time for INTERCHANGE.")]
        string MaximumAutomaticWaitTime
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Elements for INTERCHANGE TRANSFER duration.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for INTERCHANGE TRANSFER duration.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IInterchangeTransferDurationGroup
    {
        
        /// <summary>
        /// <para>Standard transfer  duration for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Standard transfer duration for INTERCHANGE.")]
        string StandardTransferTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.              Maximum transfer duration for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum transfer duration for INTERCHANGE.")]
        string MinimumTransferTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.              Maximum transfer duration for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum transfer duration for INTERCHANGE.")]
        string MaximumTransferTime
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("InterchangeFilterStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeFilterStructure : IInterchangeRuleLineFilterGroup, IInterchangeRulePointFilterGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private AllVehicleModesOfTransportEnumeration _transportMode = Netex.AllVehicleModesOfTransportEnumeration.All;
        
        /// <summary>
        /// <para>Identifier of MODE of end Point of TRANSFER . Default is all modes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.AllVehicleModesOfTransportEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Identifier of MODE of end Point of TRANSFER . Default is all modes.")]
        [System.Xml.Serialization.XmlElementAttribute("TransportMode")]
        public AllVehicleModesOfTransportEnumeration TransportMode
        {
            get
            {
                return _transportMode;
            }
            set
            {
                _transportMode = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("OperatorRef")]
        public OperatorRefStructure OperatorRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("StopAreaRef")]
        public StopAreaRefStructure StopAreaRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("StopPlaceRef")]
        public StopPlaceRefStructure StopPlaceRef { get; set; }
        
        /// <summary>
        /// <para>Applies to all Lines. +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Applies to all Lines. +v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("AllLines")]
        public EmptyType AllLines { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AllLines property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllLinesSpecified { get; set; }
        
        /// <summary>
        /// <para>List of LINEs in a DIRECTION +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of LINEs in a DIRECTION +v1.1")]
        [System.Xml.Serialization.XmlElementAttribute("linesInDirectionRefs")]
        public LinesInDirectionRefsRelStructure LinesInDirectionRefs { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LineInDirectionRefStructure> _lineInDirectionRef;
        
        [System.Xml.Serialization.XmlElementAttribute("LineInDirectionRef")]
        public System.Collections.ObjectModel.Collection<LineInDirectionRefStructure> LineInDirectionRef
        {
            get
            {
                return _lineInDirectionRef;
            }
            private set
            {
                _lineInDirectionRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LineInDirectionRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineInDirectionRefSpecified
        {
            get
            {
                return (this.LineInDirectionRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="InterchangeFilterStructure" /> class.</para>
        /// </summary>
        public InterchangeFilterStructure()
        {
            this._lineInDirectionRef = new System.Collections.ObjectModel.Collection<LineInDirectionRefStructure>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ScheduledStopPointRef")]
        public ScheduledStopPointRefStructure ScheduledStopPointRef { get; set; }
        
        /// <summary>
        /// <para>Prior (feeder) or onwards (distributor) SCHEDULED STOP POINT before/after CONNECTION.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Prior (feeder) or onwards (distributor) SCHEDULED STOP POINT before/after CONNECT" +
            "ION.")]
        [System.Xml.Serialization.XmlElementAttribute("AdjacentStopPointRef")]
        public ScheduledStopPointRefStructure AdjacentStopPointRef { get; set; }
        
        /// <summary>
        /// <para>Prior (feeder) or onwards (distributor) SCHEDULED STOP PLACE  before/after CONNECTION.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Prior (feeder) or onwards (distributor) SCHEDULED STOP PLACE before/after CONNECT" +
            "ION.")]
        [System.Xml.Serialization.XmlElementAttribute("AdjacentStopPlaceRef")]
        public StopPlaceRefStructure AdjacentStopPlaceRef { get; set; }
        
        /// <summary>
        /// <para>Prior (feeder) or onwards (distributor) POINT (not necessarily a STOP POINT) before/after connection.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Prior (feeder) or onwards (distributor) POINT (not necessarily a STOP POINT) befo" +
            "re/after connection.")]
        [System.Xml.Serialization.XmlElementAttribute("AdjacentPointRef")]
        public PointRefStructure AdjacentPointRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of end i.e. origin (feeder) or destination (Distributor)(SCHEDULED STOP POINT of feeder/distributor JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of end i.e. origin (feeder) or destination (Distributor)(SCHEDULED STO" +
            "P POINT of feeder/distributor JOURNEY.")]
        [System.Xml.Serialization.XmlElementAttribute("EndStopPointRef")]
        public ScheduledStopPointRefStructure EndStopPointRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TimeDemandTypeRef")]
        public TimeDemandTypeRefStructure TimeDemandTypeRef { get; set; }
        
        /// <summary>
        /// <para>Reference to a connecting VEHICLE JOURNEY to whom INTERCHANGE RULE applies. If absent applies to all journeys.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a connecting VEHICLE JOURNEY to whom INTERCHANGE RULE applies. If ab" +
            "sent applies to all journeys.")]
        [System.Xml.Serialization.XmlElementAttribute("ServiceJourneyRef")]
        public ServiceJourneyRefStructure ServiceJourneyRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("JourneyDesignator")]
        public DesignatorStructure JourneyDesignator { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ServiceDesignator")]
        public DesignatorStructure ServiceDesignator { get; set; }
        
        /// <summary>
        /// <para>Maximum interval for making INTERCHANGe.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Maximum interval for making INTERCHANGe.")]
        [System.Xml.Serialization.XmlElementAttribute("MaximumInterchangeWindow")]
        public string MaximumInterchangeWindow { get; set; }
    }
    
    /// <summary>
    /// <para>Line filter Elements for an INTERCHANGE RULE PARAMETER.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Line filter Elements for an INTERCHANGE RULE PARAMETER.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IInterchangeRuleLineFilterGroup
    {
        
        /// <summary>
        /// <para>Applies to all Lines. +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Applies to all Lines. +v1.1")]
        EmptyType AllLines
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>List of LINEs in a DIRECTION +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("List of LINEs in a DIRECTION +v1.1")]
        LinesInDirectionRefsRelStructure LinesInDirectionRefs
        {
            get;
            set;
        }
        
        System.Collections.ObjectModel.Collection<LineInDirectionRefStructure> LineInDirectionRef
        {
            get;
        }
    }
    
    /// <summary>
    /// <para>Type for a list of LINE in a specific DIRECTION</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a list of LINE in a specific DIRECTION")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("linesInDirectionRefs_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LinesInDirectionRefsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LineInDirectionRefStructure> _lineInDirectionRef;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("LineInDirectionRef")]
        public System.Collections.ObjectModel.Collection<LineInDirectionRefStructure> LineInDirectionRef
        {
            get
            {
                return _lineInDirectionRef;
            }
            private set
            {
                _lineInDirectionRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LinesInDirectionRefsRelStructure" /> class.</para>
        /// </summary>
        public LinesInDirectionRefsRelStructure()
        {
            this._lineInDirectionRef = new System.Collections.ObjectModel.Collection<LineInDirectionRefStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>Type for a Reference to a LINE in a specific DIRECTION</para>
    /// <para>Refrence to LINE in a specific DIRECTION</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a Reference to a LINE in a specific DIRECTION")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LineInDirectionRef_Structure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("LineInDirectionRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class LineInDirectionRefStructure
    {
        
        [System.Xml.Serialization.XmlElementAttribute("LineRef")]
        public LineRefStructure LineRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("DirectionRef")]
        public DirectionRefStructure DirectionRef { get; set; }
        
        /// <summary>
        /// <para>Alternative  LINE Reference  for AVMS system.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Alternative LINE Reference for AVMS system.")]
        [System.Xml.Serialization.XmlElementAttribute("ExternalLineRef")]
        public ExternalObjectRefStructure ExternalLineRef { get; set; }
        
        /// <summary>
        /// <para>Alternative DIRECTION Reference  for AVMS system.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Alternative DIRECTION Reference for AVMS system.")]
        [System.Xml.Serialization.XmlElementAttribute("ExternalDirectionRef")]
        public ExternalObjectRefStructure ExternalDirectionRef { get; set; }
    }
    
    /// <summary>
    /// <para>Stop filter Elements for an INTERCHANGE RULE PARAMETER.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Stop filter Elements for an INTERCHANGE RULE PARAMETER.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IInterchangeRulePointFilterGroup
    {
        
        ScheduledStopPointRefStructure ScheduledStopPointRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Prior (feeder) or onwards (distributor) SCHEDULED STOP POINT before/after CONNECTION.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Prior (feeder) or onwards (distributor) SCHEDULED STOP POINT before/after CONNECT" +
            "ION.")]
        ScheduledStopPointRefStructure AdjacentStopPointRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Prior (feeder) or onwards (distributor) SCHEDULED STOP PLACE  before/after CONNECTION.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Prior (feeder) or onwards (distributor) SCHEDULED STOP PLACE before/after CONNECT" +
            "ION.")]
        StopPlaceRefStructure AdjacentStopPlaceRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Prior (feeder) or onwards (distributor) POINT (not necessarily a STOP POINT) before/after connection.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Prior (feeder) or onwards (distributor) POINT (not necessarily a STOP POINT) befo" +
            "re/after connection.")]
        PointRefStructure AdjacentPointRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Identifier of end i.e. origin (feeder) or destination (Distributor)(SCHEDULED STOP POINT of feeder/distributor JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of end i.e. origin (feeder) or destination (Distributor)(SCHEDULED STO" +
            "P POINT of feeder/distributor JOURNEY.")]
        ScheduledStopPointRefStructure EndStopPointRef
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Type for a value reference to a JOURNEY.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a value reference to a JOURNEY.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DesignatorStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DesignatorStructure : IDesignatorGroup
    {
        
        /// <summary>
        /// <para>Origin of Journey.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Origin of Journey.")]
        [System.Xml.Serialization.XmlElementAttribute("FromPointRef")]
        public ScheduledStopPointRefStructure FromPointRef { get; set; }
        
        /// <summary>
        /// <para>Destination of Journey.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Destination of Journey.")]
        [System.Xml.Serialization.XmlElementAttribute("ToPointRef")]
        public ScheduledStopPointRefStructure ToPointRef { get; set; }
        
        /// <summary>
        /// <para>Date of JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date of JOURNEY.")]
        [System.Xml.Serialization.XmlElementAttribute("Date", DataType="date")]
        public System.DateTime Date { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Date property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateSpecified { get; set; }
        
        /// <summary>
        /// <para>Time of departure of JOURNEY from POINT.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Time of departure of JOURNEY from POINT.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("DepartureTime")]
        public string DepartureTime { get; set; }
        
        /// <summary>
        /// <para>Daya offset if Time of departure of JOURNEY from origin  POINT from current  OPERATING DAY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Daya offset if Time of departure of JOURNEY from origin POINT from current OPERAT" +
            "ING DAY.")]
        [System.Xml.Serialization.XmlElementAttribute("DepartureDayOffset")]
        public string DepartureDayOffset { get; set; }
        
        /// <summary>
        /// <para>Time of arrival of JOURNEY at destination POINT.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Time of arrival of JOURNEY at destination POINT.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("ArrivalTime")]
        public string ArrivalTime { get; set; }
        
        /// <summary>
        /// <para>Daya offset if Time of arrival of JOURNEY at destination POINT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Daya offset if Time of arrival of JOURNEY at destination POINT.")]
        [System.Xml.Serialization.XmlElementAttribute("ArrivalDayOffset")]
        public string ArrivalDayOffset { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("DayTypeRef")]
        public DayTypeRefStructure DayTypeRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TransportOrganisationRef")]
        public OrganisationRefStructure TransportOrganisationRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("LineRef")]
        public LineRefStructure LineRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("DirectionRef")]
        public DirectionRefStructure DirectionRef { get; set; }
        
        /// <summary>
        /// <para>Alternative ID for journey.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Alternative ID for journey.")]
        [System.Xml.Serialization.XmlElementAttribute("AlternativeJourneyRef")]
        public string AlternativeJourneyRef { get; set; }
    }
    
    /// <summary>
    /// <para>Elements for a Designator.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for a Designator.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IDesignatorGroup : IDesignatorTimeGroup, IDesignatorNetworkGroup
    {
    }
    
    /// <summary>
    /// <para>Time Elements for a Designator.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Time Elements for a Designator.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IDesignatorTimeGroup
    {
        
        /// <summary>
        /// <para>Date of JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date of JOURNEY.")]
        System.DateTime Date
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Time of departure of JOURNEY from POINT.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Time of departure of JOURNEY from POINT.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        string DepartureTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Daya offset if Time of departure of JOURNEY from origin  POINT from current  OPERATING DAY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Daya offset if Time of departure of JOURNEY from origin POINT from current OPERAT" +
            "ING DAY.")]
        string DepartureDayOffset
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Time of arrival of JOURNEY at destination POINT.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Time of arrival of JOURNEY at destination POINT.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        string ArrivalTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Daya offset if Time of arrival of JOURNEY at destination POINT.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Daya offset if Time of arrival of JOURNEY at destination POINT.")]
        string ArrivalDayOffset
        {
            get;
            set;
        }
        
        DayTypeRefStructure DayTypeRef
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Network Elements for a Designator.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Network Elements for a Designator.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IDesignatorNetworkGroup
    {
        
        OrganisationRefStructure TransportOrganisationRef
        {
            get;
            set;
        }
        
        LineRefStructure LineRef
        {
            get;
            set;
        }
        
        DirectionRefStructure DirectionRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Alternative ID for journey.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Alternative ID for journey.")]
        string AlternativeJourneyRef
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Elements for Service time.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for Service time.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IServiceTimeGroup
    {
        
        /// <summary>
        /// <para>Time of departure.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Time of departure.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        string DepartureTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Day offset if day of departure time of VEHICLE JOURNEY differs from the current OPERATING DAY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Day offset if day of departure time of VEHICLE JOURNEY differs from the current O" +
            "PERATING DAY.")]
        string DepartureDayOffset
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not part of EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not part of EPIP")]
        FrequencyStructure Frequency
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Total length of Journey. Can be computed from individual times.  Add to Departure time to obtain JOURNEY arrival time.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Total length of Journey. Can be computed from individual times. Add to Departure " +
            "time to obtain JOURNEY arrival time.")]
        string JourneyDuration
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IVehicleJourneyTimingsGroup
    {
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        VehicleJourneyWaitTimesStructure WaitTimes
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        VehicleJourneyRunTimesStructure RunTimes
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        VehicleJourneyLayoversStructure Layovers
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Type for a list of JOURNEY WAIT TIMEs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a list of JOURNEY WAIT TIMEs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("vehicleJourneyWaitTimesStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VehicleJourneyWaitTimesStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<JourneyWaitTimeStructure> _vehicleJourneyWaitTime;
        
        /// <summary>
        /// <para>The time for a vehicle to wait at a particular TIMING POINT IN JOURNEY PATTERN on a specified VEHICLE JOURNEY. This wait time will override the JOURNEY PATTERN WAIT TIME.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The time for a vehicle to wait at a particular TIMING POINT IN JOURNEY PATTERN on" +
            " a specified VEHICLE JOURNEY. This wait time will override the JOURNEY PATTERN W" +
            "AIT TIME.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("VehicleJourneyWaitTime")]
        public System.Collections.ObjectModel.Collection<JourneyWaitTimeStructure> VehicleJourneyWaitTime
        {
            get
            {
                return _vehicleJourneyWaitTime;
            }
            private set
            {
                _vehicleJourneyWaitTime = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="VehicleJourneyWaitTimesStructure" /> class.</para>
        /// </summary>
        public VehicleJourneyWaitTimesStructure()
        {
            this._vehicleJourneyWaitTime = new System.Collections.ObjectModel.Collection<JourneyWaitTimeStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    /// <summary>
    /// <para>Type for a list of JOURNEY RUN TIME.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a list of JOURNEY RUN TIME.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("vehicleJourneyRunTimesStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VehicleJourneyRunTimesStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<JourneyRunTimeStructure> _vehicleJourneyRunTime;
        
        /// <summary>
        /// <para>Overrides JOURNEY PATTERN RUN TIME.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Overrides JOURNEY PATTERN RUN TIME.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("VehicleJourneyRunTime")]
        public System.Collections.ObjectModel.Collection<JourneyRunTimeStructure> VehicleJourneyRunTime
        {
            get
            {
                return _vehicleJourneyRunTime;
            }
            private set
            {
                _vehicleJourneyRunTime = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="VehicleJourneyRunTimesStructure" /> class.</para>
        /// </summary>
        public VehicleJourneyRunTimesStructure()
        {
            this._vehicleJourneyRunTime = new System.Collections.ObjectModel.Collection<JourneyRunTimeStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    /// <summary>
    /// <para>Type for a list of JOURNEY LAYOVERs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a list of JOURNEY LAYOVERs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("vehicleJourneyLayoversStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VehicleJourneyLayoversStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<JourneyLayoverStructure> _vehicleJourneyLayover;
        
        /// <summary>
        /// <para>Overrides JOURNEY PATTERN LAYOVER.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Overrides JOURNEY PATTERN LAYOVER.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("VehicleJourneyLayover")]
        public System.Collections.ObjectModel.Collection<JourneyLayoverStructure> VehicleJourneyLayover
        {
            get
            {
                return _vehicleJourneyLayover;
            }
            private set
            {
                _vehicleJourneyLayover = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="VehicleJourneyLayoversStructure" /> class.</para>
        /// </summary>
        public VehicleJourneyLayoversStructure()
        {
            this._vehicleJourneyLayover = new System.Collections.ObjectModel.Collection<JourneyLayoverStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("VehicleJourney_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VehicleJourneyVersionStructure : ILinkSequenceElementGroup, IJourneyBaseContentGroup, IVehicleJourneyGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="VehicleJourneyVersionStructure" /> class.</para>
        /// </summary>
        public VehicleJourneyVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._projections = new System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure>();
            this._infoLinks = new System.Collections.ObjectModel.Collection<InfoLinkStructure>();
            this._dayTypes = new System.Collections.ObjectModel.Collection<DayTypeRefStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of LINK SEQUENCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of LINK SEQUENCE.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Units are as specified
        ///for Frame. Default is SI Metres.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Units are as specified for Frame. Default is SI Metres.")]
        [System.Xml.Serialization.XmlElementAttribute("Distance")]
        public decimal Distance { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Distance property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DistanceSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure> _projections;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlArrayAttribute("projections")]
        [System.Xml.Serialization.XmlArrayItemAttribute("LinkSequenceProjection", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure> Projections
        {
            get
            {
                return _projections;
            }
            private set
            {
                _projections = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Projections collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProjectionsSpecified
        {
            get
            {
                return (this.Projections.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<InfoLinkStructure> _infoLinks;
        
        /// <summary>
        /// <para>Not in EPIP.                      Hyperlinks associated with presentation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Hyperlinks associated with presentation.")]
        [System.Xml.Serialization.XmlArrayAttribute("infoLinks")]
        [System.Xml.Serialization.XmlArrayItemAttribute("InfoLink", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<InfoLinkStructure> InfoLinks
        {
            get
            {
                return _infoLinks;
            }
            private set
            {
                _infoLinks = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the InfoLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InfoLinksSpecified
        {
            get
            {
                return (this.InfoLinks.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>MODE of transport of JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("MODE of transport of JOURNEY.")]
        [System.Xml.Serialization.XmlElementAttribute("TransportMode")]
        public AllVehicleModesOfTransportEnumeration TransportMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransportMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TransportModeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TransportSubmode")]
        public TransportSubmodeStructure TransportSubmode { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Monitored")]
        public bool Monitored { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Monitored property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MonitoredSpecified { get; set; }
        
        /// <summary>
        /// <para>NOTICEs relevant for this Journey.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("NOTICEs relevant for this Journey.")]
        [System.Xml.Serialization.XmlElementAttribute("noticeAssignments")]
        public NoticeAssignmentsRelStructure NoticeAssignments { get; set; }
        
        /// <summary>
        /// <para>Time of departure.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Time of departure.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("DepartureTime")]
        public string DepartureTime { get; set; }
        
        /// <summary>
        /// <para>Day offset if day of departure time of VEHICLE JOURNEY differs from the current OPERATING DAY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Day offset if day of departure time of VEHICLE JOURNEY differs from the current O" +
            "PERATING DAY.")]
        [System.Xml.Serialization.XmlElementAttribute("DepartureDayOffset")]
        public string DepartureDayOffset { get; set; }
        
        /// <summary>
        /// <para>Not part of EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not part of EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Frequency")]
        public FrequencyStructure Frequency { get; set; }
        
        /// <summary>
        /// <para>Total length of Journey. Can be computed from individual times.  Add to Departure time to obtain JOURNEY arrival time.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Total length of Journey. Can be computed from individual times. Add to Departure " +
            "time to obtain JOURNEY arrival time.")]
        [System.Xml.Serialization.XmlElementAttribute("JourneyDuration")]
        public string JourneyDuration { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DayTypeRefStructure> _dayTypes;
        
        [System.Xml.Serialization.XmlArrayAttribute("dayTypes")]
        [System.Xml.Serialization.XmlArrayItemAttribute("DayTypeRef", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<DayTypeRefStructure> DayTypes
        {
            get
            {
                return _dayTypes;
            }
            private set
            {
                _dayTypes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DayTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DayTypesSpecified
        {
            get
            {
                return (this.DayTypes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("RouteRef")]
        public RouteRefStructure RouteRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("JourneyPatternRef")]
        public JourneyPatternRefStructure JourneyPatternRef { get; set; }
        
        /// <summary>
        /// <para>The only concrete JourneyPatternRef in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The only concrete JourneyPatternRef in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("ServiceJourneyPatternRef")]
        public ServiceJourneyPatternRefStructure ServiceJourneyPatternRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("ServicePatternRef")]
        public JourneyPatternRefStructure ServicePatternRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("TimeDemandTypeRef")]
        public TimeDemandTypeRefStructure TimeDemandTypeRef { get; set; }
        
        /// <summary>
        /// <para>Reference to TYPE OF VEHICLE to use on SERVICE
        ///JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to TYPE OF VEHICLE to use on SERVICE JOURNEY.")]
        [System.Xml.Serialization.XmlElementAttribute("VehicleTypeRef")]
        public VehicleTypeRefStructure VehicleTypeRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("TrainRef")]
        public TrainRefStructure TrainRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("BlockRef")]
        public BlockRefStructure BlockRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("timeDemandTypes")]
        public TimeDemandTypeRefsRelStructure TimeDemandTypes { get; set; }
        
        /// <summary>
        /// <para>In the EPIP, the JOURNEY PARTs should be embedded in-line with their parent SERVICE JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("In the EPIP, the JOURNEY PARTs should be embedded in-line with their parent SERVI" +
            "CE JOURNEY.")]
        [System.Xml.Serialization.XmlElementAttribute("parts")]
        public JourneyPartsRelStructure Parts { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("waitTimes")]
        public VehicleJourneyWaitTimesStructure WaitTimes { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("runTimes")]
        public VehicleJourneyRunTimesStructure RunTimes { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("layovers")]
        public VehicleJourneyLayoversStructure Layovers { get; set; }
        
        /// <summary>
        /// <para>Mandatory in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("passingTimes")]
        public PassingTimesRelStructure PassingTimes { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IVehicleJourneyGroup : IServiceTimeGroup, IJourneyPatternRefGroup, IVehicleJourneyTimingsGroup
    {
        
        System.Collections.ObjectModel.Collection<DayTypeRefStructure> DayTypes
        {
            get;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        RouteRefStructure RouteRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        TimeDemandTypeRefStructure TimeDemandTypeRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Reference to TYPE OF VEHICLE to use on SERVICE
        ///JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to TYPE OF VEHICLE to use on SERVICE JOURNEY.")]
        VehicleTypeRefStructure VehicleTypeRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        TrainRefStructure TrainRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        BlockRefStructure BlockRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP.")]
        TimeDemandTypeRefsRelStructure TimeDemandTypes
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>In the EPIP, the JOURNEY PARTs should be embedded in-line with their parent SERVICE JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("In the EPIP, the JOURNEY PARTs should be embedded in-line with their parent SERVI" +
            "CE JOURNEY.")]
        JourneyPartsRelStructure Parts
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Mandatory in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP.")]
        PassingTimesRelStructure PassingTimes
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>The scheduled possibility for transfer of passengers between two SERVICE JOURNEYs at the same or different STOP POINTs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The scheduled possibility for transfer of passengers between two SERVICE JOURNEYs" +
        " at the same or different STOP POINTs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ServiceJourneyInterchange_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ServiceJourneyInterchange", Namespace="http://www.netex.org.uk/netex")]
    public partial class ServiceJourneyInterchangeVersionStructure : IDataManagedObjectElementGroup, IInterchangeBaseGroup, IInterchangeEndpointGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ServiceJourneyInterchangeVersionStructure" /> class.</para>
        /// </summary>
        public ServiceJourneyInterchangeVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.  Used for VDV compatibility.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Used for VDV compatibility.")]
        [System.Xml.Serialization.XmlElementAttribute("ExternalInterchangeRef")]
        public ExternalObjectRefStructure ExternalInterchangeRef { get; set; }
        
        /// <summary>
        /// <para>Reference to a CONNECTION Link over which the INTERCHANGE takes place.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a CONNECTION Link over which the INTERCHANGE takes place.")]
        [System.Xml.Serialization.XmlElementAttribute("ConnectionRef")]
        public ConnectionRefStructure ConnectionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Priority")]
        public string Priority { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _staySeated = false;
        
        /// <summary>
        /// <para>Whether the passenger can remain in vehicle (i.e. block linking). Default is false: the passenger must change vehicles for this INTERCHANGE.
        ///Default is false.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Whether the passenger can remain in vehicle (i.e. block linking). Default is fals" +
            "e: the passenger must change vehicles for this INTERCHANGE. Default is false.")]
        [System.Xml.Serialization.XmlElementAttribute("StaySeated")]
        public bool StaySeated
        {
            get
            {
                return _staySeated;
            }
            set
            {
                _staySeated = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _crossBorder = false;
        
        /// <summary>
        /// <para>Whether INTERCHANGE  involves crossing an international border.
        /// Default is false.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Whether INTERCHANGE involves crossing an international border. Default is false.")]
        [System.Xml.Serialization.XmlElementAttribute("CrossBorder")]
        public bool CrossBorder
        {
            get
            {
                return _crossBorder;
            }
            set
            {
                _crossBorder = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _guaranteed = false;
        
        /// <summary>
        /// <para>Not in EPIP.            Whether INTERCHANGE is guaranteed. Default is false.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether INTERCHANGE is guaranteed. Default is false.")]
        [System.Xml.Serialization.XmlElementAttribute("Guaranteed")]
        public bool Guaranteed
        {
            get
            {
                return _guaranteed;
            }
            set
            {
                _guaranteed = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _advertised = true;
        
        /// <summary>
        /// <para>Not in EPIP.            Whether INTERCHANGE is advertised as an interchange. Default is true.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether INTERCHANGE is advertised as an interchange. Default is true" +
            ".")]
        [System.Xml.Serialization.XmlElementAttribute("Advertised")]
        public bool Advertised
        {
            get
            {
                return _advertised;
            }
            set
            {
                _advertised = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.            Standard wait time for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Standard wait time for INTERCHANGE.")]
        [System.Xml.Serialization.XmlElementAttribute("StandardWaitTime")]
        public string StandardWaitTime { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.            Maximum wait time for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum wait time for INTERCHANGE.")]
        [System.Xml.Serialization.XmlElementAttribute("MaximumWaitTime")]
        public string MaximumWaitTime { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.                         Maximum automatic wait time for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum automatic wait time for INTERCHANGE.")]
        [System.Xml.Serialization.XmlElementAttribute("MaximumAutomaticWaitTime")]
        public string MaximumAutomaticWaitTime { get; set; }
        
        /// <summary>
        /// <para>Standard transfer  duration for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Standard transfer duration for INTERCHANGE.")]
        [System.Xml.Serialization.XmlElementAttribute("StandardTransferTime")]
        public string StandardTransferTime { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.              Maximum transfer duration for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum transfer duration for INTERCHANGE.")]
        [System.Xml.Serialization.XmlElementAttribute("MinimumTransferTime")]
        public string MinimumTransferTime { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.              Maximum transfer duration for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum transfer duration for INTERCHANGE.")]
        [System.Xml.Serialization.XmlElementAttribute("MaximumTransferTime")]
        public string MaximumTransferTime { get; set; }
        
        /// <summary>
        /// <para>SCHEDULED STOP POINT feeding INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("SCHEDULED STOP POINT feeding INTERCHANGE.")]
        [System.Xml.Serialization.XmlElementAttribute("FromPointRef")]
        public ScheduledStopPointRefStructure FromPointRef { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _fromVisitNumber = "1";
        
        /// <summary>
        /// <para>Visit number to distinguish which visit to FROM SCHEDULED STOP POINT this is. Default is one. Only needed for circular routes with connections at the same stop on different visits.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("1")]
        [System.ComponentModel.DescriptionAttribute("Visit number to distinguish which visit to FROM SCHEDULED STOP POINT this is. Def" +
            "ault is one. Only needed for circular routes with connections at the same stop o" +
            "n different visits.")]
        [System.Xml.Serialization.XmlElementAttribute("FromVisitNumber")]
        public string FromVisitNumber
        {
            get
            {
                return _fromVisitNumber;
            }
            set
            {
                _fromVisitNumber = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ToPointRef")]
        public ScheduledStopPointRefStructure ToPointRef { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _toVisitNumber = "1";
        
        /// <summary>
        /// <para>Visit number to distinguish which visit to TO SCHEDULED STOP POINT  this is. Default is one. Only needed for circular routes with connections at the same stop on different visits.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("1")]
        [System.ComponentModel.DescriptionAttribute("Visit number to distinguish which visit to TO SCHEDULED STOP POINT this is. Defau" +
            "lt is one. Only needed for circular routes with connections at the same stop on " +
            "different visits.")]
        [System.Xml.Serialization.XmlElementAttribute("ToVisitNumber")]
        public string ToVisitNumber
        {
            get
            {
                return _toVisitNumber;
            }
            set
            {
                _toVisitNumber = value;
            }
        }
        
        /// <summary>
        /// <para>VEHICLE JOURNEY that feeds the INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("VEHICLE JOURNEY that feeds the INTERCHANGE.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("FromJourneyRef")]
        public ServiceJourneyRefStructure FromJourneyRef { get; set; }
        
        /// <summary>
        /// <para>VEHICLE JOURNEY that distributes from the INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("VEHICLE JOURNEY that distributes from the INTERCHANGE.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ToJourneyRef")]
        public ServiceJourneyRefStructure ToJourneyRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Elements for INTERCHANGE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for INTERCHANGE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IInterchangeEndpointGroup
    {
        
        /// <summary>
        /// <para>SCHEDULED STOP POINT feeding INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("SCHEDULED STOP POINT feeding INTERCHANGE.")]
        ScheduledStopPointRefStructure FromPointRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Visit number to distinguish which visit to FROM SCHEDULED STOP POINT this is. Default is one. Only needed for circular routes with connections at the same stop on different visits.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("1")]
        [System.ComponentModel.DescriptionAttribute("Visit number to distinguish which visit to FROM SCHEDULED STOP POINT this is. Def" +
            "ault is one. Only needed for circular routes with connections at the same stop o" +
            "n different visits.")]
        string FromVisitNumber
        {
            get;
            set;
        }
        
        ScheduledStopPointRefStructure ToPointRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Visit number to distinguish which visit to TO SCHEDULED STOP POINT  this is. Default is one. Only needed for circular routes with connections at the same stop on different visits.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("1")]
        [System.ComponentModel.DescriptionAttribute("Visit number to distinguish which visit to TO SCHEDULED STOP POINT this is. Defau" +
            "lt is one. Only needed for circular routes with connections at the same stop on " +
            "different visits.")]
        string ToVisitNumber
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>A coherent set of SITE data to which the same frame VALIDITY CONDITIONs have been assigned.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A coherent set of SITE data to which the same frame VALIDITY CONDITIONs have been" +
        " assigned.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SiteFrame_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("SiteFrame", Namespace="http://www.netex.org.uk/netex")]
    public partial class SiteFrameVersionStructure : IVersionFrameGroup, IDataManagedObjectAttributeGroup
    {
        
        /// <summary>
        /// <para>Main construction in EPIP to express validity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Main construction in EPIP to express validity.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public ValidBetweenVersionStructure ValidBetween { get; set; }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject, however EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject, however EPIP restricts use of VALIDITY CONDITIONs to just a simple na" +
            "me.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        /// <summary>
        /// <para>Name of VERSION FRAME.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of VERSION FRAME.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Description of VERSION FRAME contents.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of VERSION FRAME contents.")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Reference to a TYPE OF VERSION FRAME.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a TYPE OF VERSION FRAME.")]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfFrameRef")]
        public TypeOfFrameRefStructure TypeOfFrameRef { get; set; }
        
        /// <summary>
        /// <para>Previous baseline VERSION FRAME that objects in this VERSION require.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Previous baseline VERSION FRAME that objects in this VERSION require.")]
        [System.Xml.Serialization.XmlElementAttribute("BaselineVersionFrameRef")]
        public BaselineVersionFrameRefStructure BaselineVersionFrameRef { get; set; }
        
        /// <summary>
        /// <para>CODE SPACES used in this frame. Normally there will be at least one.  A default may be specified in the Frame defaults.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("CODE SPACES used in this frame. Normally there will be at least one. A default ma" +
            "y be specified in the Frame defaults.")]
        [System.Xml.Serialization.XmlElementAttribute("codespaces")]
        public CodespacesRelStructure Codespaces { get; set; }
        
        /// <summary>
        /// <para>Set of default values to assume for values in the
        ///frame if not explicitly stated on individual
        ///elements.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Set of default values to assume for values in the frame if not explicitly stated " +
            "on individual elements.")]
        [System.Xml.Serialization.XmlElementAttribute("FrameDefaults")]
        public FrameDefaultsStructure FrameDefaults { get; set; }
        
        /// <summary>
        /// <para>Not part of EPIP. Formal definitions of VERSIONs included in frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not part of EPIP. Formal definitions of VERSIONs included in frame.")]
        [System.Xml.Serialization.XmlElementAttribute("versions")]
        public VersionsRelStructure Versions { get; set; }
        
        /// <summary>
        /// <para>Prerequisite VERSION FRAMEs containing elements  that this frame depends on.  +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Prerequisite VERSION FRAMEs containing elements that this frame depends on. +v1.1" +
            "")]
        [System.Xml.Serialization.XmlElementAttribute("prerequisites")]
        public PrerequisitesRelStructure Prerequisites { get; set; }
        
        /// <summary>
        /// <para>Shared VALIDITY CONDITIONs used by elements
        ///in the FRAME. Note, this is NOT the "dominant" FRAME validity condition!</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Shared VALIDITY CONDITIONs used by elements in the FRAME. Note, this is NOT the \"" +
            "dominant\" FRAME validity condition!")]
        [System.Xml.Serialization.XmlElementAttribute("contentValidityConditions")]
        public ContentValidityConditionsRelStructure ContentValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("topographicPlaces")]
        public TopographicPlacesRelStructure TopographicPlaces { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("groupsOfStopPlaces")]
        public GroupsOfStopPlacesRelStructure GroupsOfStopPlaces { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("stopPlaces")]
        public StopPlacesRelStructure StopPlaces { get; set; }
        
        /// <summary>
        /// <para>POINTs OF INTEREST are required by the EC Priority action A of the ITS Directive. It is not expected that
        ///POIs will be provided in NeTEx datasets; they will in most cases be defined in external databases
        ///(INSPIRE, OSM, SPOI, or commercial datasets) and be referenced by SITE CONNECTIONs.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"POINTs OF INTEREST are required by the EC Priority action A of the ITS Directive. It is not expected that POIs will be provided in NeTEx datasets; they will in most cases be defined in external databases (INSPIRE, OSM, SPOI, or commercial datasets) and be referenced by SITE CONNECTIONs.")]
        [System.Xml.Serialization.XmlElementAttribute("pointsOfInterest")]
        public PointsOfInterestRelStructure PointsOfInterest { get; set; }
        
        /// <summary>
        /// <para>Not part of EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not part of EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("parkings")]
        public ParkingsRelStructure Parkings { get; set; }
        
        /// <summary>
        /// <para>Not part of EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not part of EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("navigationPaths")]
        public NavigationPathsRelStructure NavigationPaths { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TariffZoneVersionStructure> _tariffZones;
        
        [System.Xml.Serialization.XmlArrayAttribute("tariffZones")]
        [System.Xml.Serialization.XmlArrayItemAttribute("TariffZone", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<TariffZoneVersionStructure> TariffZones
        {
            get
            {
                return _tariffZones;
            }
            private set
            {
                _tariffZones = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TariffZones collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TariffZonesSpecified
        {
            get
            {
                return (this.TariffZones.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="SiteFrameVersionStructure" /> class.</para>
        /// </summary>
        public SiteFrameVersionStructure()
        {
            this._tariffZones = new System.Collections.ObjectModel.Collection<TariffZoneVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("topographicPlaces_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("topographicPlaces", Namespace="http://www.netex.org.uk/netex")]
    public partial class TopographicPlacesRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TopographicPlaceVersionStructure> _topographicPlace;
        
        /// <summary>
        /// <para>A town, city, village, suburb, quarter or other name settlement within a country. Provides a Gazetteer of Transport related place names.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A town, city, village, suburb, quarter or other name settlement within a country." +
            " Provides a Gazetteer of Transport related place names.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TopographicPlace")]
        public System.Collections.ObjectModel.Collection<TopographicPlaceVersionStructure> TopographicPlace
        {
            get
            {
                return _topographicPlace;
            }
            private set
            {
                _topographicPlace = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TopographicPlacesRelStructure" /> class.</para>
        /// </summary>
        public TopographicPlacesRelStructure()
        {
            this._topographicPlace = new System.Collections.ObjectModel.Collection<TopographicPlaceVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TopographicPlace_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TopographicPlace", Namespace="http://www.netex.org.uk/netex")]
    public partial class TopographicPlaceVersionStructure : IPlaceObjectElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TopographicPlaceVersionStructure" /> class.</para>
        /// </summary>
        public TopographicPlaceVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PurposeOfGroupingRef")]
        public PurposeOfGroupingRefStructure PurposeOfGroupingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("members")]
        public PlaceObjectMembers Members { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Centroid")]
        public CentroidStructure Centroid { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Polygon", Namespace="http://www.opengis.net/gml/3.2")]
        public Gml.TPolygon Polygon { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("placeTypes")]
        public PlaceTypesStructure PlaceTypes { get; set; }
        
        /// <summary>
        /// <para>ISO 3166-2 code for subdivision of a country if relevant. E.g. GB-CAM.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("ISO 3166-2 code for subdivision of a country if relevant. E.g. GB-CAM.")]
        [System.Xml.Serialization.XmlElementAttribute("IsoCode")]
        public string IsoCode { get; set; }
        
        /// <summary>
        /// <para>Structured text descriptor of TOPOGRAPHIC PLACE.                                        EPIP note: Only the Name is provided.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Structured text descriptor of TOPOGRAPHIC PLACE. EPIP note: Only the Name is prov" +
            "ided.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Descriptor")]
        public TopographicPlaceDescriptorVersionedChildStructure Descriptor { get; set; }
        
        /// <summary>
        /// <para>Classification of the TOPOGRAPHIC PLACE as a settlement. Enumerated value.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Classification of the TOPOGRAPHIC PLACE as a settlement. Enumerated value.")]
        [System.Xml.Serialization.XmlElementAttribute("TopographicPlaceType")]
        public TopographicPlaceTypeEnumeration TopographicPlaceType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TopographicPlaceType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TopographicPlaceTypeSpecified { get; set; }
        
        /// <summary>
        /// <para>Postcode or partial postcode associated with the
        ///area.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Postcode or partial postcode associated with the area.")]
        [System.Xml.Serialization.XmlElementAttribute("PostCode")]
        public string PostCode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("CountryRef")]
        public CountryRefStructure CountryRef { get; set; }
        
        /// <summary>
        /// <para>For TOPOGRAPHIC PLACEs that span borders,
        ///references to additional COUNTRY or COUNTRies
        ///that place lies in.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("For TOPOGRAPHIC PLACEs that span borders, references to additional COUNTRY or COU" +
            "NTRies that place lies in.")]
        [System.Xml.Serialization.XmlElementAttribute("otherCountries")]
        public OtherCountriesRelStructure OtherCountries { get; set; }
        
        /// <summary>
        /// <para>Reference to a parent TOPOGRAPHIC PLACE that
        ///contains the TOPOGRAPHIC PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a parent TOPOGRAPHIC PLACE that contains the TOPOGRAPHIC PLACE.")]
        [System.Xml.Serialization.XmlElementAttribute("ParentTopographicPlaceRef")]
        public ParentTopographicPlaceRefStructure ParentTopographicPlaceRef { get; set; }
        
        /// <summary>
        /// <para>References to other TOPOGRAPHIC PLACEs within
        ///which the TOPOGRAPHIC PLACE is contained.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("References to other TOPOGRAPHIC PLACEs within which the TOPOGRAPHIC PLACE is cont" +
            "ained.")]
        [System.Xml.Serialization.XmlElementAttribute("containedIn")]
        public ContainedInRelStructure ContainedIn { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Type for a TOPOGRAPHIC PLACE DESCRIPTOR.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a TOPOGRAPHIC PLACE DESCRIPTOR.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TopographicPlaceDescriptor_VersionedChildStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Descriptor", Namespace="http://www.netex.org.uk/netex")]
    public partial class TopographicPlaceDescriptorVersionedChildStructure : IVersionedChildElementGroup, IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TopographicPlaceDescriptorVersionedChildStructure" /> class.</para>
        /// </summary>
        public TopographicPlaceDescriptorVersionedChildStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        /// <summary>
        /// <para>Name of the TOPOGRAPHIC PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of the TOPOGRAPHIC PLACE.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Qualifier to use when presenting name to distinguish it from other similarly named elements.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Qualifier to use when presenting name to distinguish it from other similarly name" +
            "d elements.")]
        [System.Xml.Serialization.XmlElementAttribute("Qualify")]
        public QualifyStructure Qualify { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    /// <summary>
    /// <para>Allowed values for classifying TOPOGRAPHIC PLACEs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for classifying TOPOGRAPHIC PLACEs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TopographicPlaceTypeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("TopographicPlaceType", Namespace="http://www.netex.org.uk/netex")]
    public enum TopographicPlaceTypeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("continent")]
        Continent,
        
        [System.Xml.Serialization.XmlEnumAttribute("interregion")]
        Interregion,
        
        [System.Xml.Serialization.XmlEnumAttribute("country")]
        Country,
        
        [System.Xml.Serialization.XmlEnumAttribute("principality")]
        Principality,
        
        [System.Xml.Serialization.XmlEnumAttribute("state")]
        State,
        
        /// <summary>
        /// <para>Country, province, principality - e.g. E.g. England, Wales.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Country, province, principality - e.g. E.g. England, Wales.")]
        [System.Xml.Serialization.XmlEnumAttribute("province")]
        Province,
        
        [System.Xml.Serialization.XmlEnumAttribute("region")]
        Region,
        
        [System.Xml.Serialization.XmlEnumAttribute("county")]
        County,
        
        [System.Xml.Serialization.XmlEnumAttribute("area")]
        Area,
        
        [System.Xml.Serialization.XmlEnumAttribute("conurbation")]
        Conurbation,
        
        /// <summary>
        /// <para>Locality is a city.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Locality is a city.")]
        [System.Xml.Serialization.XmlEnumAttribute("city")]
        City,
        
        [System.Xml.Serialization.XmlEnumAttribute("municipality")]
        Municipality,
        
        [System.Xml.Serialization.XmlEnumAttribute("quarter")]
        Quarter,
        
        /// <summary>
        /// <para>Locality is an urban sub-area.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Locality is an urban sub-area.")]
        [System.Xml.Serialization.XmlEnumAttribute("suburb")]
        Suburb,
        
        /// <summary>
        /// <para>Locality is a town.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Locality is a town.")]
        [System.Xml.Serialization.XmlEnumAttribute("town")]
        Town,
        
        /// <summary>
        /// <para>Locality is a City Centre or Town Centre ZONE of another town or city locality.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Locality is a City Centre or Town Centre ZONE of another town or city locality.")]
        [System.Xml.Serialization.XmlEnumAttribute("urbanCentre")]
        UrbanCentre,
        
        [System.Xml.Serialization.XmlEnumAttribute("district")]
        District,
        
        [System.Xml.Serialization.XmlEnumAttribute("parish")]
        Parish,
        
        /// <summary>
        /// <para>Locality is a village.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Locality is a village.")]
        [System.Xml.Serialization.XmlEnumAttribute("village")]
        Village,
        
        /// <summary>
        /// <para>Locality is a hamlet.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Locality is a hamlet.")]
        [System.Xml.Serialization.XmlEnumAttribute("hamlet")]
        Hamlet,
        
        /// <summary>
        /// <para>Locality is a place of interest whose name is distinct from another locality.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Locality is a place of interest whose name is distinct from another locality.")]
        [System.Xml.Serialization.XmlEnumAttribute("placeOfInterest")]
        PlaceOfInterest,
        
        /// <summary>
        /// <para>Locality is none of the other types.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Locality is none of the other types.")]
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
        
        /// <summary>
        /// <para>Locality type is not yet specified.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Locality type is not yet specified.")]
        [System.Xml.Serialization.XmlEnumAttribute("unrecorded")]
        Unrecorded,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("otherCountries_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("otherCountries", Namespace="http://www.netex.org.uk/netex")]
    public partial class OtherCountriesRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<CountryRefStructure> _countryRef;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("CountryRef")]
        public System.Collections.ObjectModel.Collection<CountryRefStructure> CountryRef
        {
            get
            {
                return _countryRef;
            }
            private set
            {
                _countryRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="OtherCountriesRelStructure" /> class.</para>
        /// </summary>
        public OtherCountriesRelStructure()
        {
            this._countryRef = new System.Collections.ObjectModel.Collection<CountryRefStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("containedIn_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("containedIn", Namespace="http://www.netex.org.uk/netex")]
    public partial class ContainedInRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TopographicPlaceRefStructure> _topographicPlaceRef;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TopographicPlaceRef")]
        public System.Collections.ObjectModel.Collection<TopographicPlaceRefStructure> TopographicPlaceRef
        {
            get
            {
                return _topographicPlaceRef;
            }
            private set
            {
                _topographicPlaceRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ContainedInRelStructure" /> class.</para>
        /// </summary>
        public ContainedInRelStructure()
        {
            this._topographicPlaceRef = new System.Collections.ObjectModel.Collection<TopographicPlaceRefStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("groupsOfStopPlaces_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("groupsOfStopPlaces", Namespace="http://www.netex.org.uk/netex")]
    public partial class GroupsOfStopPlacesRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<GroupOfStopPlacesVersionStructure> _groupOfStopPlaces;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("GroupOfStopPlaces")]
        public System.Collections.ObjectModel.Collection<GroupOfStopPlacesVersionStructure> GroupOfStopPlaces
        {
            get
            {
                return _groupOfStopPlaces;
            }
            private set
            {
                _groupOfStopPlaces = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="GroupsOfStopPlacesRelStructure" /> class.</para>
        /// </summary>
        public GroupsOfStopPlacesRelStructure()
        {
            this._groupOfStopPlaces = new System.Collections.ObjectModel.Collection<GroupOfStopPlacesVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("stopPlaces_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("stopPlaces", Namespace="http://www.netex.org.uk/netex")]
    public partial class StopPlacesRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<StopPlaceVersionStructure> _stopPlace;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("StopPlace")]
        public System.Collections.ObjectModel.Collection<StopPlaceVersionStructure> StopPlace
        {
            get
            {
                return _stopPlace;
            }
            private set
            {
                _stopPlace = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="StopPlacesRelStructure" /> class.</para>
        /// </summary>
        public StopPlacesRelStructure()
        {
            this._stopPlace = new System.Collections.ObjectModel.Collection<StopPlaceVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>Version of a named place where public transport may be accessed. May be a building complex (e.g. a station) or an on-street location.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Version of a named place where public transport may be accessed. May be a buildin" +
        "g complex (e.g. a station) or an on-street location.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("StopPlace_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("StopPlace", Namespace="http://www.netex.org.uk/netex")]
    public partial class StopPlaceVersionStructure : ISiteObjectElementGroup, IPtSubmodeChoiceGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="StopPlaceVersionStructure" /> class.</para>
        /// </summary>
        public StopPlaceVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._accessModes = new System.Collections.ObjectModel.Collection<string>();
            this._otherTransportModes = new System.Collections.ObjectModel.Collection<string>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PurposeOfGroupingRef")]
        public PurposeOfGroupingRefStructure PurposeOfGroupingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("members")]
        public PlaceObjectMembers Members { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Centroid")]
        public CentroidStructure Centroid { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Polygon", Namespace="http://www.opengis.net/gml/3.2")]
        public Gml.TPolygon Polygon { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("placeTypes")]
        public PlaceTypesStructure PlaceTypes { get; set; }
        
        /// <summary>
        /// <para>Default URL for ADDRESSABLE PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default URL for ADDRESSABLE PLACE.")]
        [System.Xml.Serialization.XmlElementAttribute("Url")]
        public string Url { get; set; }
        
        /// <summary>
        /// <para>Default image for ADDRESSABLE PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Default image for ADDRESSABLE PLACE.")]
        [System.Xml.Serialization.XmlElementAttribute("Image")]
        public string Image { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PostalAddress")]
        public PostalAddressVersionStructure PostalAddress { get; set; }
        
        /// <summary>
        /// <para>ADDRESS of a numbered building on a named road.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("ADDRESS of a numbered building on a named road.")]
        [System.Xml.Serialization.XmlElementAttribute("RoadAddress")]
        public RoadAddressStructure RoadAddress { get; set; }
        
        /// <summary>
        /// <para>Note: Covers only EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: Covers only EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("AccessibilityAssessment")]
        public AccessibilityAssessmentStructure AccessibilityAssessment { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _accessModes;
        
        /// <summary>
        /// <para>Copied from full schema where only single instance is allowed. This is not in line with EPIP documentation that implies one to many.</para>
        /// <para>Allowed values for List of MODES of transport applicable to timetabled public transport.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Copied from full schema where only single instance is allowed. This is not in lin" +
            "e with EPIP documentation that implies one to many.")]
        [System.Xml.Serialization.XmlElementAttribute("AccessModes")]
        public System.Collections.ObjectModel.Collection<string> AccessModes
        {
            get
            {
                return _accessModes;
            }
            private set
            {
                _accessModes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AccessModes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccessModesSpecified
        {
            get
            {
                return (this.AccessModes.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeNames")]
        public AlternativeNamesStructure AlternativeNames { get; set; }
        
        /// <summary>
        /// <para>Name of a Road that crosses the Road the street near the SITE ELEMENT that can be used to describe its relative location.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of a Road that crosses the Road the street near the SITE ELEMENT that can be" +
            " used to describe its relative location.")]
        [System.Xml.Serialization.XmlElementAttribute("CrossRoad")]
        public MultilingualString CrossRoad { get; set; }
        
        /// <summary>
        /// <para>Name of a Landmark near the SITE ELEMENT that can be used to describe its relative location.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of a Landmark near the SITE ELEMENT that can be used to describe its relativ" +
            "e location.")]
        [System.Xml.Serialization.XmlElementAttribute("Landmark")]
        public MultilingualString Landmark { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private PublicUseEnumeration _publicUse = Netex.PublicUseEnumeration.All;
        
        /// <summary>
        /// <para>Not in EPIP. Whether the component is available for public use or is restricted.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.PublicUseEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether the component is available for public use or is restricted.")]
        [System.Xml.Serialization.XmlElementAttribute("PublicUse")]
        public PublicUseEnumeration PublicUse
        {
            get
            {
                return _publicUse;
            }
            set
            {
                _publicUse = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private CoveredEnumeration _covered = Netex.CoveredEnumeration.Indoors;
        
        /// <summary>
        /// <para>Whether the component is Indoors or outdoors. Default is Indoors.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.CoveredEnumeration.Indoors)]
        [System.ComponentModel.DescriptionAttribute("Whether the component is Indoors or outdoors. Default is Indoors.")]
        [System.Xml.Serialization.XmlElementAttribute("Covered")]
        public CoveredEnumeration Covered
        {
            get
            {
                return _covered;
            }
            set
            {
                _covered = value;
            }
        }
        
        /// <summary>
        /// <para>Whether the component is within a gated area or freely accessible without a pass or ticket.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether the component is within a gated area or freely accessible without a pass " +
            "or ticket.")]
        [System.Xml.Serialization.XmlElementAttribute("Gated")]
        public GatedEnumeration Gated { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Gated property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GatedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private LightingEnumeration _lighting = Netex.LightingEnumeration.WellLit;
        
        /// <summary>
        /// <para>Whether the component is lit or not. Default is well Lit.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.LightingEnumeration.WellLit)]
        [System.ComponentModel.DescriptionAttribute("Whether the component is lit or not. Default is well Lit.")]
        [System.Xml.Serialization.XmlElementAttribute("Lighting")]
        public LightingEnumeration Lighting
        {
            get
            {
                return _lighting;
            }
            set
            {
                _lighting = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _allAreasWheelchairAccessible = true;
        
        /// <summary>
        /// <para>Not in EPIP.                           Whether all areas of the component are wheelchair accessible.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether all areas of the component are wheelchair accessible.")]
        [System.Xml.Serialization.XmlElementAttribute("AllAreasWheelchairAccessible")]
        public bool AllAreasWheelchairAccessible
        {
            get
            {
                return _allAreasWheelchairAccessible;
            }
            set
            {
                _allAreasWheelchairAccessible = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.                Total number of people that component can contain.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Total number of people that component can contain.")]
        [System.Xml.Serialization.XmlElementAttribute("PersonCapacity")]
        public string PersonCapacity { get; set; }
        
        /// <summary>
        /// <para>EPIP: Limited to facilities available at STOP PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("EPIP: Limited to facilities available at STOP PLACE.")]
        [System.Xml.Serialization.XmlElementAttribute("facilities")]
        public SiteFacilitiesRelStructure Facilities { get; set; }
        
        /// <summary>
        /// <para>This is a primary Topographic place.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("This is a primary Topographic place.")]
        [System.Xml.Serialization.XmlElementAttribute("TopographicPlaceRef")]
        public TopographicPlaceRefStructure TopographicPlaceRef { get; set; }
        
        /// <summary>
        /// <para>Additional Topographic Places in which this object is located.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Additional Topographic Places in which this object is located.")]
        [System.Xml.Serialization.XmlElementAttribute("additionalTopographicPlaces")]
        public TopographicPlaceRefsRelStructure AdditionalTopographicPlaces { get; set; }
        
        /// <summary>
        /// <para>Common LOCALE dependant properties.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Common LOCALE dependant properties.")]
        [System.Xml.Serialization.XmlElementAttribute("Locale")]
        public LocaleStructure Locale { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("OrganisationRef")]
        public OrganisationRefStructure OrganisationRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("AuthorityRef")]
        public AuthorityRefStructure AuthorityRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("OperatorRef")]
        public OperatorRefStructure OperatorRef { get; set; }
        
        /// <summary>
        /// <para>EPIP: Can only be a reference to a general STOP PLACE. Used if this is a monomodal STOPPLACE that is contained in that general STOP PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("EPIP: Can only be a reference to a general STOP PLACE. Used if this is a monomoda" +
            "l STOPPLACE that is contained in that general STOP PLACE.")]
        [System.Xml.Serialization.XmlElementAttribute("ParentSiteRef")]
        public ParentSiteRefStructure ParentSiteRef { get; set; }
        
        /// <summary>
        /// <para>LEVELs found within SITE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("LEVELs found within SITE.")]
        [System.Xml.Serialization.XmlElementAttribute("levels")]
        public LevelsRelStructure Levels { get; set; }
        
        /// <summary>
        /// <para>ENTRANCEs to and within SITE</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("ENTRANCEs to and within SITE")]
        [System.Xml.Serialization.XmlElementAttribute("entrances")]
        public EntrancesStructure Entrances { get; set; }
        
        /// <summary>
        /// <para>Short public code for passengers to use when uniquely identifying the stop by SMS and other self-service channels.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Short public code for passengers to use when uniquely identifying the stop by SMS" +
            " and other self-service channels.")]
        [System.Xml.Serialization.XmlElementAttribute("PublicCode")]
        public string PublicCode { get; set; }
        
        /// <summary>
        /// <para>Primary public transport MODEs that may be accessed through this STOP PLACE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Primary public transport MODEs that may be accessed through this STOP PLACE.")]
        [System.Xml.Serialization.XmlElementAttribute("TransportMode")]
        public VehicleModeEnumeration TransportMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransportMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TransportModeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("AirSubmode")]
        public AirSubmodeEnumeration AirSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AirSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AirSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("BusSubmode")]
        public BusSubmodeEnumeration BusSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BusSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BusSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("CoachSubmode")]
        public CoachSubmodeEnumeration CoachSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CoachSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CoachSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("FunicularSubmode")]
        public FunicularSubmodeEnumeration FunicularSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FunicularSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FunicularSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("MetroSubmode")]
        public MetroSubmodeEnumeration MetroSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MetroSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MetroSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TramSubmode")]
        public TramSubmodeEnumeration TramSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TramSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TramSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TelecabinSubmode")]
        public TelecabinSubmodeEnumeration TelecabinSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TelecabinSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TelecabinSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("RailSubmode")]
        public RailSubmodeEnumeration RailSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RailSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RailSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("WaterSubmode")]
        public WaterSubmodeEnumeration WaterSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WaterSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WaterSubmodeSpecified { get; set; }
        
        /// <summary>
        /// <para>Extra: Snow and Ice Submode. +v1.1s</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Extra: Snow and Ice Submode. +v1.1s")]
        [System.Xml.Serialization.XmlElementAttribute("SnowAndIceSubmode")]
        public SnowAndIceSubmodeEnumeration SnowAndIceSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SnowAndIceSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SnowAndIceSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _otherTransportModes;
        
        /// <summary>
        /// <para>Other public transport MODES which may be accessed through this STOP PLACE.</para>
        /// <para>Allowed values for List of PT MODES of transport applicable to timetabled public transport.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Other public transport MODES which may be accessed through this STOP PLACE.")]
        [System.Xml.Serialization.XmlElementAttribute("OtherTransportModes")]
        public System.Collections.ObjectModel.Collection<string> OtherTransportModes
        {
            get
            {
                return _otherTransportModes;
            }
            private set
            {
                _otherTransportModes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OtherTransportModes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OtherTransportModesSpecified
        {
            get
            {
                return (this.OtherTransportModes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>TARIFF ZONEs into which component falls.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("TARIFF ZONEs into which component falls.")]
        [System.Xml.Serialization.XmlElementAttribute("tariffZones")]
        public TariffZoneRefsRelStructure TariffZones { get; set; }
        
        /// <summary>
        /// <para>Mandatory in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mandatory in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("StopPlaceType")]
        public StopTypeEnumeration StopPlaceType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StopPlaceType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StopPlaceTypeSpecified { get; set; }
        
        /// <summary>
        /// <para>Whether STOP PLACE is a border crossing, that is a point, at which an international boundary between two countries may be crossed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Whether STOP PLACE is a border crossing, that is a point, at which an internation" +
            "al boundary between two countries may be crossed.")]
        [System.Xml.Serialization.XmlElementAttribute("BorderCrossing")]
        public bool BorderCrossing { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BorderCrossing property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BorderCrossingSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Weighting")]
        public InterchangeWeightingEnumeration Weighting { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Weighting property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WeightingSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("StopPlaceWeight")]
        public StopPlaceWeightEnumeration StopPlaceWeight { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StopPlaceWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StopPlaceWeightSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("quays")]
        public QuaysRelStructure Quays { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Allowed values for INTERCHANGE Weighting.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for INTERCHANGE Weighting.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("InterchangeWeightingEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("Weighting", Namespace="http://www.netex.org.uk/netex")]
    public enum InterchangeWeightingEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("noInterchange")]
        NoInterchange,
        
        [System.Xml.Serialization.XmlEnumAttribute("interchangeAllowed")]
        InterchangeAllowed,
        
        [System.Xml.Serialization.XmlEnumAttribute("recommendedInterchange")]
        RecommendedInterchange,
        
        [System.Xml.Serialization.XmlEnumAttribute("preferredInterchange")]
        PreferredInterchange,
    }
    
    /// <summary>
    /// <para>Allowed values for INTERCHANGE classification at a STOP PLACE. +v1.1</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for INTERCHANGE classification at a STOP PLACE. +v1.1")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("StopPlaceWeightEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("StopPlaceWeight", Namespace="http://www.netex.org.uk/netex")]
    public enum StopPlaceWeightEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("international")]
        International,
        
        [System.Xml.Serialization.XmlEnumAttribute("national")]
        National,
        
        [System.Xml.Serialization.XmlEnumAttribute("regional")]
        Regional,
        
        [System.Xml.Serialization.XmlEnumAttribute("local")]
        Local,
    }
    
    /// <summary>
    /// <para>QUAYs within the STOP PLACE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("QUAYs within the STOP PLACE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("quays_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("quays", Namespace="http://www.netex.org.uk/netex")]
    public partial class QuaysRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<QuayVersionStructure> _quay;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Quay")]
        public System.Collections.ObjectModel.Collection<QuayVersionStructure> Quay
        {
            get
            {
                return _quay;
            }
            private set
            {
                _quay = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="QuaysRelStructure" /> class.</para>
        /// </summary>
        public QuaysRelStructure()
        {
            this._quay = new System.Collections.ObjectModel.Collection<QuayVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("pointsOfInterest_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("pointsOfInterest", Namespace="http://www.netex.org.uk/netex")]
    public partial class PointsOfInterestRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PointOfInterestStructure> _pointOfInterest;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("PointOfInterest")]
        public System.Collections.ObjectModel.Collection<PointOfInterestStructure> PointOfInterest
        {
            get
            {
                return _pointOfInterest;
            }
            private set
            {
                _pointOfInterest = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PointsOfInterestRelStructure" /> class.</para>
        /// </summary>
        public PointsOfInterestRelStructure()
        {
            this._pointOfInterest = new System.Collections.ObjectModel.Collection<PointOfInterestStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("parkings_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("parkings", Namespace="http://www.netex.org.uk/netex")]
    public partial class ParkingsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ParkingVersionStructure> _parking;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Parking")]
        public System.Collections.ObjectModel.Collection<ParkingVersionStructure> Parking
        {
            get
            {
                return _parking;
            }
            private set
            {
                _parking = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ParkingsRelStructure" /> class.</para>
        /// </summary>
        public ParkingsRelStructure()
        {
            this._parking = new System.Collections.ObjectModel.Collection<ParkingVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>A VEHICLE JOURNEY with a set of frequencies that may be used to represent a set of similar journeys differing only by their time of departure.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A VEHICLE JOURNEY with a set of frequencies that may be used to represent a set o" +
        "f similar journeys differing only by their time of departure.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TemplateServiceJourneyStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TemplateServiceJourney", Namespace="http://www.netex.org.uk/netex")]
    public partial class TemplateServiceJourneyStructure : ILinkSequenceElementGroup, IJourneyBaseContentGroup, IVehicleJourneyTimingsGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TemplateServiceJourneyStructure" /> class.</para>
        /// </summary>
        public TemplateServiceJourneyStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._projections = new System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure>();
            this._infoLinks = new System.Collections.ObjectModel.Collection<InfoLinkStructure>();
            this._frequencyGroups = new System.Collections.ObjectModel.Collection<HeadwayJourneyGroupVersionStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of LINK SEQUENCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of LINK SEQUENCE.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Units are as specified
        ///for Frame. Default is SI Metres.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Units are as specified for Frame. Default is SI Metres.")]
        [System.Xml.Serialization.XmlElementAttribute("Distance")]
        public decimal Distance { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Distance property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DistanceSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure> _projections;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlArrayAttribute("projections")]
        [System.Xml.Serialization.XmlArrayItemAttribute("LinkSequenceProjection", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure> Projections
        {
            get
            {
                return _projections;
            }
            private set
            {
                _projections = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Projections collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProjectionsSpecified
        {
            get
            {
                return (this.Projections.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<InfoLinkStructure> _infoLinks;
        
        /// <summary>
        /// <para>Not in EPIP.                      Hyperlinks associated with presentation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Hyperlinks associated with presentation.")]
        [System.Xml.Serialization.XmlArrayAttribute("infoLinks")]
        [System.Xml.Serialization.XmlArrayItemAttribute("InfoLink", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<InfoLinkStructure> InfoLinks
        {
            get
            {
                return _infoLinks;
            }
            private set
            {
                _infoLinks = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the InfoLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InfoLinksSpecified
        {
            get
            {
                return (this.InfoLinks.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>MODE of transport of JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("MODE of transport of JOURNEY.")]
        [System.Xml.Serialization.XmlElementAttribute("TransportMode")]
        public AllVehicleModesOfTransportEnumeration TransportMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransportMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TransportModeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TransportSubmode")]
        public TransportSubmodeStructure TransportSubmode { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Monitored")]
        public bool Monitored { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Monitored property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MonitoredSpecified { get; set; }
        
        /// <summary>
        /// <para>NOTICEs relevant for this Journey.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("NOTICEs relevant for this Journey.")]
        [System.Xml.Serialization.XmlElementAttribute("noticeAssignments")]
        public NoticeAssignmentsRelStructure NoticeAssignments { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("waitTimes")]
        public VehicleJourneyWaitTimesStructure WaitTimes { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("runTimes")]
        public VehicleJourneyRunTimesStructure RunTimes { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("layovers")]
        public VehicleJourneyLayoversStructure Layovers { get; set; }
        
        /// <summary>
        /// <para>EPIP - only headway permitted</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("EPIP - only headway permitted")]
        [System.Xml.Serialization.XmlElementAttribute("TemplateVehicleJourneyType")]
        public TemplateVehicleJourneyTypeEnumeration TemplateVehicleJourneyType { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TemplateVehicleJourneyType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TemplateVehicleJourneyTypeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<HeadwayJourneyGroupVersionStructure> _frequencyGroups;
        
        [System.Xml.Serialization.XmlArrayAttribute("frequencyGroups")]
        [System.Xml.Serialization.XmlArrayItemAttribute("HeadwayJourneyGroup", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<HeadwayJourneyGroupVersionStructure> FrequencyGroups
        {
            get
            {
                return _frequencyGroups;
            }
            private set
            {
                _frequencyGroups = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FrequencyGroups collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FrequencyGroupsSpecified
        {
            get
            {
                return (this.FrequencyGroups.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Allowed values for TEMPLATE VEHICLE JOURNEY type.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for TEMPLATE VEHICLE JOURNEY type.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TemplateVehicleJourneyTypeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum TemplateVehicleJourneyTypeEnumeration
    {
        
        /// <summary>
        /// <para>INTERCHANGE is considered a possible connection between journeys.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("INTERCHANGE is considered a possible connection between journeys.")]
        [System.Xml.Serialization.XmlEnumAttribute("headway")]
        Headway,
        
        /// <summary>
        /// <para>INTERCHANGE is advertised to public as a possible connection between journeys.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("INTERCHANGE is advertised to public as a possible connection between journeys.")]
        [System.Xml.Serialization.XmlEnumAttribute("rhythmic")]
        Rhythmic,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>A JOURNEY FREQUENCY GROUP defines a set of JOURNEYs and a start and end time during which the
    ///frequency-based services will run. It is further specialised in order to describe specific frequency behaviour
    ///such as headway-based services or rhythmical services.
    ///All the journeys in a JOURNEY FREQUENCY GROUP should follow the same JOURNEY PATTERN. When
    ///publishing a TEMPLATE JOURNEY, the JOURNEY PATTERN of the first journey in the group will be used to
    ///determine the stops visits for the group as a whole, i.e. at which to show the indicated frequency).</para>
    /// <para>Frequency groups defining TEMPLATE JOURNEY. Can only be of one type. EPIP supports only Headway type.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"A JOURNEY FREQUENCY GROUP defines a set of JOURNEYs and a start and end time during which the frequency-based services will run. It is further specialised in order to describe specific frequency behaviour such as headway-based services or rhythmical services. All the journeys in a JOURNEY FREQUENCY GROUP should follow the same JOURNEY PATTERN. When publishing a TEMPLATE JOURNEY, the JOURNEY PATTERN of the first journey in the group will be used to determine the stops visits for the group as a whole, i.e. at which to show the indicated frequency).")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("frequencyGroups_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("frequencyGroups", Namespace="http://www.netex.org.uk/netex")]
    public partial class FrequencyGroupsRelStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<HeadwayJourneyGroupVersionStructure> _headwayJourneyGroup;
        
        [System.Xml.Serialization.XmlElementAttribute("HeadwayJourneyGroup")]
        public System.Collections.ObjectModel.Collection<HeadwayJourneyGroupVersionStructure> HeadwayJourneyGroup
        {
            get
            {
                return _headwayJourneyGroup;
            }
            private set
            {
                _headwayJourneyGroup = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the HeadwayJourneyGroup collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HeadwayJourneyGroupSpecified
        {
            get
            {
                return (this.HeadwayJourneyGroup.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="FrequencyGroupsRelStructure" /> class.</para>
        /// </summary>
        public FrequencyGroupsRelStructure()
        {
            this._headwayJourneyGroup = new System.Collections.ObjectModel.Collection<HeadwayJourneyGroupVersionStructure>();
        }
    }
    
    /// <summary>
    /// <para>A coherent set of timetable data (VEHICLE JOURNEYs and BLOCKs) to which the same VALIDITY CONDITIONs have been assigned.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A coherent set of timetable data (VEHICLE JOURNEYs and BLOCKs) to which the same " +
        "VALIDITY CONDITIONs have been assigned.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TimetableFrame_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TimetableFrame", Namespace="http://www.netex.org.uk/netex")]
    public partial class TimetableFrameVersionStructure : IVersionFrameGroup, IDataManagedObjectAttributeGroup
    {
        
        /// <summary>
        /// <para>Main construction in EPIP to express validity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Main construction in EPIP to express validity.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public ValidBetweenVersionStructure ValidBetween { get; set; }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject, however EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject, however EPIP restricts use of VALIDITY CONDITIONs to just a simple na" +
            "me.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        /// <summary>
        /// <para>Name of VERSION FRAME.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of VERSION FRAME.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Description of VERSION FRAME contents.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of VERSION FRAME contents.")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Reference to a TYPE OF VERSION FRAME.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a TYPE OF VERSION FRAME.")]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfFrameRef")]
        public TypeOfFrameRefStructure TypeOfFrameRef { get; set; }
        
        /// <summary>
        /// <para>Previous baseline VERSION FRAME that objects in this VERSION require.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Previous baseline VERSION FRAME that objects in this VERSION require.")]
        [System.Xml.Serialization.XmlElementAttribute("BaselineVersionFrameRef")]
        public BaselineVersionFrameRefStructure BaselineVersionFrameRef { get; set; }
        
        /// <summary>
        /// <para>CODE SPACES used in this frame. Normally there will be at least one.  A default may be specified in the Frame defaults.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("CODE SPACES used in this frame. Normally there will be at least one. A default ma" +
            "y be specified in the Frame defaults.")]
        [System.Xml.Serialization.XmlElementAttribute("codespaces")]
        public CodespacesRelStructure Codespaces { get; set; }
        
        /// <summary>
        /// <para>Set of default values to assume for values in the
        ///frame if not explicitly stated on individual
        ///elements.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Set of default values to assume for values in the frame if not explicitly stated " +
            "on individual elements.")]
        [System.Xml.Serialization.XmlElementAttribute("FrameDefaults")]
        public FrameDefaultsStructure FrameDefaults { get; set; }
        
        /// <summary>
        /// <para>Not part of EPIP. Formal definitions of VERSIONs included in frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not part of EPIP. Formal definitions of VERSIONs included in frame.")]
        [System.Xml.Serialization.XmlElementAttribute("versions")]
        public VersionsRelStructure Versions { get; set; }
        
        /// <summary>
        /// <para>Prerequisite VERSION FRAMEs containing elements  that this frame depends on.  +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Prerequisite VERSION FRAMEs containing elements that this frame depends on. +v1.1" +
            "")]
        [System.Xml.Serialization.XmlElementAttribute("prerequisites")]
        public PrerequisitesRelStructure Prerequisites { get; set; }
        
        /// <summary>
        /// <para>Shared VALIDITY CONDITIONs used by elements
        ///in the FRAME. Note, this is NOT the "dominant" FRAME validity condition!</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Shared VALIDITY CONDITIONs used by elements in the FRAME. Note, this is NOT the \"" +
            "dominant\" FRAME validity condition!")]
        [System.Xml.Serialization.XmlElementAttribute("contentValidityConditions")]
        public ContentValidityConditionsRelStructure ContentValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _vehicleModes;
        
        /// <summary>
        /// <para>Not in EPIP. Modes of VEHICLE JOURNEYs in timetable.</para>
        /// <para>Allowed values for List of PT MODES of transport applicable to timetabled public transport.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Modes of VEHICLE JOURNEYs in timetable.")]
        [System.Xml.Serialization.XmlElementAttribute("VehicleModes")]
        public System.Collections.ObjectModel.Collection<string> VehicleModes
        {
            get
            {
                return _vehicleModes;
            }
            private set
            {
                _vehicleModes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the VehicleModes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VehicleModesSpecified
        {
            get
            {
                return (this.VehicleModes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TimetableFrameVersionStructure" /> class.</para>
        /// </summary>
        public TimetableFrameVersionStructure()
        {
            this._vehicleModes = new System.Collections.ObjectModel.Collection<string>();
        }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("OperatorView")]
        public OperatorViewStructure OperatorView { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("ServiceCalendarFrameRef")]
        public ServiceCalendarFrameRefStructure ServiceCalendarFrameRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("timeDemandTypes")]
        public TimeDemandTypesInFrameRelStructure TimeDemandTypes { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("vehicleJourneys")]
        public VehicleJourneysStructure VehicleJourneys { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("groupsOfServices")]
        public GroupsOfServicesRelStructure GroupsOfServices { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("trainNumbers")]
        public TrainNumbersRelStructure TrainNumbers { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("journeyPartCouples")]
        public JourneyPartCouplesRelStructure JourneyPartCouples { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("coupledJourneys")]
        public CoupledJourneysRelStructure CoupledJourneys { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. SERVICE FACILITies  in frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. SERVICE FACILITies in frame.")]
        [System.Xml.Serialization.XmlElementAttribute("serviceFacilitySets")]
        public ServiceFacilitySetsInFrameRelStructure ServiceFacilitySets { get; set; }
        
        /// <summary>
        /// <para>EPIP: Do not specify here, use embedding in object in question instead.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("EPIP: Do not specify here, use embedding in object in question instead.")]
        [System.Xml.Serialization.XmlElementAttribute("notices")]
        public NoticesRelStructure Notices { get; set; }
        
        /// <summary>
        /// <para>EPIP: Do not specify here, use embedding in object in question instead.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("EPIP: Do not specify here, use embedding in object in question instead.")]
        [System.Xml.Serialization.XmlElementAttribute("noticeAssignments")]
        public NoticeAssignmentsRelStructure NoticeAssignments { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("journeyInterchanges")]
        public JourneyInterchangesRelStructure JourneyInterchanges { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("vehicleTypes")]
        public VehicleTypesStructure VehicleTypes { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("vehicleJourneysStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("vehicleJourneys", Namespace="http://www.netex.org.uk/netex")]
    public partial class VehicleJourneysStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ServiceJourneyVersionStructure> _serviceJourney;
        
        [System.Xml.Serialization.XmlElementAttribute("ServiceJourney")]
        public System.Collections.ObjectModel.Collection<ServiceJourneyVersionStructure> ServiceJourney
        {
            get
            {
                return _serviceJourney;
            }
            private set
            {
                _serviceJourney = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ServiceJourney collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceJourneySpecified
        {
            get
            {
                return (this.ServiceJourney.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="VehicleJourneysStructure" /> class.</para>
        /// </summary>
        public VehicleJourneysStructure()
        {
            this._serviceJourney = new System.Collections.ObjectModel.Collection<ServiceJourneyVersionStructure>();
            this._vehicleJourney = new System.Collections.ObjectModel.Collection<VehicleJourneyVersionStructure>();
            this._templateServiceJourney = new System.Collections.ObjectModel.Collection<TemplateServiceJourneyStructure>();
            this._deadRun = new System.Collections.ObjectModel.Collection<DeadRunVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<VehicleJourneyVersionStructure> _vehicleJourney;
        
        /// <summary>
        /// <para>Not in EPIP. Experimental. TBD</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Experimental. TBD")]
        [System.Xml.Serialization.XmlElementAttribute("VehicleJourney")]
        public System.Collections.ObjectModel.Collection<VehicleJourneyVersionStructure> VehicleJourney
        {
            get
            {
                return _vehicleJourney;
            }
            private set
            {
                _vehicleJourney = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the VehicleJourney collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VehicleJourneySpecified
        {
            get
            {
                return (this.VehicleJourney.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TemplateServiceJourneyStructure> _templateServiceJourney;
        
        [System.Xml.Serialization.XmlElementAttribute("TemplateServiceJourney")]
        public System.Collections.ObjectModel.Collection<TemplateServiceJourneyStructure> TemplateServiceJourney
        {
            get
            {
                return _templateServiceJourney;
            }
            private set
            {
                _templateServiceJourney = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TemplateServiceJourney collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TemplateServiceJourneySpecified
        {
            get
            {
                return (this.TemplateServiceJourney.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DeadRunVersionStructure> _deadRun;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("DeadRun")]
        public System.Collections.ObjectModel.Collection<DeadRunVersionStructure> DeadRun
        {
            get
            {
                return _deadRun;
            }
            private set
            {
                _deadRun = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DeadRun collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DeadRunSpecified
        {
            get
            {
                return (this.DeadRun.Count != 0);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DeadRun_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("DeadRun", Namespace="http://www.netex.org.uk/netex")]
    public partial class DeadRunVersionStructure : ILinkSequenceElementGroup, IVehicleJourneyTimingsGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DeadRunVersionStructure" /> class.</para>
        /// </summary>
        public DeadRunVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._projections = new System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure>();
            this._infoLinks = new System.Collections.ObjectModel.Collection<InfoLinkStructure>();
            this._dayTypes = new System.Collections.ObjectModel.Collection<DayTypeRefStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of LINK SEQUENCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of LINK SEQUENCE.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("ShortName")]
        public MultilingualString ShortName { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Units are as specified
        ///for Frame. Default is SI Metres.</para>
        /// <para>Length type for short distances. System for Units can be specified on frame. Normally (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Units are as specified for Frame. Default is SI Metres.")]
        [System.Xml.Serialization.XmlElementAttribute("Distance")]
        public decimal Distance { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Distance property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DistanceSpecified { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure> _projections;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlArrayAttribute("projections")]
        [System.Xml.Serialization.XmlArrayItemAttribute("LinkSequenceProjection", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<LinkSequenceProjectionStructure> Projections
        {
            get
            {
                return _projections;
            }
            private set
            {
                _projections = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Projections collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProjectionsSpecified
        {
            get
            {
                return (this.Projections.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<InfoLinkStructure> _infoLinks;
        
        /// <summary>
        /// <para>Not in EPIP.                      Hyperlinks associated with presentation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Hyperlinks associated with presentation.")]
        [System.Xml.Serialization.XmlArrayAttribute("infoLinks")]
        [System.Xml.Serialization.XmlArrayItemAttribute("InfoLink", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<InfoLinkStructure> InfoLinks
        {
            get
            {
                return _infoLinks;
            }
            private set
            {
                _infoLinks = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the InfoLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InfoLinksSpecified
        {
            get
            {
                return (this.InfoLinks.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("TransportMode")]
        public AllVehicleModesOfTransportEnumeration TransportMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransportMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TransportModeSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("DepartureTime")]
        public string DepartureTime { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("DepartureDayOffset")]
        public string DepartureDayOffset { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("JourneyDuration")]
        public string JourneyDuration { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DayTypeRefStructure> _dayTypes;
        
        [System.Xml.Serialization.XmlArrayAttribute("dayTypes")]
        [System.Xml.Serialization.XmlArrayItemAttribute("DayTypeRef", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<DayTypeRefStructure> DayTypes
        {
            get
            {
                return _dayTypes;
            }
            private set
            {
                _dayTypes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DayTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DayTypesSpecified
        {
            get
            {
                return (this.DayTypes.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("RouteRef")]
        public RouteRefStructure RouteRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("DeadRunJourneyPatternRef")]
        public DeadRunJourneyPatternRefStructure DeadRunJourneyPatternRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TimeDemandTypeRef")]
        public TimeDemandTypeRefStructure TimeDemandTypeRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("BlockRef")]
        public BlockRefStructure BlockRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("timeDemandTypes")]
        public TimeDemandTypeRefsRelStructure TimeDemandTypes { get; set; }
        
        /// <summary>
        /// <para>In the EPIP, the JOURNEY PARTs should be embedded in-line with their parent VEHICLE JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("In the EPIP, the JOURNEY PARTs should be embedded in-line with their parent VEHIC" +
            "LE JOURNEY.")]
        [System.Xml.Serialization.XmlElementAttribute("parts")]
        public JourneyPartsRelStructure Parts { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("waitTimes")]
        public VehicleJourneyWaitTimesStructure WaitTimes { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("runTimes")]
        public VehicleJourneyRunTimesStructure RunTimes { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("layovers")]
        public VehicleJourneyLayoversStructure Layovers { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("passingTimes")]
        public PassingTimesRelStructure PassingTimes { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("OperatorRef")]
        public OperatorRefStructure OperatorRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("DeadRunType")]
        public string DeadRunType { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("calls")]
        public DeadRunCallsRelStructure Calls { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DeadRunJourneyPatternRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("DeadRunJourneyPatternRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class DeadRunJourneyPatternRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("deadRunCalls_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeadRunCallsRelStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DeadRunCallStructure> _deadRunCall;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("DeadRunCall")]
        public System.Collections.ObjectModel.Collection<DeadRunCallStructure> DeadRunCall
        {
            get
            {
                return _deadRunCall;
            }
            private set
            {
                _deadRunCall = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DeadRunCallsRelStructure" /> class.</para>
        /// </summary>
        public DeadRunCallsRelStructure()
        {
            this._deadRunCall = new System.Collections.ObjectModel.Collection<DeadRunCallStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DeadRunCallStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("DeadRunCall", Namespace="http://www.netex.org.uk/netex")]
    public partial class DeadRunCallStructure : IEntityAttributeGroup
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("PointInJourneyPatternRef")]
        public StopPointInJourneyPatternRefStructure PointInJourneyPatternRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Arrival")]
        public DeadRunArrivalStructure Arrival { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DeadRunDepartureStructure> _departure;
        
        [System.Xml.Serialization.XmlElementAttribute("Departure")]
        public System.Collections.ObjectModel.Collection<DeadRunDepartureStructure> Departure
        {
            get
            {
                return _departure;
            }
            private set
            {
                _departure = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Departure collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DepartureSpecified
        {
            get
            {
                return (this.Departure.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DeadRunCallStructure" /> class.</para>
        /// </summary>
        public DeadRunCallStructure()
        {
            this._departure = new System.Collections.ObjectModel.Collection<DeadRunDepartureStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public string Order { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DeadRunArrivalStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeadRunArrivalStructure
    {
        
        /// <summary>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("Time")]
        public string Time { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("DayOffset")]
        public int DayOffset { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DayOffset property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DayOffsetSpecified { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DeadRunDepartureStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeadRunDepartureStructure : IDeadRunCallDeparturePartGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("Time")]
        public string Time { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("DayOffset")]
        public int DayOffset { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DayOffset property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DayOffsetSpecified { get; set; }
        
        /// <summary>
        /// <para>Timetabled waiting interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Timetabled waiting interval.")]
        [System.Xml.Serialization.XmlElementAttribute("WaitTime")]
        public string WaitTime { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("JourneyPartRef")]
        public JourneyPartRefStructure JourneyPartRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TimeDemandTypeRef")]
        public TimeDemandTypeRefStructure TimeDemandTypeRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TimebandRef")]
        public TimebandRefStructure TimebandRef { get; set; }
    }
    
    /// <summary>
    /// <para>Elements describing a Departure part of the CALL.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements describing a Departure part of the CALL.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IDeadRunCallDeparturePartGroup
    {
        
        JourneyPartRefStructure JourneyPartRef
        {
            get;
            set;
        }
        
        TimeDemandTypeRefStructure TimeDemandTypeRef
        {
            get;
            set;
        }
        
        TimebandRefStructure TimebandRef
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Groupings of Journeys In frame. Can be used to define inbound and outbound beds for a matrix presentation of the JOURNEYs in the TIMETABLE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Groupings of Journeys In frame. Can be used to define inbound and outbound beds f" +
        "or a matrix presentation of the JOURNEYs in the TIMETABLE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("groupsOfServices_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("groupsOfServices", Namespace="http://www.netex.org.uk/netex")]
    public partial class GroupsOfServicesRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<GroupOfServicesVersionStructure> _groupOfServices;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("GroupOfServices")]
        public System.Collections.ObjectModel.Collection<GroupOfServicesVersionStructure> GroupOfServices
        {
            get
            {
                return _groupOfServices;
            }
            private set
            {
                _groupOfServices = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="GroupsOfServicesRelStructure" /> class.</para>
        /// </summary>
        public GroupsOfServicesRelStructure()
        {
            this._groupOfServices = new System.Collections.ObjectModel.Collection<GroupOfServicesVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("trainNumbers_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("trainNumbers", Namespace="http://www.netex.org.uk/netex")]
    public partial class TrainNumbersRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TrainNumberVersionStructure> _trainNumber;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TrainNumber")]
        public System.Collections.ObjectModel.Collection<TrainNumberVersionStructure> TrainNumber
        {
            get
            {
                return _trainNumber;
            }
            private set
            {
                _trainNumber = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TrainNumbersRelStructure" /> class.</para>
        /// </summary>
        public TrainNumbersRelStructure()
        {
            this._trainNumber = new System.Collections.ObjectModel.Collection<TrainNumberVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>Specification of codes assigned to particular VEHICLE JOURNEYs when operated by TRAINs of COMPOUND TRAINs according to a functional purpose (passenger information, operation follow-up, etc).</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Specification of codes assigned to particular VEHICLE JOURNEYs when operated by T" +
        "RAINs of COMPOUND TRAINs according to a functional purpose (passenger informatio" +
        "n, operation follow-up, etc).")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TrainNumber_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TrainNumber", Namespace="http://www.netex.org.uk/netex")]
    public partial class TrainNumberVersionStructure : IDataManagedObjectElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TrainNumberVersionStructure" /> class.</para>
        /// </summary>
        public TrainNumberVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>TRAIN NUMBER to use when advertising Train to the public.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("TRAIN NUMBER to use when advertising Train to the public.")]
        [System.Xml.Serialization.XmlElementAttribute("ForAdvertisement")]
        public string ForAdvertisement { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP. TRAIN NUMBER to use for production.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. TRAIN NUMBER to use for production.")]
        [System.Xml.Serialization.XmlElementAttribute("ForProduction")]
        public string ForProduction { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("journeyPartCouples_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("journeyPartCouples", Namespace="http://www.netex.org.uk/netex")]
    public partial class JourneyPartCouplesRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<JourneyPartCoupleVersionStructure> _journeyPartCouple;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("JourneyPartCouple")]
        public System.Collections.ObjectModel.Collection<JourneyPartCoupleVersionStructure> JourneyPartCouple
        {
            get
            {
                return _journeyPartCouple;
            }
            private set
            {
                _journeyPartCouple = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyPartCouplesRelStructure" /> class.</para>
        /// </summary>
        public JourneyPartCouplesRelStructure()
        {
            this._journeyPartCouple = new System.Collections.ObjectModel.Collection<JourneyPartCoupleVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("coupledJourneys_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CoupledJourneysRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<CoupledJourneyVersionStructure> _coupledJourney;
        
        /// <summary>
        /// <para>A complete journey operated by a coupled train, composed of two or more VEHICLE JOURNEYs remaining coupled together all along a JOURNEY PATTERN. A COUPLED JOURNEY may be viewed as a single VEHICLE JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A complete journey operated by a coupled train, composed of two or more VEHICLE J" +
            "OURNEYs remaining coupled together all along a JOURNEY PATTERN. A COUPLED JOURNE" +
            "Y may be viewed as a single VEHICLE JOURNEY.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("CoupledJourney")]
        public System.Collections.ObjectModel.Collection<CoupledJourneyVersionStructure> CoupledJourney
        {
            get
            {
                return _coupledJourney;
            }
            private set
            {
                _coupledJourney = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CoupledJourneysRelStructure" /> class.</para>
        /// </summary>
        public CoupledJourneysRelStructure()
        {
            this._coupledJourney = new System.Collections.ObjectModel.Collection<CoupledJourneyVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>A complete journey operated by a coupled train, composed of two or more VEHICLE JOURNEYs remaining coupled together all along a JOURNEY PATTERN. A COUPLED JOURNEY may be viewed as a single VEHICLE JOURNEY.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A complete journey operated by a coupled train, composed of two or more VEHICLE J" +
        "OURNEYs remaining coupled together all along a JOURNEY PATTERN. A COUPLED JOURNE" +
        "Y may be viewed as a single VEHICLE JOURNEY.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CoupledJourney_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("CoupledJourney", Namespace="http://www.netex.org.uk/netex")]
    public partial class CoupledJourneyVersionStructure : IDataManagedObjectElementGroup, ICoupledJourneyGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CoupledJourneyVersionStructure" /> class.</para>
        /// </summary>
        public CoupledJourneyVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of COUPLED JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of COUPLED JOURNEY.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Description of COUPLED JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of COUPLED JOURNEY.")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TrainBlockRef")]
        public TrainBlockRefStructure TrainBlockRef { get; set; }
        
        /// <summary>
        /// <para>VEHICLE JOURNEYs making up the COUPLED JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("VEHICLE JOURNEYs making up the COUPLED JOURNEY.")]
        [System.Xml.Serialization.XmlElementAttribute("journeys")]
        public JourneyRefsInCoulpledJourneyRelStructure Journeys { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Elements for COUPLED JOURNEY.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for COUPLED JOURNEY.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ICoupledJourneyGroup
    {
        
        /// <summary>
        /// <para>Name of COUPLED JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of COUPLED JOURNEY.")]
        MultilingualString Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Description of COUPLED JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of COUPLED JOURNEY.")]
        MultilingualString Description
        {
            get;
            set;
        }
        
        TrainBlockRefStructure TrainBlockRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>VEHICLE JOURNEYs making up the COUPLED JOURNEY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("VEHICLE JOURNEYs making up the COUPLED JOURNEY.")]
        JourneyRefsInCoulpledJourneyRelStructure Journeys
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TrainBlockRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TrainBlockRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TrainBlockRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("journeyRefs_InCoulpledJourney_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JourneyRefsInCoulpledJourneyRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<VehicleJourneyRefStructure> _vehicleJourneyRef;
        
        [System.Xml.Serialization.XmlElementAttribute("VehicleJourneyRef")]
        public System.Collections.ObjectModel.Collection<VehicleJourneyRefStructure> VehicleJourneyRef
        {
            get
            {
                return _vehicleJourneyRef;
            }
            private set
            {
                _vehicleJourneyRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the VehicleJourneyRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VehicleJourneyRefSpecified
        {
            get
            {
                return (this.VehicleJourneyRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyRefsInCoulpledJourneyRelStructure" /> class.</para>
        /// </summary>
        public JourneyRefsInCoulpledJourneyRelStructure()
        {
            this._vehicleJourneyRef = new System.Collections.ObjectModel.Collection<VehicleJourneyRefStructure>();
            this._deadRunRef = new System.Collections.ObjectModel.Collection<DeadRunRefStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DeadRunRefStructure> _deadRunRef;
        
        [System.Xml.Serialization.XmlElementAttribute("DeadRunRef")]
        public System.Collections.ObjectModel.Collection<DeadRunRefStructure> DeadRunRef
        {
            get
            {
                return _deadRunRef;
            }
            private set
            {
                _deadRunRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DeadRunRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DeadRunRefSpecified
        {
            get
            {
                return (this.DeadRunRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DeadRunRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("DeadRunRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class DeadRunRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Type for containment in frame of SERVICE FACILITY SETs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for containment in frame of SERVICE FACILITY SETs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("serviceFacilitySetsInFrame_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServiceFacilitySetsInFrameRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ServiceFacilitySetVersionStructure> _serviceFacilitySet;
        
        /// <summary>
        /// <para>Service FACILITY. Set of enumerated FACILITY values (Where available names are based on TPEG classifications, augmented with UIC etc.).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Service FACILITY. Set of enumerated FACILITY values (Where available names are ba" +
            "sed on TPEG classifications, augmented with UIC etc.).")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ServiceFacilitySet")]
        public System.Collections.ObjectModel.Collection<ServiceFacilitySetVersionStructure> ServiceFacilitySet
        {
            get
            {
                return _serviceFacilitySet;
            }
            private set
            {
                _serviceFacilitySet = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ServiceFacilitySetsInFrameRelStructure" /> class.</para>
        /// </summary>
        public ServiceFacilitySetsInFrameRelStructure()
        {
            this._serviceFacilitySet = new System.Collections.ObjectModel.Collection<ServiceFacilitySetVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("journeyInterchanges_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("journeyInterchanges", Namespace="http://www.netex.org.uk/netex")]
    public partial class JourneyInterchangesRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ServiceJourneyInterchangeVersionStructure> _serviceJourneyInterchange;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ServiceJourneyInterchange")]
        public System.Collections.ObjectModel.Collection<ServiceJourneyInterchangeVersionStructure> ServiceJourneyInterchange
        {
            get
            {
                return _serviceJourneyInterchange;
            }
            private set
            {
                _serviceJourneyInterchange = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyInterchangesRelStructure" /> class.</para>
        /// </summary>
        public JourneyInterchangesRelStructure()
        {
            this._serviceJourneyInterchange = new System.Collections.ObjectModel.Collection<ServiceJourneyInterchangeVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("UsedConnectionEndStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UsedConnectionEndStructure
    {
        
        [System.Xml.Serialization.XmlElementAttribute("TransportMode")]
        public VehicleModeEnumeration TransportMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransportMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TransportModeSpecified { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ScheduledStopPointRef")]
        public ScheduledStopPointRefStructure ScheduledStopPointRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("additionalTopographicPlaces_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdditionalTopographicPlacesRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TopographicPlaceRefStructure> _topographicPlaceRef;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TopographicPlaceRef")]
        public System.Collections.ObjectModel.Collection<TopographicPlaceRefStructure> TopographicPlaceRef
        {
            get
            {
                return _topographicPlaceRef;
            }
            private set
            {
                _topographicPlaceRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="AdditionalTopographicPlacesRelStructure" /> class.</para>
        /// </summary>
        public AdditionalTopographicPlacesRelStructure()
        {
            this._topographicPlaceRef = new System.Collections.ObjectModel.Collection<TopographicPlaceRefStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("directionRefs_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DirectionRefsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DirectionRefStructure> _directionRef;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("DirectionRef")]
        public System.Collections.ObjectModel.Collection<DirectionRefStructure> DirectionRef
        {
            get
            {
                return _directionRef;
            }
            private set
            {
                _directionRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DirectionRefsRelStructure" /> class.</para>
        /// </summary>
        public DirectionRefsRelStructure()
        {
            this._directionRef = new System.Collections.ObjectModel.Collection<DirectionRefStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("limitations_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("limitations", Namespace="http://www.netex.org.uk/netex")]
    public partial class LimitationsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("AccessibilityLimitation")]
        public AccessibilityLimitationStructure AccessibilityLimitation { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("trainNumberRefs_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TrainNumberRefsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TrainNumberRefStructure> _trainNumberRef;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TrainNumberRef")]
        public System.Collections.ObjectModel.Collection<TrainNumberRefStructure> TrainNumberRef
        {
            get
            {
                return _trainNumberRef;
            }
            private set
            {
                _trainNumberRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TrainNumberRefsRelStructure" /> class.</para>
        /// </summary>
        public TrainNumberRefsRelStructure()
        {
            this._trainNumberRef = new System.Collections.ObjectModel.Collection<TrainNumberRefStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>Enumeration of Uses of language.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Enumeration of Uses of language.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LanguageUseEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum LanguageUseEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("normallyUsed")]
        NormallyUsed,
        
        [System.Xml.Serialization.XmlEnumAttribute("understood")]
        Understood,
        
        [System.Xml.Serialization.XmlEnumAttribute("native")]
        Native,
        
        [System.Xml.Serialization.XmlEnumAttribute("spoken")]
        Spoken,
        
        [System.Xml.Serialization.XmlEnumAttribute("written")]
        Written,
        
        [System.Xml.Serialization.XmlEnumAttribute("read")]
        Read,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
        
        [System.Xml.Serialization.XmlEnumAttribute("allUses")]
        AllUses,
    }
    
    /// <summary>
    /// <para>Allowed values for Flexible Booking method.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Flexible Booking method.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BookingMethodEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum BookingMethodEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("callDriver")]
        CallDriver,
        
        [System.Xml.Serialization.XmlEnumAttribute("callOffice")]
        CallOffice,
        
        [System.Xml.Serialization.XmlEnumAttribute("online")]
        Online,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
        
        [System.Xml.Serialization.XmlEnumAttribute("phoneAtStop")]
        PhoneAtStop,
        
        [System.Xml.Serialization.XmlEnumAttribute("text")]
        Text,
        
        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }
    
    /// <summary>
    /// <para>Allowed values for Purchase Moment.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Purchase Moment.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PurchaseMomentEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum PurchaseMomentEnumeration
    {
        
        /// <summary>
        /// <para>Purchase must   be made on reservation in advance of travel.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Purchase must be made on reservation in advance of travel.")]
        [System.Xml.Serialization.XmlEnumAttribute("onReservation")]
        OnReservation,
        
        /// <summary>
        /// <para>Purchase can  be made in advance of travel.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Purchase can be made in advance of travel.")]
        [System.Xml.Serialization.XmlEnumAttribute("inAdvance")]
        InAdvance,
        
        /// <summary>
        /// <para>Purchase can only be made in advance of travel (e.g. for season ticket or advance ticket).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Purchase can only be made in advance of travel (e.g. for season ticket or advance" +
            " ticket).")]
        [System.Xml.Serialization.XmlEnumAttribute("inAdvanceOnly")]
        InAdvanceOnly,
        
        /// <summary>
        /// <para>Purchase can   be made before boarding transport vehicle.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Purchase can be made before boarding transport vehicle.")]
        [System.Xml.Serialization.XmlEnumAttribute("beforeBoarding")]
        BeforeBoarding,
        
        /// <summary>
        /// <para>Purchase must  be made before boarding transport vehicle.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Purchase must be made before boarding transport vehicle.")]
        [System.Xml.Serialization.XmlEnumAttribute("beforeBoardingOnly")]
        BeforeBoardingOnly,
        
        /// <summary>
        /// <para>Purchase can   be made on boarding  transport vehicle.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Purchase can be made on boarding transport vehicle.")]
        [System.Xml.Serialization.XmlEnumAttribute("onBoarding")]
        OnBoarding,
        
        /// <summary>
        /// <para>Purchase can  only be made on boarding  transport vehicle.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Purchase can only be made on boarding transport vehicle.")]
        [System.Xml.Serialization.XmlEnumAttribute("onBoardingOnly")]
        OnBoardingOnly,
        
        /// <summary>
        /// <para>Purchase can  be made after boarding  transport vehicle.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Purchase can be made after boarding transport vehicle.")]
        [System.Xml.Serialization.XmlEnumAttribute("afterBoarding")]
        AfterBoarding,
        
        /// <summary>
        /// <para>Purchase can  be made on entering transport system.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Purchase can be made on entering transport system.")]
        [System.Xml.Serialization.XmlEnumAttribute("onCheckIn")]
        OnCheckIn,
        
        /// <summary>
        /// <para>Purchase can   be made on leaving transport system.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Purchase can be made on leaving transport system.")]
        [System.Xml.Serialization.XmlEnumAttribute("onCheckOut")]
        OnCheckOut,
        
        /// <summary>
        /// <para>Purchase can  only be made on subscription.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Purchase can only be made on subscription.")]
        [System.Xml.Serialization.XmlEnumAttribute("subscriptionOnly")]
        SubscriptionOnly,
        
        /// <summary>
        /// <para>Other moment of Purchase</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Other moment of Purchase")]
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Allowed values for Booking Process UIC 7037 Code list.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Booking Process UIC 7037 Code list.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BookingProcessEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("BookingProcessFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum BookingProcessEnumeration
    {
        
        /// <summary>
        /// <para>Product is not available.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Product is not available.")]
        [System.Xml.Serialization.XmlEnumAttribute("productNotAvailable")]
        ProductNotAvailable,
        
        /// <summary>
        /// <para>Product cannot be booked.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Product cannot be booked.")]
        [System.Xml.Serialization.XmlEnumAttribute("productNotBookable")]
        ProductNotBookable,
        
        /// <summary>
        /// <para>Product can be booked online internationally.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Product can be booked online internationally.")]
        [System.Xml.Serialization.XmlEnumAttribute("bookableThroughInternationalSystem")]
        BookableThroughInternationalSystem,
        
        /// <summary>
        /// <para>Product can be booked online nationally.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Product can be booked online nationally.")]
        [System.Xml.Serialization.XmlEnumAttribute("bookableThroughNationalSystem")]
        BookableThroughNationalSystem,
        
        /// <summary>
        /// <para>Product can only be booked by contacting specific authorised retail outlets</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Product can only be booked by contacting specific authorised retail outlets")]
        [System.Xml.Serialization.XmlEnumAttribute("bookableManuallly")]
        BookableManuallly,
        
        /// <summary>
        /// <para>Other booking process.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Other booking process.")]
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Allowed values for ACCESS SPACE TYPEs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for ACCESS SPACE TYPEs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AccessSpaceTypeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum AccessSpaceTypeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("concourse")]
        Concourse,
        
        [System.Xml.Serialization.XmlEnumAttribute("bookingHall")]
        BookingHall,
        
        [System.Xml.Serialization.XmlEnumAttribute("forecourt")]
        Forecourt,
        
        [System.Xml.Serialization.XmlEnumAttribute("underpass")]
        Underpass,
        
        [System.Xml.Serialization.XmlEnumAttribute("overpass")]
        Overpass,
        
        [System.Xml.Serialization.XmlEnumAttribute("passage")]
        Passage,
        
        [System.Xml.Serialization.XmlEnumAttribute("passageSection")]
        PassageSection,
        
        [System.Xml.Serialization.XmlEnumAttribute("lift")]
        Lift,
        
        [System.Xml.Serialization.XmlEnumAttribute("gallery")]
        Gallery,
        
        [System.Xml.Serialization.XmlEnumAttribute("garage")]
        Garage,
        
        [System.Xml.Serialization.XmlEnumAttribute("shop")]
        Shop,
        
        [System.Xml.Serialization.XmlEnumAttribute("waitingRoom")]
        WaitingRoom,
        
        [System.Xml.Serialization.XmlEnumAttribute("restaurant")]
        Restaurant,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
        
        [System.Xml.Serialization.XmlEnumAttribute("staircase")]
        Staircase,
        
        [System.Xml.Serialization.XmlEnumAttribute("wc")]
        Wc,
    }
    
    /// <summary>
    /// <para>Allowed values for Passage Types.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Passage Types.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PassageTypeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum PassageTypeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
        
        [System.Xml.Serialization.XmlEnumAttribute("pathway")]
        Pathway,
        
        [System.Xml.Serialization.XmlEnumAttribute("corridor")]
        Corridor,
        
        [System.Xml.Serialization.XmlEnumAttribute("overpass")]
        Overpass,
        
        [System.Xml.Serialization.XmlEnumAttribute("underpass")]
        Underpass,
        
        [System.Xml.Serialization.XmlEnumAttribute("tunnel")]
        Tunnel,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Types of SITE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Types of SITE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SiteTypeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum SiteTypeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("school")]
        School,
        
        [System.Xml.Serialization.XmlEnumAttribute("university")]
        University,
        
        [System.Xml.Serialization.XmlEnumAttribute("works")]
        Works,
        
        [System.Xml.Serialization.XmlEnumAttribute("office")]
        Office,
        
        [System.Xml.Serialization.XmlEnumAttribute("militaryBase")]
        MilitaryBase,
        
        [System.Xml.Serialization.XmlEnumAttribute("retail")]
        Retail,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Allowed values for lighting method.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for lighting method.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LightingOnMethodEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum LightingOnMethodEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("movementDetector")]
        MovementDetector,
        
        [System.Xml.Serialization.XmlEnumAttribute("stepDetector")]
        StepDetector,
        
        [System.Xml.Serialization.XmlEnumAttribute("switchOnTheWall")]
        SwitchOnTheWall,
        
        [System.Xml.Serialization.XmlEnumAttribute("atDoorOpening")]
        AtDoorOpening,
        
        [System.Xml.Serialization.XmlEnumAttribute("onlyAtNight")]
        OnlyAtNight,
        
        [System.Xml.Serialization.XmlEnumAttribute("alwaysOn")]
        AlwaysOn,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Allowed values for direction of use.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for direction of use.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DirectionOfUseEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum DirectionOfUseEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("up")]
        Up,
        
        [System.Xml.Serialization.XmlEnumAttribute("down")]
        Down,
        
        [System.Xml.Serialization.XmlEnumAttribute("both")]
        Both,
    }
    
    /// <summary>
    /// <para>Allowed value for surface.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed value for surface.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SurfaceTypeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum SurfaceTypeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("asphalt")]
        Asphalt,
        
        [System.Xml.Serialization.XmlEnumAttribute("bricks")]
        Bricks,
        
        [System.Xml.Serialization.XmlEnumAttribute("cobbles")]
        Cobbles,
        
        [System.Xml.Serialization.XmlEnumAttribute("earth")]
        Earth,
        
        [System.Xml.Serialization.XmlEnumAttribute("grass")]
        Grass,
        
        [System.Xml.Serialization.XmlEnumAttribute("looseSurface")]
        LooseSurface,
        
        [System.Xml.Serialization.XmlEnumAttribute("pavingStones")]
        PavingStones,
        
        [System.Xml.Serialization.XmlEnumAttribute("roughSurface")]
        RoughSurface,
        
        [System.Xml.Serialization.XmlEnumAttribute("smooth")]
        Smooth,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Allowed values for Sides of handrail.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Sides of handrail.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HandrailEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum HandrailEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
        
        [System.Xml.Serialization.XmlEnumAttribute("oneSide")]
        OneSide,
        
        [System.Xml.Serialization.XmlEnumAttribute("bothSides")]
        BothSides,
    }
    
    /// <summary>
    /// <para>Allowed values for Gradient steepness.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Gradient steepness.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GradientEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum GradientEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("verySteep")]
        VerySteep,
        
        [System.Xml.Serialization.XmlEnumAttribute("steep")]
        Steep,
        
        [System.Xml.Serialization.XmlEnumAttribute("medium")]
        Medium,
        
        [System.Xml.Serialization.XmlEnumAttribute("gentle")]
        Gentle,
        
        [System.Xml.Serialization.XmlEnumAttribute("level")]
        Level,
    }
    
    /// <summary>
    /// <para>Allowed values for entrance attention device.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for entrance attention device.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("EntranceAttentionEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum EntranceAttentionEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
        
        [System.Xml.Serialization.XmlEnumAttribute("doorbell")]
        Doorbell,
        
        [System.Xml.Serialization.XmlEnumAttribute("helpPoint")]
        HelpPoint,
        
        [System.Xml.Serialization.XmlEnumAttribute("intercom")]
        Intercom,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Allowed values for CROSSING EQUIPMENT.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for CROSSING EQUIPMENT.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CrossingTypeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum CrossingTypeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("levelCrossing")]
        LevelCrossing,
        
        [System.Xml.Serialization.XmlEnumAttribute("barrowCrossing")]
        BarrowCrossing,
        
        [System.Xml.Serialization.XmlEnumAttribute("roadCrossing")]
        RoadCrossing,
        
        [System.Xml.Serialization.XmlEnumAttribute("roadCrossingWithIsland")]
        RoadCrossingWithIsland,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Allowed values for the necessary force to open a door.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for the necessary force to open a door.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NecessaryForceEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum NecessaryForceEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("noForce")]
        NoForce,
        
        [System.Xml.Serialization.XmlEnumAttribute("lightForce")]
        LightForce,
        
        [System.Xml.Serialization.XmlEnumAttribute("mediumForce")]
        MediumForce,
        
        [System.Xml.Serialization.XmlEnumAttribute("heavyForce")]
        HeavyForce,
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
    }
    
    /// <summary>
    /// <para>Allowed values for Accessibility Info.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Accessibility Info.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AccessibilityInfoFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("AccessibilityInfoFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum AccessibilityInfoFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("audioInformation")]
        AudioInformation,
        
        [System.Xml.Serialization.XmlEnumAttribute("audioForHearingImpaired")]
        AudioForHearingImpaired,
        
        [System.Xml.Serialization.XmlEnumAttribute("visualDisplays")]
        VisualDisplays,
        
        [System.Xml.Serialization.XmlEnumAttribute("displaysForVisuallyImpaired")]
        DisplaysForVisuallyImpaired,
        
        [System.Xml.Serialization.XmlEnumAttribute("largePrintTimetables")]
        LargePrintTimetables,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Allowed values for Mobility Facility: TPEG pti_table 23.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Mobility Facility: TPEG pti_table 23.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MobilityFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("MobilityFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum MobilityFacilityEnumeration
    {
        
        /// <summary>
        /// <para>pti255_4</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti255_4")]
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        /// <summary>
        /// <para>pti23_16_1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_16_1")]
        [System.Xml.Serialization.XmlEnumAttribute("lowFloor")]
        LowFloor,
        
        /// <summary>
        /// <para>pti23_16_3</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_16_3")]
        [System.Xml.Serialization.XmlEnumAttribute("stepFreeAccess")]
        StepFreeAccess,
        
        /// <summary>
        /// <para>pti23_16_1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_16_1")]
        [System.Xml.Serialization.XmlEnumAttribute("suitableForWheelchairs")]
        SuitableForWheelchairs,
        
        [System.Xml.Serialization.XmlEnumAttribute("suitableForHeaviliyDisabled")]
        SuitableForHeaviliyDisabled,
        
        /// <summary>
        /// <para>pti23_16_2</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_16_2")]
        [System.Xml.Serialization.XmlEnumAttribute("boardingAssistance")]
        BoardingAssistance,
        
        [System.Xml.Serialization.XmlEnumAttribute("onboardAssistance")]
        OnboardAssistance,
        
        [System.Xml.Serialization.XmlEnumAttribute("unaccompaniedMinorAssistance")]
        UnaccompaniedMinorAssistance,
        
        [System.Xml.Serialization.XmlEnumAttribute("tactilePlatformEdges")]
        TactilePlatformEdges,
        
        [System.Xml.Serialization.XmlEnumAttribute("tactileGuidingStrips")]
        TactileGuidingStrips,
    }
    
    /// <summary>
    /// <para>Allowed values for Passenger information facility.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Passenger information facility.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PassengerInformationFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("PassengerInformationFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum PassengerInformationFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("nextStopIndicator")]
        NextStopIndicator,
        
        [System.Xml.Serialization.XmlEnumAttribute("stopAnnouncements")]
        StopAnnouncements,
        
        [System.Xml.Serialization.XmlEnumAttribute("passengerInformationDisplay")]
        PassengerInformationDisplay,
        
        [System.Xml.Serialization.XmlEnumAttribute("realTimeConnections")]
        RealTimeConnections,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Allowed values for SAFETY Facility.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for SAFETY Facility.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SafetyFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("SafetyFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum SafetyFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("ccTv")]
        CcTv,
        
        [System.Xml.Serialization.XmlEnumAttribute("mobileCoverage")]
        MobileCoverage,
        
        [System.Xml.Serialization.XmlEnumAttribute("sosPoints")]
        SosPoints,
        
        [System.Xml.Serialization.XmlEnumAttribute("staffed")]
        Staffed,
    }
    
    /// <summary>
    /// <para>Allowed values for Site Access Facility. NB. These are the properties of access to a fixed SITE, not to a VEHICLE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Site Access Facility. NB. These are the properties of access t" +
        "o a fixed SITE, not to a VEHICLE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AccessFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("AccessFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum AccessFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("lift")]
        Lift,
        
        [System.Xml.Serialization.XmlEnumAttribute("wheelchairLift")]
        WheelchairLift,
        
        [System.Xml.Serialization.XmlEnumAttribute("escalator")]
        Escalator,
        
        [System.Xml.Serialization.XmlEnumAttribute("travelator")]
        Travelator,
        
        [System.Xml.Serialization.XmlEnumAttribute("ramp")]
        Ramp,
        
        [System.Xml.Serialization.XmlEnumAttribute("automaticRamp")]
        AutomaticRamp,
        
        [System.Xml.Serialization.XmlEnumAttribute("steps")]
        Steps,
        
        [System.Xml.Serialization.XmlEnumAttribute("stairs")]
        Stairs,
        
        [System.Xml.Serialization.XmlEnumAttribute("slidingStep")]
        SlidingStep,
        
        [System.Xml.Serialization.XmlEnumAttribute("shuttle")]
        Shuttle,
        
        [System.Xml.Serialization.XmlEnumAttribute("narrowEntrance")]
        NarrowEntrance,
        
        [System.Xml.Serialization.XmlEnumAttribute("barrier")]
        Barrier,
        
        [System.Xml.Serialization.XmlEnumAttribute("lowFloorAccess")]
        LowFloorAccess,
        
        [System.Xml.Serialization.XmlEnumAttribute("validator")]
        Validator,
    }
    
    /// <summary>
    /// <para>Allowed values for Vehicle Access Facility. NB. These are the  properties of access to a VEHICLE. +1.1</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Vehicle Access Facility. NB. These are the properties of acces" +
        "s to a VEHICLE. +1.1")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("VehicleAccessFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("VehicleAccessFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum VehicleAccessFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("wheelchairLift")]
        WheelchairLift,
        
        [System.Xml.Serialization.XmlEnumAttribute("manualRamp")]
        ManualRamp,
        
        [System.Xml.Serialization.XmlEnumAttribute("automaticRamp")]
        AutomaticRamp,
        
        [System.Xml.Serialization.XmlEnumAttribute("steps")]
        Steps,
        
        [System.Xml.Serialization.XmlEnumAttribute("slidingStep")]
        SlidingStep,
        
        [System.Xml.Serialization.XmlEnumAttribute("narrowEntrance")]
        NarrowEntrance,
        
        [System.Xml.Serialization.XmlEnumAttribute("validator")]
        Validator,
    }
    
    /// <summary>
    /// <para>Allowed values for Accessibility Tools.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Accessibility Tools.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AccessibilityToolEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("AccessibilityTool", Namespace="http://www.netex.org.uk/netex")]
    public enum AccessibilityToolEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("wheelchair")]
        Wheelchair,
        
        [System.Xml.Serialization.XmlEnumAttribute("walkingstick")]
        Walkingstick,
        
        [System.Xml.Serialization.XmlEnumAttribute("audioNavigator")]
        AudioNavigator,
        
        [System.Xml.Serialization.XmlEnumAttribute("visualNavigator")]
        VisualNavigator,
        
        [System.Xml.Serialization.XmlEnumAttribute("passengerCart")]
        PassengerCart,
        
        [System.Xml.Serialization.XmlEnumAttribute("pushchair")]
        Pushchair,
        
        [System.Xml.Serialization.XmlEnumAttribute("umbrella")]
        Umbrella,
        
        [System.Xml.Serialization.XmlEnumAttribute("buggy")]
        Buggy,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Allowed values for Accommodation Access.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Accommodation Access.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AccommodationAccessEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("AccommodationAccess", Namespace="http://www.netex.org.uk/netex")]
    public enum AccommodationAccessEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
        
        [System.Xml.Serialization.XmlEnumAttribute("freeSeating")]
        FreeSeating,
        
        /// <summary>
        /// <para>pti23_3</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_3")]
        [System.Xml.Serialization.XmlEnumAttribute("reservation")]
        Reservation,
        
        [System.Xml.Serialization.XmlEnumAttribute("standing")]
        Standing,
    }
    
    /// <summary>
    /// <para>Allowed values for Assistance Facility.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Assistance Facility.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AssistanceFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("AssistanceFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum AssistanceFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("personalAssistance")]
        PersonalAssistance,
        
        [System.Xml.Serialization.XmlEnumAttribute("boardingAssistance")]
        BoardingAssistance,
        
        [System.Xml.Serialization.XmlEnumAttribute("wheechairAssistance")]
        WheechairAssistance,
        
        [System.Xml.Serialization.XmlEnumAttribute("unaccompaniedMinorAssistance")]
        UnaccompaniedMinorAssistance,
        
        [System.Xml.Serialization.XmlEnumAttribute("wheelchairUse")]
        WheelchairUse,
        
        [System.Xml.Serialization.XmlEnumAttribute("conductor")]
        Conductor,
        
        [System.Xml.Serialization.XmlEnumAttribute("information")]
        Information,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
        
        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
        
        [System.Xml.Serialization.XmlEnumAttribute("any")]
        Any,
    }
    
    /// <summary>
    /// <para>Allowed values for  Assistance Availability.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Assistance Availability.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AssistanceAvailabilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum AssistanceAvailabilityEnumeration
    {
        
        /// <summary>
        /// <para>Assistance is not  available.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Assistance is not available.")]
        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
        
        /// <summary>
        /// <para>Assistance is nornally available.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Assistance is nornally available.")]
        [System.Xml.Serialization.XmlEnumAttribute("available")]
        Available,
        
        /// <summary>
        /// <para>Assistance is  available if booked.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Assistance is available if booked.")]
        [System.Xml.Serialization.XmlEnumAttribute("availableIfBooked")]
        AvailableIfBooked,
        
        /// <summary>
        /// <para>Assistance is   available at certain times.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Assistance is available at certain times.")]
        [System.Xml.Serialization.XmlEnumAttribute("availableAtCertainTimes")]
        AvailableAtCertainTimes,
        
        /// <summary>
        /// <para>Not known if assistance is available.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not known if assistance is available.")]
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
    }
    
    /// <summary>
    /// <para>Allowed values for Emergency Service Facility.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Emergency Service Facility.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("EmergencyServiceEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("EmergencyService", Namespace="http://www.netex.org.uk/netex")]
    public enum EmergencyServiceEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("police")]
        Police,
        
        [System.Xml.Serialization.XmlEnumAttribute("fire")]
        Fire,
        
        [System.Xml.Serialization.XmlEnumAttribute("firstAid")]
        FirstAid,
        
        [System.Xml.Serialization.XmlEnumAttribute("sosPoint")]
        SosPoint,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Allowed values for Family Accommodation.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Family Accommodation.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("FamilyFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("FamilyFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum FamilyFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
        
        [System.Xml.Serialization.XmlEnumAttribute("servicesForChildren")]
        ServicesForChildren,
        
        [System.Xml.Serialization.XmlEnumAttribute("servicesForArmyFamilies")]
        ServicesForArmyFamilies,
        
        [System.Xml.Serialization.XmlEnumAttribute("nurseryService")]
        NurseryService,
    }
    
    /// <summary>
    /// <para>Allowed values for Gender.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Gender.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("GenderEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum GenderEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("female")]
        Female,
        
        [System.Xml.Serialization.XmlEnumAttribute("male")]
        Male,
    }
    
    /// <summary>
    /// <para>Allowed values for Hire Facility.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Hire Facility.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HireFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("HireFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum HireFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("carHire")]
        CarHire,
        
        [System.Xml.Serialization.XmlEnumAttribute("motorCycleHire")]
        MotorCycleHire,
        
        [System.Xml.Serialization.XmlEnumAttribute("cycleHire")]
        CycleHire,
        
        [System.Xml.Serialization.XmlEnumAttribute("taxi")]
        Taxi,
        
        [System.Xml.Serialization.XmlEnumAttribute("recreationDeviceHire")]
        RecreationDeviceHire,
    }
    
    /// <summary>
    /// <para>Allowed values for Luggage Carriage Facility.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Luggage Carriage Facility.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LuggageCarriageEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("LuggageCarriageFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum LuggageCarriageEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("noBaggageStorage")]
        NoBaggageStorage,
        
        [System.Xml.Serialization.XmlEnumAttribute("baggageStorage")]
        BaggageStorage,
        
        [System.Xml.Serialization.XmlEnumAttribute("luggageRacks")]
        LuggageRacks,
        
        [System.Xml.Serialization.XmlEnumAttribute("extraLargeLuggageRacks")]
        ExtraLargeLuggageRacks,
        
        [System.Xml.Serialization.XmlEnumAttribute("baggageVan")]
        BaggageVan,
        
        [System.Xml.Serialization.XmlEnumAttribute("noCycles")]
        NoCycles,
        
        [System.Xml.Serialization.XmlEnumAttribute("cyclesAllowed")]
        CyclesAllowed,
        
        [System.Xml.Serialization.XmlEnumAttribute("cyclesAllowedInVan")]
        CyclesAllowedInVan,
        
        [System.Xml.Serialization.XmlEnumAttribute("cyclesAllowedInCarriage")]
        CyclesAllowedInCarriage,
        
        [System.Xml.Serialization.XmlEnumAttribute("cyclesAllowedWithReservation")]
        CyclesAllowedWithReservation,
        
        [System.Xml.Serialization.XmlEnumAttribute("vehicleTransport")]
        VehicleTransport,
    }
    
    /// <summary>
    /// <para>Allowed values for Luggage Locker Facility.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Luggage Locker Facility.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LuggageLockerFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("LuggageLockerFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum LuggageLockerFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
        
        /// <summary>
        /// <para>pti23_17</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_17")]
        [System.Xml.Serialization.XmlEnumAttribute("lockers")]
        Lockers,
        
        [System.Xml.Serialization.XmlEnumAttribute("oversizeLockers")]
        OversizeLockers,
        
        [System.Xml.Serialization.XmlEnumAttribute("leftLuggageCounter")]
        LeftLuggageCounter,
        
        [System.Xml.Serialization.XmlEnumAttribute("bikeRack")]
        BikeRack,
        
        [System.Xml.Serialization.XmlEnumAttribute("cloakroom")]
        Cloakroom,
    }
    
    /// <summary>
    /// <para>Allowed values for Luggage Service Facility.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Luggage Service Facility.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("LuggageServiceFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("LuggageServiceFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum LuggageServiceFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
        
        [System.Xml.Serialization.XmlEnumAttribute("leftLuggage")]
        LeftLuggage,
        
        [System.Xml.Serialization.XmlEnumAttribute("porterage")]
        Porterage,
        
        [System.Xml.Serialization.XmlEnumAttribute("freeTrolleys")]
        FreeTrolleys,
        
        [System.Xml.Serialization.XmlEnumAttribute("paidTrolleys")]
        PaidTrolleys,
        
        [System.Xml.Serialization.XmlEnumAttribute("collectAndDeliverToStation")]
        CollectAndDeliverToStation,
        
        [System.Xml.Serialization.XmlEnumAttribute("baggageCheckInCheckOut")]
        BaggageCheckInCheckOut,
    }
    
    /// <summary>
    /// <para>Allowed values for MEETING POINT Facility.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for MEETING POINT Facility.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MeetingPointEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum MeetingPointEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("meetingPoint")]
        MeetingPoint,
        
        [System.Xml.Serialization.XmlEnumAttribute("groupMeeting")]
        GroupMeeting,
        
        [System.Xml.Serialization.XmlEnumAttribute("schoolMeetingPoint")]
        SchoolMeetingPoint,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Allowed values for Money Facility.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Money Facility.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MoneyFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("MoneyFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum MoneyFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
        
        [System.Xml.Serialization.XmlEnumAttribute("cashMachine")]
        CashMachine,
        
        [System.Xml.Serialization.XmlEnumAttribute("bank")]
        Bank,
        
        [System.Xml.Serialization.XmlEnumAttribute("insurance")]
        Insurance,
        
        [System.Xml.Serialization.XmlEnumAttribute("bureauDeChange")]
        BureauDeChange,
    }
    
    /// <summary>
    /// <para>Allowed values for Meal Facility.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Meal Facility.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MealFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("MealFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum MealFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("breakfast")]
        Breakfast,
        
        [System.Xml.Serialization.XmlEnumAttribute("lunch")]
        Lunch,
        
        [System.Xml.Serialization.XmlEnumAttribute("dinner")]
        Dinner,
        
        [System.Xml.Serialization.XmlEnumAttribute("snack")]
        Snack,
        
        [System.Xml.Serialization.XmlEnumAttribute("drinks")]
        Drinks,
    }
    
    /// <summary>
    /// <para>Allowed values for Nuisance Facility: TPEG pti_table 23.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Nuisance Facility: TPEG pti_table 23.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NuisanceFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum NuisanceFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("smoking")]
        Smoking,
        
        [System.Xml.Serialization.XmlEnumAttribute("noSmoking")]
        NoSmoking,
        
        [System.Xml.Serialization.XmlEnumAttribute("familyArea")]
        FamilyArea,
        
        [System.Xml.Serialization.XmlEnumAttribute("childfreeArea")]
        ChildfreeArea,
        
        [System.Xml.Serialization.XmlEnumAttribute("noAnimals")]
        NoAnimals,
        
        [System.Xml.Serialization.XmlEnumAttribute("breastfeedingFriendly")]
        BreastfeedingFriendly,
        
        [System.Xml.Serialization.XmlEnumAttribute("mobilePhoneUseZone")]
        MobilePhoneUseZone,
        
        [System.Xml.Serialization.XmlEnumAttribute("mobilePhoneFreeZone")]
        MobilePhoneFreeZone,
    }
    
    /// <summary>
    /// <para>Allowed values for Parking Facility.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Parking Facility.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParkingFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("ParkingFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum ParkingFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("carPark")]
        CarPark,
        
        [System.Xml.Serialization.XmlEnumAttribute("parkAndRidePark")]
        ParkAndRidePark,
        
        [System.Xml.Serialization.XmlEnumAttribute("motorcyclePark")]
        MotorcyclePark,
        
        [System.Xml.Serialization.XmlEnumAttribute("cyclePark")]
        CyclePark,
        
        [System.Xml.Serialization.XmlEnumAttribute("rentalCarPark")]
        RentalCarPark,
        
        [System.Xml.Serialization.XmlEnumAttribute("coachPark")]
        CoachPark,
    }
    
    /// <summary>
    /// <para>Allowed values for Car Service Facility.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Car Service Facility.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CarServiceFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("CarServiceFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum CarServiceFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("carWash")]
        CarWash,
        
        [System.Xml.Serialization.XmlEnumAttribute("valetPark")]
        ValetPark,
        
        [System.Xml.Serialization.XmlEnumAttribute("carValetClean")]
        CarValetClean,
        
        [System.Xml.Serialization.XmlEnumAttribute("oilChange")]
        OilChange,
        
        [System.Xml.Serialization.XmlEnumAttribute("engineWarming")]
        EngineWarming,
        
        [System.Xml.Serialization.XmlEnumAttribute("petrol")]
        Petrol,
    }
    
    /// <summary>
    /// <para>Allowed values for Medical  Service Facility.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Medical Service Facility.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MedicalFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("MedicalFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum MedicalFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("defibrillator")]
        Defibrillator,
        
        [System.Xml.Serialization.XmlEnumAttribute("alcoholTest")]
        AlcoholTest,
    }
    
    /// <summary>
    /// <para>Allowed values for PASSENGER COMMUNICATIONS FACILITY.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for PASSENGER COMMUNICATIONS FACILITY.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PassengerCommsFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("PassengerCommsFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum PassengerCommsFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("freeWifi")]
        FreeWifi,
        
        [System.Xml.Serialization.XmlEnumAttribute("publicWifi")]
        PublicWifi,
        
        [System.Xml.Serialization.XmlEnumAttribute("powerSupplySockets")]
        PowerSupplySockets,
        
        /// <summary>
        /// <para>pti23_21</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_21")]
        [System.Xml.Serialization.XmlEnumAttribute("telephone")]
        Telephone,
        
        /// <summary>
        /// <para>pti23_14</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_14")]
        [System.Xml.Serialization.XmlEnumAttribute("audioEntertainment")]
        AudioEntertainment,
        
        /// <summary>
        /// <para>pti23_15</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_15")]
        [System.Xml.Serialization.XmlEnumAttribute("videoEntertainment")]
        VideoEntertainment,
        
        /// <summary>
        /// <para>pti23_25</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_25")]
        [System.Xml.Serialization.XmlEnumAttribute("businessServices")]
        BusinessServices,
        
        [System.Xml.Serialization.XmlEnumAttribute("internet")]
        Internet,
        
        [System.Xml.Serialization.XmlEnumAttribute("postOffice")]
        PostOffice,
        
        [System.Xml.Serialization.XmlEnumAttribute("postBox")]
        PostBox,
    }
    
    /// <summary>
    /// <para>Allowed values for Catering Facility: TPEG pti_table 23.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Catering Facility: TPEG pti_table 23.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CateringFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("CateringFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum CateringFacilityEnumeration
    {
        
        /// <summary>
        /// <para>pti23_18</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_18")]
        [System.Xml.Serialization.XmlEnumAttribute("bar")]
        Bar,
        
        /// <summary>
        /// <para>pti23_26</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_26")]
        [System.Xml.Serialization.XmlEnumAttribute("bistro")]
        Bistro,
        
        [System.Xml.Serialization.XmlEnumAttribute("buffet")]
        Buffet,
        
        /// <summary>
        /// <para>pti23_19</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_19")]
        [System.Xml.Serialization.XmlEnumAttribute("noFoodAvailable")]
        NoFoodAvailable,
        
        /// <summary>
        /// <para>pti23_20</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_20")]
        [System.Xml.Serialization.XmlEnumAttribute("noBeveragesAvailable")]
        NoBeveragesAvailable,
        
        /// <summary>
        /// <para>pti23_1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_1")]
        [System.Xml.Serialization.XmlEnumAttribute("restaurant")]
        Restaurant,
        
        [System.Xml.Serialization.XmlEnumAttribute("firstClassRestaurant")]
        FirstClassRestaurant,
        
        /// <summary>
        /// <para>pti23_23</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_23")]
        [System.Xml.Serialization.XmlEnumAttribute("trolley")]
        Trolley,
        
        [System.Xml.Serialization.XmlEnumAttribute("coffeeShop")]
        CoffeeShop,
        
        [System.Xml.Serialization.XmlEnumAttribute("hotFoodService")]
        HotFoodService,
        
        [System.Xml.Serialization.XmlEnumAttribute("selfService")]
        SelfService,
        
        /// <summary>
        /// <para>pti23_2</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_2")]
        [System.Xml.Serialization.XmlEnumAttribute("snacks")]
        Snacks,
        
        [System.Xml.Serialization.XmlEnumAttribute("foodVendingMachine")]
        FoodVendingMachine,
        
        [System.Xml.Serialization.XmlEnumAttribute("beverageVendingMachine")]
        BeverageVendingMachine,
        
        /// <summary>
        /// <para>pti23_18_1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pti23_18_1")]
        [System.Xml.Serialization.XmlEnumAttribute("miniBar")]
        MiniBar,
        
        [System.Xml.Serialization.XmlEnumAttribute("breakfastInCar")]
        BreakfastInCar,
        
        [System.Xml.Serialization.XmlEnumAttribute("mealAtSeat")]
        MealAtSeat,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
    }
    
    /// <summary>
    /// <para>Allowed values for Reserved Space Facility.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Reserved Space Facility.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ReservedSpaceFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("ReservedSpaceFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum ReservedSpaceFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("lounge")]
        Lounge,
        
        [System.Xml.Serialization.XmlEnumAttribute("hall")]
        Hall,
        
        [System.Xml.Serialization.XmlEnumAttribute("meetingPoint")]
        MeetingPoint,
        
        [System.Xml.Serialization.XmlEnumAttribute("groupPoint")]
        GroupPoint,
        
        [System.Xml.Serialization.XmlEnumAttribute("reception")]
        Reception,
        
        [System.Xml.Serialization.XmlEnumAttribute("shelter")]
        Shelter,
        
        [System.Xml.Serialization.XmlEnumAttribute("seats")]
        Seats,
    }
    
    /// <summary>
    /// <para>Allowed values for Retail Facility.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Retail Facility.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("RetailFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("RetailFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum RetailFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("food")]
        Food,
        
        [System.Xml.Serialization.XmlEnumAttribute("newspaperTobacco")]
        NewspaperTobacco,
        
        [System.Xml.Serialization.XmlEnumAttribute("recreationTravel")]
        RecreationTravel,
        
        [System.Xml.Serialization.XmlEnumAttribute("hygieneHealthBeauty")]
        HygieneHealthBeauty,
        
        [System.Xml.Serialization.XmlEnumAttribute("fashionAccessories")]
        FashionAccessories,
        
        [System.Xml.Serialization.XmlEnumAttribute("bankFinanceInsurance")]
        BankFinanceInsurance,
        
        [System.Xml.Serialization.XmlEnumAttribute("cashMachine")]
        CashMachine,
        
        [System.Xml.Serialization.XmlEnumAttribute("currencyExchange")]
        CurrencyExchange,
        
        [System.Xml.Serialization.XmlEnumAttribute("tourismService")]
        TourismService,
        
        [System.Xml.Serialization.XmlEnumAttribute("photoBooth")]
        PhotoBooth,
    }
    
    /// <summary>
    /// <para>Allowed values for Ticketing Facility.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Ticketing Facility.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TicketingFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("ScopeOfTicket", Namespace="http://www.netex.org.uk/netex")]
    public enum TicketingFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("ticketMachines")]
        TicketMachines,
        
        [System.Xml.Serialization.XmlEnumAttribute("ticketOffice")]
        TicketOffice,
        
        [System.Xml.Serialization.XmlEnumAttribute("ticketOnDemandMachines")]
        TicketOnDemandMachines,
        
        [System.Xml.Serialization.XmlEnumAttribute("mobileTicketing")]
        MobileTicketing,
    }
    
    /// <summary>
    /// <para>Allowed values for Scope of Ticket.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Scope of Ticket.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ScopeOfTicketEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum ScopeOfTicketEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("localTicket")]
        LocalTicket,
        
        [System.Xml.Serialization.XmlEnumAttribute("nationalTicket")]
        NationalTicket,
        
        [System.Xml.Serialization.XmlEnumAttribute("internationalTicket")]
        InternationalTicket,
    }
    
    /// <summary>
    /// <para>Allowed values for Vehicle Loading Facility.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Vehicle Loading Facility.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("VehicleLoadingEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum VehicleLoadingEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
        
        [System.Xml.Serialization.XmlEnumAttribute("loading")]
        Loading,
        
        [System.Xml.Serialization.XmlEnumAttribute("unloading")]
        Unloading,
        
        [System.Xml.Serialization.XmlEnumAttribute("additionalLoading")]
        AdditionalLoading,
        
        [System.Xml.Serialization.XmlEnumAttribute("additionaUnloading")]
        AdditionaUnloading,
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
    }
    
    /// <summary>
    /// <para>Allowed values for Reservation. UIC 7037 Code list.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Reservation. UIC 7037 Code list.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ReservationEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("ServiceReservationFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum ReservationEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("reservationsCompulsory")]
        ReservationsCompulsory,
        
        [System.Xml.Serialization.XmlEnumAttribute("reservationsCompulsoryForGroups")]
        ReservationsCompulsoryForGroups,
        
        [System.Xml.Serialization.XmlEnumAttribute("reservationsCompulsoryForFirstClass")]
        ReservationsCompulsoryForFirstClass,
        
        [System.Xml.Serialization.XmlEnumAttribute("reservationsCompulsoryFromOriginStation")]
        ReservationsCompulsoryFromOriginStation,
        
        [System.Xml.Serialization.XmlEnumAttribute("reservationsRecommended")]
        ReservationsRecommended,
        
        [System.Xml.Serialization.XmlEnumAttribute("reservationsPossible")]
        ReservationsPossible,
        
        [System.Xml.Serialization.XmlEnumAttribute("reservationsPossibleOnlyInFirstClass")]
        ReservationsPossibleOnlyInFirstClass,
        
        [System.Xml.Serialization.XmlEnumAttribute("reservationsPossibleOnlyInSecondClass")]
        ReservationsPossibleOnlyInSecondClass,
        
        [System.Xml.Serialization.XmlEnumAttribute("reservationsPossibleForCertainClasses")]
        ReservationsPossibleForCertainClasses,
        
        [System.Xml.Serialization.XmlEnumAttribute("groupBookingRestricted")]
        GroupBookingRestricted,
        
        [System.Xml.Serialization.XmlEnumAttribute("noGroupsAllowed")]
        NoGroupsAllowed,
        
        [System.Xml.Serialization.XmlEnumAttribute("noReservationsPossible")]
        NoReservationsPossible,
        
        [System.Xml.Serialization.XmlEnumAttribute("wheelchairOnlyReservations")]
        WheelchairOnlyReservations,
        
        [System.Xml.Serialization.XmlEnumAttribute("bicycleReservationsCompulsory")]
        BicycleReservationsCompulsory,
        
        [System.Xml.Serialization.XmlEnumAttribute("reservationsSupplementCharged")]
        ReservationsSupplementCharged,
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
    }
    
    /// <summary>
    /// <para>Allowed values for Catering rights.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Catering rights.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CateringRightsEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum CateringRightsEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("mealIncluded")]
        MealIncluded,
        
        [System.Xml.Serialization.XmlEnumAttribute("mealIncludedForFirstClassPassengers")]
        MealIncludedForFirstClassPassengers,
        
        [System.Xml.Serialization.XmlEnumAttribute("noMealIncluded")]
        NoMealIncluded,
    }
    
    /// <summary>
    /// <para>Allowed values for CATERING SERVICEs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for CATERING SERVICEs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CateringServiceEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum CateringServiceEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("bar")]
        Bar,
        
        [System.Xml.Serialization.XmlEnumAttribute("beverageVendingMachine")]
        BeverageVendingMachine,
        
        [System.Xml.Serialization.XmlEnumAttribute("buffet")]
        Buffet,
        
        [System.Xml.Serialization.XmlEnumAttribute("coffeeShop")]
        CoffeeShop,
        
        [System.Xml.Serialization.XmlEnumAttribute("firstClassRestaurant")]
        FirstClassRestaurant,
        
        [System.Xml.Serialization.XmlEnumAttribute("foodVendingMachine")]
        FoodVendingMachine,
        
        [System.Xml.Serialization.XmlEnumAttribute("hotFoodService")]
        HotFoodService,
        
        [System.Xml.Serialization.XmlEnumAttribute("restaurant")]
        Restaurant,
        
        [System.Xml.Serialization.XmlEnumAttribute("snacks")]
        Snacks,
        
        [System.Xml.Serialization.XmlEnumAttribute("trolleyService")]
        TrolleyService,
        
        [System.Xml.Serialization.XmlEnumAttribute("noBeveragesAvailable")]
        NoBeveragesAvailable,
        
        [System.Xml.Serialization.XmlEnumAttribute("noFoodServiceAvailable")]
        NoFoodServiceAvailable,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Allowed values for Cycles on Service.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Cycles on Service.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CyclesOnServiceEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum CyclesOnServiceEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("notAllowed")]
        NotAllowed,
        
        [System.Xml.Serialization.XmlEnumAttribute("onlyFoldingAllowed")]
        OnlyFoldingAllowed,
        
        [System.Xml.Serialization.XmlEnumAttribute("allowedSubjectToRestrictions")]
        AllowedSubjectToRestrictions,
        
        [System.Xml.Serialization.XmlEnumAttribute("mustBook")]
        MustBook,
        
        [System.Xml.Serialization.XmlEnumAttribute("allowedAtAllTimes")]
        AllowedAtAllTimes,
    }
    
    /// <summary>
    /// <para>Allowed values for Communication Service.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Communication Service.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CommunicationServiceEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum CommunicationServiceEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("freeWifi")]
        FreeWifi,
        
        [System.Xml.Serialization.XmlEnumAttribute("publicWifi")]
        PublicWifi,
        
        [System.Xml.Serialization.XmlEnumAttribute("phone")]
        Phone,
        
        [System.Xml.Serialization.XmlEnumAttribute("internet")]
        Internet,
        
        [System.Xml.Serialization.XmlEnumAttribute("mobileCoverage")]
        MobileCoverage,
        
        [System.Xml.Serialization.XmlEnumAttribute("videoEntertainment")]
        VideoEntertainment,
        
        [System.Xml.Serialization.XmlEnumAttribute("audioEntertainment")]
        AudioEntertainment,
        
        [System.Xml.Serialization.XmlEnumAttribute("postbox")]
        Postbox,
        
        [System.Xml.Serialization.XmlEnumAttribute("postOffice")]
        PostOffice,
        
        [System.Xml.Serialization.XmlEnumAttribute("businessServices")]
        BusinessServices,
    }
    
    /// <summary>
    /// <para>Allowed values for Payment method.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Payment method.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PaymentMethodEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum PaymentMethodEnumeration
    {
        
        /// <summary>
        /// <para>Payment in coins or notes accepted.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Payment in coins or notes accepted.")]
        [System.Xml.Serialization.XmlEnumAttribute("cash")]
        Cash,
        
        /// <summary>
        /// <para>Payment in coins or notes accepted, must be exact amount.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Payment in coins or notes accepted, must be exact amount.")]
        [System.Xml.Serialization.XmlEnumAttribute("cashExactChangeOnly")]
        CashExactChangeOnly,
        
        /// <summary>
        /// <para>Payment with either cash or debit / credit card   accepted.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Payment with either cash or debit / credit card accepted.")]
        [System.Xml.Serialization.XmlEnumAttribute("cashAndCard")]
        CashAndCard,
        
        /// <summary>
        /// <para>Payment in specie (coins) only.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Payment in specie (coins) only.")]
        [System.Xml.Serialization.XmlEnumAttribute("coin")]
        Coin,
        
        /// <summary>
        /// <para>Payment in cash with banknotes (but no coins).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Payment in cash with banknotes (but no coins).")]
        [System.Xml.Serialization.XmlEnumAttribute("banknote")]
        Banknote,
        
        /// <summary>
        /// <para>Payment with personal Bankers' cheque.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Payment with personal Bankers\' cheque.")]
        [System.Xml.Serialization.XmlEnumAttribute("cheque")]
        Cheque,
        
        /// <summary>
        /// <para>Payment with Traveller's cheque.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Payment with Traveller\'s cheque.")]
        [System.Xml.Serialization.XmlEnumAttribute("travellersCheque")]
        TravellersCheque,
        
        /// <summary>
        /// <para>Payment by Postal order.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Payment by Postal order.")]
        [System.Xml.Serialization.XmlEnumAttribute("postalOrder")]
        PostalOrder,
        
        /// <summary>
        /// <para>Payment with Company cheque.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Payment with Company cheque.")]
        [System.Xml.Serialization.XmlEnumAttribute("companyCheque")]
        CompanyCheque,
        
        /// <summary>
        /// <para>Payment by credit card  (E.g. Visa, MasterCard, etc).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Payment by credit card (E.g. Visa, MasterCard, etc).")]
        [System.Xml.Serialization.XmlEnumAttribute("creditCard")]
        CreditCard,
        
        /// <summary>
        /// <para>Payment by Bank debit  card.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Payment by Bank debit card.")]
        [System.Xml.Serialization.XmlEnumAttribute("debitCard")]
        DebitCard,
        
        /// <summary>
        /// <para>Paymentonly with debit or credit card (no cash).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Paymentonly with debit or credit card (no cash).")]
        [System.Xml.Serialization.XmlEnumAttribute("cardsOnly")]
        CardsOnly,
        
        /// <summary>
        /// <para>Payment with stored value travel card or smartcard.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Payment with stored value travel card or smartcard.")]
        [System.Xml.Serialization.XmlEnumAttribute("travelCard")]
        TravelCard,
        
        /// <summary>
        /// <para>NFC Payment by contactless credit or debit card</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("NFC Payment by contactless credit or debit card")]
        [System.Xml.Serialization.XmlEnumAttribute("contactlessPaymentCard")]
        ContactlessPaymentCard,
        
        /// <summary>
        /// <para>NFC Payment with stored value travel card or smartcard .</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("NFC Payment with stored value travel card or smartcard .")]
        [System.Xml.Serialization.XmlEnumAttribute("contactlessTravelCard")]
        ContactlessTravelCard,
        
        /// <summary>
        /// <para>Electronic payment by direct debit at retailers request from customer's bank account .</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Electronic payment by direct debit at retailers request from customer\'s bank acco" +
            "unt .")]
        [System.Xml.Serialization.XmlEnumAttribute("directDebit")]
        DirectDebit,
        
        /// <summary>
        /// <para>Electronic payment from customer account to retailers account.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Electronic payment from customer account to retailers account.")]
        [System.Xml.Serialization.XmlEnumAttribute("bankTransfer")]
        BankTransfer,
        
        /// <summary>
        /// <para>Electronic payment with on device  application (e.g. ApplePay, GooglePay etc).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Electronic payment with on device application (e.g. ApplePay, GooglePay etc).")]
        [System.Xml.Serialization.XmlEnumAttribute("epayDevice")]
        EpayDevice,
        
        /// <summary>
        /// <para>Electronic payment direct from account (e.g. PayPal etc).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Electronic payment direct from account (e.g. PayPal etc).")]
        [System.Xml.Serialization.XmlEnumAttribute("epayAccount")]
        EpayAccount,
        
        /// <summary>
        /// <para>Payment by SMS charge to mobile account.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Payment by SMS charge to mobile account.")]
        [System.Xml.Serialization.XmlEnumAttribute("sms")]
        Sms,
        
        /// <summary>
        /// <para>Payment with mobile device  / mobile app.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Payment with mobile device / mobile app.")]
        [System.Xml.Serialization.XmlEnumAttribute("mobilePhone")]
        MobilePhone,
        
        /// <summary>
        /// <para>Payment with coupons or vouchers.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Payment with coupons or vouchers.")]
        [System.Xml.Serialization.XmlEnumAttribute("voucher")]
        Voucher,
        
        /// <summary>
        /// <para>Payment with physical tokens.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Payment with physical tokens.")]
        [System.Xml.Serialization.XmlEnumAttribute("token")]
        Token,
        
        /// <summary>
        /// <para>Payment with warrant issued by an organisation (e.g. Army, government).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Payment with warrant issued by an organisation (e.g. Army, government).")]
        [System.Xml.Serialization.XmlEnumAttribute("warrant")]
        Warrant,
        
        /// <summary>
        /// <para>Payment in mileage points.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Payment in mileage points.")]
        [System.Xml.Serialization.XmlEnumAttribute("mileagePoints")]
        MileagePoints,
        
        /// <summary>
        /// <para>Other means of payment .</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Other means of payment .")]
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Allowed value for Ticket Types.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed value for Ticket Types.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TicketTypeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum TicketTypeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("standard")]
        Standard,
        
        [System.Xml.Serialization.XmlEnumAttribute("promotion")]
        Promotion,
        
        [System.Xml.Serialization.XmlEnumAttribute("concession")]
        Concession,
        
        [System.Xml.Serialization.XmlEnumAttribute("group")]
        Group,
        
        [System.Xml.Serialization.XmlEnumAttribute("season")]
        Season,
        
        [System.Xml.Serialization.XmlEnumAttribute("carnet")]
        Carnet,
        
        [System.Xml.Serialization.XmlEnumAttribute("travelCard")]
        TravelCard,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
        
        [System.Xml.Serialization.XmlEnumAttribute("all")]
        All,
    }
    
    /// <summary>
    /// <para>Allowed value for Ticketing Service.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed value for Ticketing Service.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TicketingServiceFacilityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("TicketingServiceFacility", Namespace="http://www.netex.org.uk/netex")]
    public enum TicketingServiceFacilityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("purchase")]
        Purchase,
        
        [System.Xml.Serialization.XmlEnumAttribute("collection")]
        Collection,
        
        [System.Xml.Serialization.XmlEnumAttribute("cardTopUp")]
        CardTopUp,
        
        [System.Xml.Serialization.XmlEnumAttribute("reservations")]
        Reservations,
        
        [System.Xml.Serialization.XmlEnumAttribute("exchange")]
        Exchange,
        
        [System.Xml.Serialization.XmlEnumAttribute("refund")]
        Refund,
        
        [System.Xml.Serialization.XmlEnumAttribute("renewal")]
        Renewal,
        
        [System.Xml.Serialization.XmlEnumAttribute("excessFares")]
        ExcessFares,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
        
        [System.Xml.Serialization.XmlEnumAttribute("all")]
        All,
    }
    
    /// <summary>
    /// <para>UIC Product Characteristic UIC 7139 Code list.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("UIC Product Characteristic UIC 7139 Code list.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("UicProductCharacteristicEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("UicProductCharacteristic", Namespace="http://www.netex.org.uk/netex")]
    public enum UicProductCharacteristicEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("tariffCommunVoyageurs")]
        TariffCommunVoyageurs,
        
        [System.Xml.Serialization.XmlEnumAttribute("allIInclusivePrice")]
        AllIInclusivePrice,
        
        [System.Xml.Serialization.XmlEnumAttribute("eastWestTariff")]
        EastWestTariff,
        
        [System.Xml.Serialization.XmlEnumAttribute("trainWithTcvAndMarketPrice")]
        TrainWithTcvAndMarketPrice,
        
        [System.Xml.Serialization.XmlEnumAttribute("noPublishedTariff")]
        NoPublishedTariff,
    }
    
    /// <summary>
    /// <para>Allowed values for ORGANISATION TYPE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for ORGANISATION TYPE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OrganisationTypeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum OrganisationTypeEnumeration
    {
        
        /// <summary>
        /// <para>ORGANISATION is a Transport Authority or Agency.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("ORGANISATION is a Transport Authority or Agency.")]
        [System.Xml.Serialization.XmlEnumAttribute("authority")]
        Authority,
        
        /// <summary>
        /// <para>ORGANISATION is a Public Transport OPERATOR.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("ORGANISATION is a Public Transport OPERATOR.")]
        [System.Xml.Serialization.XmlEnumAttribute("operator")]
        Operator,
        
        /// <summary>
        /// <para>ORGANISATION is a Rail OPERATOR.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("ORGANISATION is a Rail OPERATOR.")]
        [System.Xml.Serialization.XmlEnumAttribute("railOperator")]
        RailOperator,
        
        /// <summary>
        /// <para>ORGANISATION is a rail freight OPERATOR.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("ORGANISATION is a rail freight OPERATOR.")]
        [System.Xml.Serialization.XmlEnumAttribute("railFreightOperator")]
        RailFreightOperator,
        
        /// <summary>
        /// <para>ORGANISATION is a statutory body or government department.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("ORGANISATION is a statutory body or government department.")]
        [System.Xml.Serialization.XmlEnumAttribute("statutoryBody")]
        StatutoryBody,
        
        /// <summary>
        /// <para>ORGANISATION operates a facility such as a station.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("ORGANISATION operates a facility such as a station.")]
        [System.Xml.Serialization.XmlEnumAttribute("facilityOperator")]
        FacilityOperator,
        
        /// <summary>
        /// <para>ORGANISATION is a Travel Agent.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("ORGANISATION is a Travel Agent.")]
        [System.Xml.Serialization.XmlEnumAttribute("travelAgent")]
        TravelAgent,
        
        /// <summary>
        /// <para>ORGANISATION is a business or organisation served by public transport.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("ORGANISATION is a business or organisation served by public transport.")]
        [System.Xml.Serialization.XmlEnumAttribute("servicedOrganisation")]
        ServicedOrganisation,
        
        /// <summary>
        /// <para>ORGANISATION is a trade association representing independent retailers.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("ORGANISATION is a trade association representing independent retailers.")]
        [System.Xml.Serialization.XmlEnumAttribute("retailConsortium")]
        RetailConsortium,
        
        /// <summary>
        /// <para>Other type of ORGANISATION.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Other type of ORGANISATION.")]
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Allowed values for Stakeholder Roles.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Stakeholder Roles.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("StakeholderRoleTypeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum StakeholderRoleTypeEnumeration
    {
        
        Planning,
        
        Operation,
        
        Control,
        
        Reservation,
        
        EntityLegalOwnership,
        
        FareManagement,
        
        SecurityManagement,
        
        DataRegistrar,
        
        Other,
    }
    
    /// <summary>
    /// <para>Allowed values for Administrative Roles.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Administrative Roles.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DataRoleTypeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum DataRoleTypeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("all")]
        All,
        
        [System.Xml.Serialization.XmlEnumAttribute("creates")]
        Creates,
        
        [System.Xml.Serialization.XmlEnumAttribute("augments")]
        Augments,
        
        [System.Xml.Serialization.XmlEnumAttribute("validates")]
        Validates,
        
        [System.Xml.Serialization.XmlEnumAttribute("collects")]
        Collects,
        
        [System.Xml.Serialization.XmlEnumAttribute("aggregates")]
        Aggregates,
        
        [System.Xml.Serialization.XmlEnumAttribute("distributes")]
        Distributes,
        
        [System.Xml.Serialization.XmlEnumAttribute("secures")]
        Secures,
        
        [System.Xml.Serialization.XmlEnumAttribute("redistributes")]
        Redistributes,
        
        [System.Xml.Serialization.XmlEnumAttribute("owns")]
        Owns,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Detail Levels for Network Request.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Detail Levels for Network Request.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OutputDetailEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum OutputDetailEnumeration
    {
        
        All,
        
        Basic,
        
        NoGeometry,
        
        Xref,
        
        AllWithXref,
    }
    
    /// <summary>
    /// <para>Allowed values for Day of the Week.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Day of the Week.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DayOfWeekEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum DayOfWeekEnumeration
    {
        
        Monday,
        
        Tuesday,
        
        Wednesday,
        
        Thursday,
        
        Friday,
        
        Saturday,
        
        Sunday,
        
        Everyday,
        
        Weekdays,
        
        Weekend,
        
        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }
    
    /// <summary>
    /// <para>Allowed values for Weeks of the Month.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Weeks of the Month.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("WeeksOfMonthEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum WeeksOfMonthEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
        
        EveryWeek,
    }
    
    /// <summary>
    /// <para>Allowed values for Week of the Month.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Week of the Month.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("WeekOfMonthEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum WeekOfMonthEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
        
        EveryWeek,
    }
    
    /// <summary>
    /// <para>Allowed values for Holiday types.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Holiday types.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("HolidayTypeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum HolidayTypeEnumeration
    {
        
        AnyDay,
        
        WorkingDay,
        
        SchoolDay,
        
        NotHoliday,
        
        NotWorkingDay,
        
        NotSchoolDay,
        
        AnyHoliday,
        
        LocalHoliday,
        
        RegionalHoliday,
        
        NationalHoliday,
        
        HolidayDisplacementDay,
        
        EveOfHoliday,
    }
    
    /// <summary>
    /// <para>Allowed values for Season.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Season.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SeasonEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum SeasonEnumeration
    {
        
        Spring,
        
        Summer,
        
        Autumn,
        
        Winter,
        
        Perennially,
    }
    
    /// <summary>
    /// <para>Allowed values for Tides.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Tides.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TideEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum TideEnumeration
    {
        
        HighTide,
        
        LowTide,
        
        NeapTide,
        
        AllTides,
    }
    
    /// <summary>
    /// <para>Allowed values for Access MODEs for SITEs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Access MODEs for SITEs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AccessModeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("AccessMode", Namespace="http://www.netex.org.uk/netex")]
    public enum AccessModeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("foot")]
        Foot,
        
        [System.Xml.Serialization.XmlEnumAttribute("bicycle")]
        Bicycle,
        
        [System.Xml.Serialization.XmlEnumAttribute("boat")]
        Boat,
        
        [System.Xml.Serialization.XmlEnumAttribute("car")]
        Car,
        
        [System.Xml.Serialization.XmlEnumAttribute("taxi")]
        Taxi,
        
        [System.Xml.Serialization.XmlEnumAttribute("shuttle")]
        Shuttle,
        
        [System.Xml.Serialization.XmlEnumAttribute("ski")]
        Ski,
        
        [System.Xml.Serialization.XmlEnumAttribute("skate")]
        Skate,
    }
    
    /// <summary>
    /// <para>Allowed values for Periodicity of data in FRAME TYPE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for Periodicity of data in FRAME TYPE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PeriodicityEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum PeriodicityEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("annual")]
        Annual,
        
        [System.Xml.Serialization.XmlEnumAttribute("quarterly")]
        Quarterly,
        
        [System.Xml.Serialization.XmlEnumAttribute("monthly")]
        Monthly,
        
        [System.Xml.Serialization.XmlEnumAttribute("weekly")]
        Weekly,
        
        [System.Xml.Serialization.XmlEnumAttribute("daily")]
        Daily,
    }
    
    /// <summary>
    /// <para>Type for all Sub modes.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for all Sub modes.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AllSubmodeStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AllSubmodeStructure : IAllSubmodeChoiceGroup
    {
        
        [System.Xml.Serialization.XmlElementAttribute("AirSubmode")]
        public AirSubmodeEnumeration AirSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AirSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AirSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("BusSubmode")]
        public BusSubmodeEnumeration BusSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BusSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BusSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("CoachSubmode")]
        public CoachSubmodeEnumeration CoachSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CoachSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CoachSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("FunicularSubmode")]
        public FunicularSubmodeEnumeration FunicularSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FunicularSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FunicularSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("MetroSubmode")]
        public MetroSubmodeEnumeration MetroSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MetroSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MetroSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TramSubmode")]
        public TramSubmodeEnumeration TramSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TramSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TramSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TelecabinSubmode")]
        public TelecabinSubmodeEnumeration TelecabinSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TelecabinSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TelecabinSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("RailSubmode")]
        public RailSubmodeEnumeration RailSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RailSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RailSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("WaterSubmode")]
        public WaterSubmodeEnumeration WaterSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WaterSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WaterSubmodeSpecified { get; set; }
        
        /// <summary>
        /// <para>Extra: Snow and Ice Submode. +v1.1s</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Extra: Snow and Ice Submode. +v1.1s")]
        [System.Xml.Serialization.XmlElementAttribute("SnowAndIceSubmode")]
        public SnowAndIceSubmodeEnumeration SnowAndIceSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SnowAndIceSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SnowAndIceSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TaxiSubmode")]
        public TaxiSubmodeEnumeration TaxiSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TaxiSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TaxiSubmodeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("SelfDriveSubmode")]
        public SelfDriveSubmodeEnumeration SelfDriveSubmode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SelfDriveSubmode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SelfDriveSubmodeSpecified { get; set; }
    }
    
    /// <summary>
    /// <para>All Sub Modes.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("All Sub Modes.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IAllSubmodeChoiceGroup : IPtSubmodeChoiceGroup, IPrivateSubmodeChoiceGroup
    {
    }
    
    /// <summary>
    /// <para>Non PT Road Submodes.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Non PT Road Submodes.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IPrivateSubmodeChoiceGroup
    {
        
        TaxiSubmodeEnumeration TaxiSubmode
        {
            get;
            set;
        }
        
        SelfDriveSubmodeEnumeration SelfDriveSubmode
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Values for Taxi MODEs of TRANSPORT: TPEG pti_table_11.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Values for Taxi MODEs of TRANSPORT: TPEG pti_table_11.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TaxiSubmodeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("TaxiSubmode", Namespace="http://www.netex.org.uk/netex")]
    public enum TaxiSubmodeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("undefined")]
        Undefined,
        
        [System.Xml.Serialization.XmlEnumAttribute("communalTaxi")]
        CommunalTaxi,
        
        [System.Xml.Serialization.XmlEnumAttribute("charterTaxi")]
        CharterTaxi,
        
        [System.Xml.Serialization.XmlEnumAttribute("waterTaxi")]
        WaterTaxi,
        
        [System.Xml.Serialization.XmlEnumAttribute("railTaxi")]
        RailTaxi,
        
        [System.Xml.Serialization.XmlEnumAttribute("bikeTaxi")]
        BikeTaxi,
        
        [System.Xml.Serialization.XmlEnumAttribute("blackCab")]
        BlackCab,
        
        [System.Xml.Serialization.XmlEnumAttribute("miniCab")]
        MiniCab,
        
        [System.Xml.Serialization.XmlEnumAttribute("allTaxiServices")]
        AllTaxiServices,
    }
    
    /// <summary>
    /// <para>Values for SelfDrive MODEs of TRANSPORT: TPEG pti_table_12.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Values for SelfDrive MODEs of TRANSPORT: TPEG pti_table_12.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SelfDriveSubmodeEnumeration", Namespace="http://www.netex.org.uk/netex")]
    [System.Xml.Serialization.XmlRootAttribute("SelfDriveSubmode", Namespace="http://www.netex.org.uk/netex")]
    public enum SelfDriveSubmodeEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("unknown")]
        Unknown,
        
        [System.Xml.Serialization.XmlEnumAttribute("undefined")]
        Undefined,
        
        [System.Xml.Serialization.XmlEnumAttribute("hireCar")]
        HireCar,
        
        [System.Xml.Serialization.XmlEnumAttribute("hireVan")]
        HireVan,
        
        [System.Xml.Serialization.XmlEnumAttribute("hireMotorbike")]
        HireMotorbike,
        
        [System.Xml.Serialization.XmlEnumAttribute("hireCycle")]
        HireCycle,
        
        [System.Xml.Serialization.XmlEnumAttribute("allHireVehicles")]
        AllHireVehicles,
    }
    
    /// <summary>
    /// <para>Enumeration of Uses of language.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Enumeration of Uses of language.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TypeOfInfolinkEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum TypeOfInfolinkEnumeration
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("contact")]
        Contact,
        
        [System.Xml.Serialization.XmlEnumAttribute("resource")]
        Resource,
        
        [System.Xml.Serialization.XmlEnumAttribute("info")]
        Info,
        
        [System.Xml.Serialization.XmlEnumAttribute("image")]
        Image,
        
        [System.Xml.Serialization.XmlEnumAttribute("document")]
        Document,
        
        [System.Xml.Serialization.XmlEnumAttribute("timetableDocument")]
        TimetableDocument,
        
        [System.Xml.Serialization.XmlEnumAttribute("fareSheet")]
        FareSheet,
        
        [System.Xml.Serialization.XmlEnumAttribute("dataLicence")]
        DataLicence,
        
        [System.Xml.Serialization.XmlEnumAttribute("map")]
        Map,
        
        [System.Xml.Serialization.XmlEnumAttribute("icon")]
        Icon,
        
        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }
    
    /// <summary>
    /// <para>Allowed values for classifying Countries ISO 3166-1 (2 character ISO code).</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Allowed values for classifying Countries ISO 3166-1 (2 character ISO code).")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("IanaCountryTldEnumeration", Namespace="http://www.netex.org.uk/netex")]
    public enum IanaCountryTldEnumeration
    {
        
        /// <summary>
        /// <para>Ascension Island.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Ascension Island.")]
        [System.Xml.Serialization.XmlEnumAttribute("ac")]
        Ac,
        
        /// <summary>
        /// <para>Andorra.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Andorra.")]
        [System.Xml.Serialization.XmlEnumAttribute("ad")]
        Ad,
        
        /// <summary>
        /// <para>United Arab Emirates.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("United Arab Emirates.")]
        [System.Xml.Serialization.XmlEnumAttribute("ae")]
        Ae,
        
        /// <summary>
        /// <para>Afghanistan.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Afghanistan.")]
        [System.Xml.Serialization.XmlEnumAttribute("af")]
        Af,
        
        /// <summary>
        /// <para>Antigua and Barbuda.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Antigua and Barbuda.")]
        [System.Xml.Serialization.XmlEnumAttribute("ag")]
        Ag,
        
        /// <summary>
        /// <para>Anguilla.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Anguilla.")]
        [System.Xml.Serialization.XmlEnumAttribute("ai")]
        Ai,
        
        /// <summary>
        /// <para>Albania.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Albania.")]
        [System.Xml.Serialization.XmlEnumAttribute("al")]
        Al,
        
        /// <summary>
        /// <para>Armenia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Armenia.")]
        [System.Xml.Serialization.XmlEnumAttribute("am")]
        Am,
        
        /// <summary>
        /// <para>Netherlands Antilles.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Netherlands Antilles.")]
        [System.Xml.Serialization.XmlEnumAttribute("an")]
        An,
        
        /// <summary>
        /// <para>Angola.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Angola.")]
        [System.Xml.Serialization.XmlEnumAttribute("ao")]
        Ao,
        
        /// <summary>
        /// <para>Antarctica.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Antarctica.")]
        [System.Xml.Serialization.XmlEnumAttribute("aq")]
        Aq,
        
        /// <summary>
        /// <para>Argentina.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Argentina.")]
        [System.Xml.Serialization.XmlEnumAttribute("ar")]
        Ar,
        
        /// <summary>
        /// <para>American Samoa.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("American Samoa.")]
        [System.Xml.Serialization.XmlEnumAttribute("as")]
        As,
        
        /// <summary>
        /// <para>Austria.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Austria.")]
        [System.Xml.Serialization.XmlEnumAttribute("at")]
        At,
        
        /// <summary>
        /// <para>Australia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Australia.")]
        [System.Xml.Serialization.XmlEnumAttribute("au")]
        Au,
        
        /// <summary>
        /// <para>Aruba.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Aruba.")]
        [System.Xml.Serialization.XmlEnumAttribute("aw")]
        Aw,
        
        /// <summary>
        /// <para>Azerbaijan.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Azerbaijan.")]
        [System.Xml.Serialization.XmlEnumAttribute("az")]
        Az,
        
        /// <summary>
        /// <para>Aland Islands.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Aland Islands.")]
        [System.Xml.Serialization.XmlEnumAttribute("ax")]
        Ax,
        
        /// <summary>
        /// <para>Bosnia and Herzegovina.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Bosnia and Herzegovina.")]
        [System.Xml.Serialization.XmlEnumAttribute("ba")]
        Ba,
        
        /// <summary>
        /// <para>Barbados.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Barbados.")]
        [System.Xml.Serialization.XmlEnumAttribute("bb")]
        Bb,
        
        /// <summary>
        /// <para>Bangladesh.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Bangladesh.")]
        [System.Xml.Serialization.XmlEnumAttribute("bd")]
        Bd,
        
        /// <summary>
        /// <para>Belgium.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Belgium.")]
        [System.Xml.Serialization.XmlEnumAttribute("be")]
        Be,
        
        /// <summary>
        /// <para>Burkina Faso.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Burkina Faso.")]
        [System.Xml.Serialization.XmlEnumAttribute("bf")]
        Bf,
        
        /// <summary>
        /// <para>Bulgaria.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Bulgaria.")]
        [System.Xml.Serialization.XmlEnumAttribute("bg")]
        Bg,
        
        /// <summary>
        /// <para>Bahrain.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Bahrain.")]
        [System.Xml.Serialization.XmlEnumAttribute("bh")]
        Bh,
        
        /// <summary>
        /// <para>Burundi.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Burundi.")]
        [System.Xml.Serialization.XmlEnumAttribute("bi")]
        Bi,
        
        /// <summary>
        /// <para>Benin.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Benin.")]
        [System.Xml.Serialization.XmlEnumAttribute("bj")]
        Bj,
        
        /// <summary>
        /// <para>Bermuda.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Bermuda.")]
        [System.Xml.Serialization.XmlEnumAttribute("bm")]
        Bm,
        
        /// <summary>
        /// <para>Brunei Darussalam.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Brunei Darussalam.")]
        [System.Xml.Serialization.XmlEnumAttribute("bn")]
        Bn,
        
        /// <summary>
        /// <para>Bolivia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Bolivia.")]
        [System.Xml.Serialization.XmlEnumAttribute("bo")]
        Bo,
        
        /// <summary>
        /// <para>Brazil.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Brazil.")]
        [System.Xml.Serialization.XmlEnumAttribute("br")]
        Br,
        
        /// <summary>
        /// <para>Bahamas.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Bahamas.")]
        [System.Xml.Serialization.XmlEnumAttribute("bs")]
        Bs,
        
        /// <summary>
        /// <para>Bhutan.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Bhutan.")]
        [System.Xml.Serialization.XmlEnumAttribute("bt")]
        Bt,
        
        /// <summary>
        /// <para>Bouvet Island.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Bouvet Island.")]
        [System.Xml.Serialization.XmlEnumAttribute("bv")]
        Bv,
        
        /// <summary>
        /// <para>Botswana.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Botswana.")]
        [System.Xml.Serialization.XmlEnumAttribute("bw")]
        Bw,
        
        /// <summary>
        /// <para>Belarus.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Belarus.")]
        [System.Xml.Serialization.XmlEnumAttribute("by")]
        By,
        
        /// <summary>
        /// <para>Belize.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Belize.")]
        [System.Xml.Serialization.XmlEnumAttribute("bz")]
        Bz,
        
        /// <summary>
        /// <para>Canada.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Canada.")]
        [System.Xml.Serialization.XmlEnumAttribute("ca")]
        Ca,
        
        /// <summary>
        /// <para>Cocos (Keeling) Islands.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Cocos (Keeling) Islands.")]
        [System.Xml.Serialization.XmlEnumAttribute("cc")]
        Cc,
        
        /// <summary>
        /// <para>Congo, The Democratic Republic of the.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Congo, The Democratic Republic of the.")]
        [System.Xml.Serialization.XmlEnumAttribute("cd")]
        Cd,
        
        /// <summary>
        /// <para>CEN tral African Republic.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("CEN tral African Republic.")]
        [System.Xml.Serialization.XmlEnumAttribute("cf")]
        Cf,
        
        /// <summary>
        /// <para>Congo, Republic of.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Congo, Republic of.")]
        [System.Xml.Serialization.XmlEnumAttribute("cg")]
        Cg,
        
        /// <summary>
        /// <para>Switzerland.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Switzerland.")]
        [System.Xml.Serialization.XmlEnumAttribute("ch")]
        Ch,
        
        /// <summary>
        /// <para>Cote d'Ivoire.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Cote d\'Ivoire.")]
        [System.Xml.Serialization.XmlEnumAttribute("ci")]
        Ci,
        
        /// <summary>
        /// <para>Cook Islands.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Cook Islands.")]
        [System.Xml.Serialization.XmlEnumAttribute("ck")]
        Ck,
        
        /// <summary>
        /// <para>Chile.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Chile.")]
        [System.Xml.Serialization.XmlEnumAttribute("cl")]
        Cl,
        
        /// <summary>
        /// <para>Cameroon.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Cameroon.")]
        [System.Xml.Serialization.XmlEnumAttribute("cm")]
        Cm,
        
        /// <summary>
        /// <para>China.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("China.")]
        [System.Xml.Serialization.XmlEnumAttribute("cn")]
        Cn,
        
        /// <summary>
        /// <para>Colombia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Colombia.")]
        [System.Xml.Serialization.XmlEnumAttribute("co")]
        Co,
        
        /// <summary>
        /// <para>Costa Rica.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Costa Rica.")]
        [System.Xml.Serialization.XmlEnumAttribute("cr")]
        Cr,
        
        /// <summary>
        /// <para>Serbia and Montenegro.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Serbia and Montenegro.")]
        [System.Xml.Serialization.XmlEnumAttribute("cs")]
        Cs,
        
        /// <summary>
        /// <para>Cuba.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Cuba.")]
        [System.Xml.Serialization.XmlEnumAttribute("cu")]
        Cu,
        
        /// <summary>
        /// <para>Cape Verde.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Cape Verde.")]
        [System.Xml.Serialization.XmlEnumAttribute("cv")]
        Cv,
        
        /// <summary>
        /// <para>Christmas Island.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Christmas Island.")]
        [System.Xml.Serialization.XmlEnumAttribute("cx")]
        Cx,
        
        /// <summary>
        /// <para>Cyprus.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Cyprus.")]
        [System.Xml.Serialization.XmlEnumAttribute("cy")]
        Cy,
        
        /// <summary>
        /// <para>Czech Republic.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Czech Republic.")]
        [System.Xml.Serialization.XmlEnumAttribute("cz")]
        Cz,
        
        /// <summary>
        /// <para>Germany.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Germany.")]
        [System.Xml.Serialization.XmlEnumAttribute("de")]
        De,
        
        /// <summary>
        /// <para>Djibouti.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Djibouti.")]
        [System.Xml.Serialization.XmlEnumAttribute("dj")]
        Dj,
        
        /// <summary>
        /// <para>DenmarK.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("DenmarK.")]
        [System.Xml.Serialization.XmlEnumAttribute("dk")]
        Dk,
        
        /// <summary>
        /// <para>Dominica.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Dominica.")]
        [System.Xml.Serialization.XmlEnumAttribute("dm")]
        Dm,
        
        /// <summary>
        /// <para>Dominican Republic.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Dominican Republic.")]
        [System.Xml.Serialization.XmlEnumAttribute("do")]
        Do,
        
        /// <summary>
        /// <para>Algeria.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Algeria.")]
        [System.Xml.Serialization.XmlEnumAttribute("dz")]
        Dz,
        
        /// <summary>
        /// <para>Ecuador.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Ecuador.")]
        [System.Xml.Serialization.XmlEnumAttribute("ec")]
        Ec,
        
        /// <summary>
        /// <para>Estonia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Estonia.")]
        [System.Xml.Serialization.XmlEnumAttribute("ee")]
        Ee,
        
        /// <summary>
        /// <para>Egypt.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Egypt.")]
        [System.Xml.Serialization.XmlEnumAttribute("eg")]
        Eg,
        
        /// <summary>
        /// <para>Western Sahara.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Western Sahara.")]
        [System.Xml.Serialization.XmlEnumAttribute("eh")]
        Eh,
        
        /// <summary>
        /// <para>Eritrea.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Eritrea.")]
        [System.Xml.Serialization.XmlEnumAttribute("er")]
        Er,
        
        /// <summary>
        /// <para>Spain.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Spain.")]
        [System.Xml.Serialization.XmlEnumAttribute("es")]
        Es,
        
        /// <summary>
        /// <para>Ethiopia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Ethiopia.")]
        [System.Xml.Serialization.XmlEnumAttribute("et")]
        Et,
        
        /// <summary>
        /// <para>European Union.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("European Union.")]
        [System.Xml.Serialization.XmlEnumAttribute("eu")]
        Eu,
        
        /// <summary>
        /// <para>Finland.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Finland.")]
        [System.Xml.Serialization.XmlEnumAttribute("fi")]
        Fi,
        
        /// <summary>
        /// <para>Fiji.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Fiji.")]
        [System.Xml.Serialization.XmlEnumAttribute("fj")]
        Fj,
        
        /// <summary>
        /// <para>Falkland Islands (Malvinas).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Falkland Islands (Malvinas).")]
        [System.Xml.Serialization.XmlEnumAttribute("fk")]
        Fk,
        
        /// <summary>
        /// <para>Micronesia, Federal State of.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Micronesia, Federal State of.")]
        [System.Xml.Serialization.XmlEnumAttribute("fm")]
        Fm,
        
        /// <summary>
        /// <para>Faroe Islands.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Faroe Islands.")]
        [System.Xml.Serialization.XmlEnumAttribute("fo")]
        Fo,
        
        /// <summary>
        /// <para>France.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("France.")]
        [System.Xml.Serialization.XmlEnumAttribute("fr")]
        Fr,
        
        /// <summary>
        /// <para>Gabon.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Gabon.")]
        [System.Xml.Serialization.XmlEnumAttribute("ga")]
        Ga,
        
        /// <summary>
        /// <para>United Kingdom.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("United Kingdom.")]
        [System.Xml.Serialization.XmlEnumAttribute("gb")]
        Gb,
        
        /// <summary>
        /// <para>Grenada.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Grenada.")]
        [System.Xml.Serialization.XmlEnumAttribute("gd")]
        Gd,
        
        /// <summary>
        /// <para>Georgia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Georgia.")]
        [System.Xml.Serialization.XmlEnumAttribute("ge")]
        Ge,
        
        /// <summary>
        /// <para>French Guiana.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("French Guiana.")]
        [System.Xml.Serialization.XmlEnumAttribute("gf")]
        Gf,
        
        /// <summary>
        /// <para>Guernsey.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Guernsey.")]
        [System.Xml.Serialization.XmlEnumAttribute("gg")]
        Gg,
        
        /// <summary>
        /// <para>Ghana.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Ghana.")]
        [System.Xml.Serialization.XmlEnumAttribute("gh")]
        Gh,
        
        /// <summary>
        /// <para>Gibraltar.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Gibraltar.")]
        [System.Xml.Serialization.XmlEnumAttribute("gi")]
        Gi,
        
        /// <summary>
        /// <para>Greenland.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Greenland.")]
        [System.Xml.Serialization.XmlEnumAttribute("gl")]
        Gl,
        
        /// <summary>
        /// <para>Gambia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Gambia.")]
        [System.Xml.Serialization.XmlEnumAttribute("gm")]
        Gm,
        
        /// <summary>
        /// <para>Guinea.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Guinea.")]
        [System.Xml.Serialization.XmlEnumAttribute("gn")]
        Gn,
        
        /// <summary>
        /// <para>Guadeloupe.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Guadeloupe.")]
        [System.Xml.Serialization.XmlEnumAttribute("gp")]
        Gp,
        
        /// <summary>
        /// <para>Equatorial Guinea.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Equatorial Guinea.")]
        [System.Xml.Serialization.XmlEnumAttribute("gq")]
        Gq,
        
        /// <summary>
        /// <para>Greece.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Greece.")]
        [System.Xml.Serialization.XmlEnumAttribute("gr")]
        Gr,
        
        /// <summary>
        /// <para>South Georgia and the South Sandwich Islands.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("South Georgia and the South Sandwich Islands.")]
        [System.Xml.Serialization.XmlEnumAttribute("gs")]
        Gs,
        
        /// <summary>
        /// <para>Guatemala.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Guatemala.")]
        [System.Xml.Serialization.XmlEnumAttribute("gt")]
        Gt,
        
        /// <summary>
        /// <para>Guam.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Guam.")]
        [System.Xml.Serialization.XmlEnumAttribute("gu")]
        Gu,
        
        /// <summary>
        /// <para>Guinea-Bissau.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Guinea-Bissau.")]
        [System.Xml.Serialization.XmlEnumAttribute("gw")]
        Gw,
        
        /// <summary>
        /// <para>Guyana.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Guyana.")]
        [System.Xml.Serialization.XmlEnumAttribute("gy")]
        Gy,
        
        /// <summary>
        /// <para>Hong Kong.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Hong Kong.")]
        [System.Xml.Serialization.XmlEnumAttribute("hk")]
        Hk,
        
        /// <summary>
        /// <para>Heard and McDonald Islands.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Heard and McDonald Islands.")]
        [System.Xml.Serialization.XmlEnumAttribute("hm")]
        Hm,
        
        /// <summary>
        /// <para>Honduras.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Honduras.")]
        [System.Xml.Serialization.XmlEnumAttribute("hn")]
        Hn,
        
        /// <summary>
        /// <para>Croatia/Hrvatska.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Croatia/Hrvatska.")]
        [System.Xml.Serialization.XmlEnumAttribute("hr")]
        Hr,
        
        /// <summary>
        /// <para>Haiti.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Haiti.")]
        [System.Xml.Serialization.XmlEnumAttribute("ht")]
        Ht,
        
        /// <summary>
        /// <para>Hungary.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Hungary.")]
        [System.Xml.Serialization.XmlEnumAttribute("hu")]
        Hu,
        
        /// <summary>
        /// <para>Indonesia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Indonesia.")]
        [System.Xml.Serialization.XmlEnumAttribute("id")]
        Id,
        
        /// <summary>
        /// <para>Ireland.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Ireland.")]
        [System.Xml.Serialization.XmlEnumAttribute("ie")]
        Ie,
        
        /// <summary>
        /// <para>Israel.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Israel.")]
        [System.Xml.Serialization.XmlEnumAttribute("il")]
        Il,
        
        /// <summary>
        /// <para>Isle of Man.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Isle of Man.")]
        [System.Xml.Serialization.XmlEnumAttribute("im")]
        Im,
        
        /// <summary>
        /// <para>India.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("India.")]
        [System.Xml.Serialization.XmlEnumAttribute("in")]
        In,
        
        /// <summary>
        /// <para>British Indian Ocean Territory.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("British Indian Ocean Territory.")]
        [System.Xml.Serialization.XmlEnumAttribute("io")]
        Io,
        
        /// <summary>
        /// <para>Iraq.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Iraq.")]
        [System.Xml.Serialization.XmlEnumAttribute("iq")]
        Iq,
        
        /// <summary>
        /// <para>Iran, Islamic Republic of.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Iran, Islamic Republic of.")]
        [System.Xml.Serialization.XmlEnumAttribute("ir")]
        Ir,
        
        /// <summary>
        /// <para>Iceland.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Iceland.")]
        [System.Xml.Serialization.XmlEnumAttribute("is")]
        Is,
        
        /// <summary>
        /// <para>Italy.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Italy.")]
        [System.Xml.Serialization.XmlEnumAttribute("it")]
        It,
        
        /// <summary>
        /// <para>Jersey.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Jersey.")]
        [System.Xml.Serialization.XmlEnumAttribute("je")]
        Je,
        
        /// <summary>
        /// <para>Jamaica.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Jamaica.")]
        [System.Xml.Serialization.XmlEnumAttribute("jm")]
        Jm,
        
        /// <summary>
        /// <para>Jordan.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Jordan.")]
        [System.Xml.Serialization.XmlEnumAttribute("jo")]
        Jo,
        
        /// <summary>
        /// <para>Japan.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Japan.")]
        [System.Xml.Serialization.XmlEnumAttribute("jp")]
        Jp,
        
        /// <summary>
        /// <para>Kenya.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Kenya.")]
        [System.Xml.Serialization.XmlEnumAttribute("ke")]
        Ke,
        
        /// <summary>
        /// <para>Kyrgyzstan.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Kyrgyzstan.")]
        [System.Xml.Serialization.XmlEnumAttribute("kg")]
        Kg,
        
        /// <summary>
        /// <para>Cambodia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Cambodia.")]
        [System.Xml.Serialization.XmlEnumAttribute("kh")]
        Kh,
        
        /// <summary>
        /// <para>Kiribati.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Kiribati.")]
        [System.Xml.Serialization.XmlEnumAttribute("ki")]
        Ki,
        
        /// <summary>
        /// <para>Comoros.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Comoros.")]
        [System.Xml.Serialization.XmlEnumAttribute("km")]
        Km,
        
        /// <summary>
        /// <para>Saint Kitts and Nevis.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Saint Kitts and Nevis.")]
        [System.Xml.Serialization.XmlEnumAttribute("kn")]
        Kn,
        
        /// <summary>
        /// <para>Korea, Democratic People's Republic.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Korea, Democratic People\'s Republic.")]
        [System.Xml.Serialization.XmlEnumAttribute("kp")]
        Kp,
        
        /// <summary>
        /// <para>Korea, Republic of.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Korea, Republic of.")]
        [System.Xml.Serialization.XmlEnumAttribute("kr")]
        Kr,
        
        /// <summary>
        /// <para>Kuwait.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Kuwait.")]
        [System.Xml.Serialization.XmlEnumAttribute("kw")]
        Kw,
        
        /// <summary>
        /// <para>Cayman Islands.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Cayman Islands.")]
        [System.Xml.Serialization.XmlEnumAttribute("ky")]
        Ky,
        
        /// <summary>
        /// <para>Kazakhstan.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Kazakhstan.")]
        [System.Xml.Serialization.XmlEnumAttribute("kz")]
        Kz,
        
        /// <summary>
        /// <para>Lao People's Democratic Republic.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Lao People\'s Democratic Republic.")]
        [System.Xml.Serialization.XmlEnumAttribute("la")]
        La,
        
        /// <summary>
        /// <para>Lebanon.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Lebanon.")]
        [System.Xml.Serialization.XmlEnumAttribute("lb")]
        Lb,
        
        /// <summary>
        /// <para>Saint Lucia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Saint Lucia.")]
        [System.Xml.Serialization.XmlEnumAttribute("lc")]
        Lc,
        
        /// <summary>
        /// <para>Liechtenstein.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Liechtenstein.")]
        [System.Xml.Serialization.XmlEnumAttribute("li")]
        Li,
        
        /// <summary>
        /// <para>Sri Lanka.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Sri Lanka.")]
        [System.Xml.Serialization.XmlEnumAttribute("lk")]
        Lk,
        
        /// <summary>
        /// <para>Liberia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Liberia.")]
        [System.Xml.Serialization.XmlEnumAttribute("lr")]
        Lr,
        
        /// <summary>
        /// <para>Lesotho.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Lesotho.")]
        [System.Xml.Serialization.XmlEnumAttribute("ls")]
        Ls,
        
        /// <summary>
        /// <para>Lithuania.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Lithuania.")]
        [System.Xml.Serialization.XmlEnumAttribute("lt")]
        Lt,
        
        /// <summary>
        /// <para>Luxembourg.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Luxembourg.")]
        [System.Xml.Serialization.XmlEnumAttribute("lu")]
        Lu,
        
        /// <summary>
        /// <para>Latvia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Latvia.")]
        [System.Xml.Serialization.XmlEnumAttribute("lv")]
        Lv,
        
        /// <summary>
        /// <para>Libyan Arab Jamahiriya.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Libyan Arab Jamahiriya.")]
        [System.Xml.Serialization.XmlEnumAttribute("ly")]
        Ly,
        
        /// <summary>
        /// <para>Morocco.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Morocco.")]
        [System.Xml.Serialization.XmlEnumAttribute("ma")]
        Ma,
        
        /// <summary>
        /// <para>Montenegro.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Montenegro.")]
        [System.Xml.Serialization.XmlEnumAttribute("me")]
        Me,
        
        /// <summary>
        /// <para>Monaco.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Monaco.")]
        [System.Xml.Serialization.XmlEnumAttribute("mc")]
        Mc,
        
        /// <summary>
        /// <para>Moldova, Republic of.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Moldova, Republic of.")]
        [System.Xml.Serialization.XmlEnumAttribute("md")]
        Md,
        
        /// <summary>
        /// <para>Madagascar.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Madagascar.")]
        [System.Xml.Serialization.XmlEnumAttribute("mg")]
        Mg,
        
        /// <summary>
        /// <para>Marshall Islands.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Marshall Islands.")]
        [System.Xml.Serialization.XmlEnumAttribute("mh")]
        Mh,
        
        /// <summary>
        /// <para>Macedonia, The Former Yugoslav Republic of.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Macedonia, The Former Yugoslav Republic of.")]
        [System.Xml.Serialization.XmlEnumAttribute("mk")]
        Mk,
        
        /// <summary>
        /// <para>Mali.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mali.")]
        [System.Xml.Serialization.XmlEnumAttribute("ml")]
        Ml,
        
        /// <summary>
        /// <para>Myanmar.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Myanmar.")]
        [System.Xml.Serialization.XmlEnumAttribute("mm")]
        Mm,
        
        /// <summary>
        /// <para>Mongolia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mongolia.")]
        [System.Xml.Serialization.XmlEnumAttribute("mn")]
        Mn,
        
        /// <summary>
        /// <para>Macau.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Macau.")]
        [System.Xml.Serialization.XmlEnumAttribute("mo")]
        Mo,
        
        /// <summary>
        /// <para>Northern Mariana Islands.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Northern Mariana Islands.")]
        [System.Xml.Serialization.XmlEnumAttribute("mp")]
        Mp,
        
        /// <summary>
        /// <para>Martinique.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Martinique.")]
        [System.Xml.Serialization.XmlEnumAttribute("mq")]
        Mq,
        
        /// <summary>
        /// <para>Mauritania.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mauritania.")]
        [System.Xml.Serialization.XmlEnumAttribute("mr")]
        Mr,
        
        /// <summary>
        /// <para>Montserrat.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Montserrat.")]
        [System.Xml.Serialization.XmlEnumAttribute("ms")]
        Ms,
        
        /// <summary>
        /// <para>Malta.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Malta.")]
        [System.Xml.Serialization.XmlEnumAttribute("mt")]
        Mt,
        
        /// <summary>
        /// <para>Mauritius.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mauritius.")]
        [System.Xml.Serialization.XmlEnumAttribute("mu")]
        Mu,
        
        /// <summary>
        /// <para>Maldives.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Maldives.")]
        [System.Xml.Serialization.XmlEnumAttribute("mv")]
        Mv,
        
        /// <summary>
        /// <para>Malawi.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Malawi.")]
        [System.Xml.Serialization.XmlEnumAttribute("mw")]
        Mw,
        
        /// <summary>
        /// <para>Mexico.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mexico.")]
        [System.Xml.Serialization.XmlEnumAttribute("mx")]
        Mx,
        
        /// <summary>
        /// <para>Malaysia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Malaysia.")]
        [System.Xml.Serialization.XmlEnumAttribute("my")]
        My,
        
        /// <summary>
        /// <para>Mozambique.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mozambique.")]
        [System.Xml.Serialization.XmlEnumAttribute("mz")]
        Mz,
        
        /// <summary>
        /// <para>Namibia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Namibia.")]
        [System.Xml.Serialization.XmlEnumAttribute("na")]
        Na,
        
        /// <summary>
        /// <para>New Caledonia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("New Caledonia.")]
        [System.Xml.Serialization.XmlEnumAttribute("nc")]
        Nc,
        
        /// <summary>
        /// <para>Niger.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Niger.")]
        [System.Xml.Serialization.XmlEnumAttribute("ne")]
        Ne,
        
        /// <summary>
        /// <para>Norfolk Island.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Norfolk Island.")]
        [System.Xml.Serialization.XmlEnumAttribute("nf")]
        Nf,
        
        /// <summary>
        /// <para>Nigeria.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nigeria.")]
        [System.Xml.Serialization.XmlEnumAttribute("ng")]
        Ng,
        
        /// <summary>
        /// <para>Nicaragua.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nicaragua.")]
        [System.Xml.Serialization.XmlEnumAttribute("ni")]
        Ni,
        
        /// <summary>
        /// <para>Netherlands.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Netherlands.")]
        [System.Xml.Serialization.XmlEnumAttribute("nl")]
        Nl,
        
        /// <summary>
        /// <para>Norway.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Norway.")]
        [System.Xml.Serialization.XmlEnumAttribute("no")]
        No,
        
        /// <summary>
        /// <para>Nepal.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nepal.")]
        [System.Xml.Serialization.XmlEnumAttribute("np")]
        Np,
        
        /// <summary>
        /// <para>Nauru.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nauru.")]
        [System.Xml.Serialization.XmlEnumAttribute("nr")]
        Nr,
        
        /// <summary>
        /// <para>Niue.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Niue.")]
        [System.Xml.Serialization.XmlEnumAttribute("nu")]
        Nu,
        
        /// <summary>
        /// <para>New Zealand.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("New Zealand.")]
        [System.Xml.Serialization.XmlEnumAttribute("nz")]
        Nz,
        
        /// <summary>
        /// <para>Oman.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Oman.")]
        [System.Xml.Serialization.XmlEnumAttribute("om")]
        Om,
        
        /// <summary>
        /// <para>Panama.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Panama.")]
        [System.Xml.Serialization.XmlEnumAttribute("pa")]
        Pa,
        
        /// <summary>
        /// <para>Peru.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Peru.")]
        [System.Xml.Serialization.XmlEnumAttribute("pe")]
        Pe,
        
        /// <summary>
        /// <para>French Polynesia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("French Polynesia.")]
        [System.Xml.Serialization.XmlEnumAttribute("pf")]
        Pf,
        
        /// <summary>
        /// <para>Papua New Guinea.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Papua New Guinea.")]
        [System.Xml.Serialization.XmlEnumAttribute("pg")]
        Pg,
        
        /// <summary>
        /// <para>Philippines.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Philippines.")]
        [System.Xml.Serialization.XmlEnumAttribute("ph")]
        Ph,
        
        /// <summary>
        /// <para>Pakistan.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Pakistan.")]
        [System.Xml.Serialization.XmlEnumAttribute("pk")]
        Pk,
        
        /// <summary>
        /// <para>Poland.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Poland.")]
        [System.Xml.Serialization.XmlEnumAttribute("pl")]
        Pl,
        
        /// <summary>
        /// <para>Saint Pierre and Miquelon.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Saint Pierre and Miquelon.")]
        [System.Xml.Serialization.XmlEnumAttribute("pm")]
        Pm,
        
        /// <summary>
        /// <para>Pitcairn Island.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Pitcairn Island.")]
        [System.Xml.Serialization.XmlEnumAttribute("pn")]
        Pn,
        
        /// <summary>
        /// <para>Puerto Rico.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Puerto Rico.")]
        [System.Xml.Serialization.XmlEnumAttribute("pr")]
        Pr,
        
        /// <summary>
        /// <para>Palestinian Territories.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Palestinian Territories.")]
        [System.Xml.Serialization.XmlEnumAttribute("ps")]
        Ps,
        
        /// <summary>
        /// <para>Portugal.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Portugal.")]
        [System.Xml.Serialization.XmlEnumAttribute("pt")]
        Pt,
        
        /// <summary>
        /// <para>Palau.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Palau.")]
        [System.Xml.Serialization.XmlEnumAttribute("pw")]
        Pw,
        
        /// <summary>
        /// <para>Paraguay.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Paraguay.")]
        [System.Xml.Serialization.XmlEnumAttribute("py")]
        Py,
        
        /// <summary>
        /// <para>Qatar.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Qatar.")]
        [System.Xml.Serialization.XmlEnumAttribute("qa")]
        Qa,
        
        /// <summary>
        /// <para>Reunion Island.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reunion Island.")]
        [System.Xml.Serialization.XmlEnumAttribute("re")]
        Re,
        
        /// <summary>
        /// <para>Romania.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Romania.")]
        [System.Xml.Serialization.XmlEnumAttribute("ro")]
        Ro,
        
        /// <summary>
        /// <para>serbia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("serbia.")]
        [System.Xml.Serialization.XmlEnumAttribute("rs")]
        Rs,
        
        /// <summary>
        /// <para>Russian Federation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Russian Federation.")]
        [System.Xml.Serialization.XmlEnumAttribute("ru")]
        Ru,
        
        /// <summary>
        /// <para>Rwanda.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Rwanda.")]
        [System.Xml.Serialization.XmlEnumAttribute("rw")]
        Rw,
        
        /// <summary>
        /// <para>Saudi Arabia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Saudi Arabia.")]
        [System.Xml.Serialization.XmlEnumAttribute("sa")]
        Sa,
        
        /// <summary>
        /// <para>Solomon Islands.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Solomon Islands.")]
        [System.Xml.Serialization.XmlEnumAttribute("sb")]
        Sb,
        
        /// <summary>
        /// <para>Seychelles.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Seychelles.")]
        [System.Xml.Serialization.XmlEnumAttribute("sc")]
        Sc,
        
        /// <summary>
        /// <para>Sudan.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Sudan.")]
        [System.Xml.Serialization.XmlEnumAttribute("sd")]
        Sd,
        
        /// <summary>
        /// <para>Sweden.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Sweden.")]
        [System.Xml.Serialization.XmlEnumAttribute("se")]
        Se,
        
        /// <summary>
        /// <para>Singapore.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Singapore.")]
        [System.Xml.Serialization.XmlEnumAttribute("sg")]
        Sg,
        
        /// <summary>
        /// <para>Saint Helena.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Saint Helena.")]
        [System.Xml.Serialization.XmlEnumAttribute("sh")]
        Sh,
        
        /// <summary>
        /// <para>Slovenia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Slovenia.")]
        [System.Xml.Serialization.XmlEnumAttribute("si")]
        Si,
        
        /// <summary>
        /// <para>Svalbard and Jan Mayen Islands.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Svalbard and Jan Mayen Islands.")]
        [System.Xml.Serialization.XmlEnumAttribute("sj")]
        Sj,
        
        /// <summary>
        /// <para>Slovak Republic.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Slovak Republic.")]
        [System.Xml.Serialization.XmlEnumAttribute("sk")]
        Sk,
        
        /// <summary>
        /// <para>Sierra Leone.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Sierra Leone.")]
        [System.Xml.Serialization.XmlEnumAttribute("sl")]
        Sl,
        
        /// <summary>
        /// <para>San Marino.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("San Marino.")]
        [System.Xml.Serialization.XmlEnumAttribute("sm")]
        Sm,
        
        /// <summary>
        /// <para>Senegal.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Senegal.")]
        [System.Xml.Serialization.XmlEnumAttribute("sn")]
        Sn,
        
        /// <summary>
        /// <para>Somalia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Somalia.")]
        [System.Xml.Serialization.XmlEnumAttribute("so")]
        So,
        
        /// <summary>
        /// <para>Suriname.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Suriname.")]
        [System.Xml.Serialization.XmlEnumAttribute("sr")]
        Sr,
        
        /// <summary>
        /// <para>Sao Tome and Principe.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Sao Tome and Principe.")]
        [System.Xml.Serialization.XmlEnumAttribute("st")]
        St,
        
        /// <summary>
        /// <para>El Salvador.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("El Salvador.")]
        [System.Xml.Serialization.XmlEnumAttribute("sv")]
        Sv,
        
        /// <summary>
        /// <para>Syrian Arab Republic.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Syrian Arab Republic.")]
        [System.Xml.Serialization.XmlEnumAttribute("sy")]
        Sy,
        
        /// <summary>
        /// <para>Swaziland.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Swaziland.")]
        [System.Xml.Serialization.XmlEnumAttribute("sz")]
        Sz,
        
        /// <summary>
        /// <para>Turks and Caicos Islands.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Turks and Caicos Islands.")]
        [System.Xml.Serialization.XmlEnumAttribute("tc")]
        Tc,
        
        /// <summary>
        /// <para>Chad.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Chad.")]
        [System.Xml.Serialization.XmlEnumAttribute("td")]
        Td,
        
        /// <summary>
        /// <para>French Southern Territories.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("French Southern Territories.")]
        [System.Xml.Serialization.XmlEnumAttribute("tf")]
        Tf,
        
        /// <summary>
        /// <para>Togo.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Togo.")]
        [System.Xml.Serialization.XmlEnumAttribute("tg")]
        Tg,
        
        /// <summary>
        /// <para>Thailand.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Thailand.")]
        [System.Xml.Serialization.XmlEnumAttribute("th")]
        Th,
        
        /// <summary>
        /// <para>Tajikistan.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Tajikistan.")]
        [System.Xml.Serialization.XmlEnumAttribute("tj")]
        Tj,
        
        /// <summary>
        /// <para>Tokelau.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Tokelau.")]
        [System.Xml.Serialization.XmlEnumAttribute("tk")]
        Tk,
        
        /// <summary>
        /// <para>Timor-Leste.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Timor-Leste.")]
        [System.Xml.Serialization.XmlEnumAttribute("tl")]
        Tl,
        
        /// <summary>
        /// <para>Turkmenistan.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Turkmenistan.")]
        [System.Xml.Serialization.XmlEnumAttribute("tm")]
        Tm,
        
        /// <summary>
        /// <para>Tunisia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Tunisia.")]
        [System.Xml.Serialization.XmlEnumAttribute("tn")]
        Tn,
        
        /// <summary>
        /// <para>Tonga.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Tonga.")]
        [System.Xml.Serialization.XmlEnumAttribute("to")]
        To,
        
        /// <summary>
        /// <para>East Timor.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("East Timor.")]
        [System.Xml.Serialization.XmlEnumAttribute("tp")]
        Tp,
        
        /// <summary>
        /// <para>Turkey.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Turkey.")]
        [System.Xml.Serialization.XmlEnumAttribute("tr")]
        Tr,
        
        /// <summary>
        /// <para>Trinidad and Tobago.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Trinidad and Tobago.")]
        [System.Xml.Serialization.XmlEnumAttribute("tt")]
        Tt,
        
        /// <summary>
        /// <para>Tuvalu.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Tuvalu.")]
        [System.Xml.Serialization.XmlEnumAttribute("tv")]
        Tv,
        
        /// <summary>
        /// <para>Taiwan.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Taiwan.")]
        [System.Xml.Serialization.XmlEnumAttribute("tw")]
        Tw,
        
        /// <summary>
        /// <para>Tanzania.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Tanzania.")]
        [System.Xml.Serialization.XmlEnumAttribute("tz")]
        Tz,
        
        /// <summary>
        /// <para>Ukraine.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Ukraine.")]
        [System.Xml.Serialization.XmlEnumAttribute("ua")]
        Ua,
        
        /// <summary>
        /// <para>Uganda.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Uganda.")]
        [System.Xml.Serialization.XmlEnumAttribute("ug")]
        Ug,
        
        /// <summary>
        /// <para>United Kingdom.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("United Kingdom.")]
        [System.Xml.Serialization.XmlEnumAttribute("uk")]
        Uk,
        
        /// <summary>
        /// <para>United States Minor Outlying Islands.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("United States Minor Outlying Islands.")]
        [System.Xml.Serialization.XmlEnumAttribute("um")]
        Um,
        
        /// <summary>
        /// <para>United States.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("United States.")]
        [System.Xml.Serialization.XmlEnumAttribute("us")]
        Us,
        
        /// <summary>
        /// <para>Uruguay.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Uruguay.")]
        [System.Xml.Serialization.XmlEnumAttribute("uy")]
        Uy,
        
        /// <summary>
        /// <para>Uzbekistan.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Uzbekistan.")]
        [System.Xml.Serialization.XmlEnumAttribute("uz")]
        Uz,
        
        /// <summary>
        /// <para>Holy See (Vatican City State).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Holy See (Vatican City State).")]
        [System.Xml.Serialization.XmlEnumAttribute("va")]
        Va,
        
        /// <summary>
        /// <para>Saint Vincent and the Grenadines.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Saint Vincent and the Grenadines.")]
        [System.Xml.Serialization.XmlEnumAttribute("vc")]
        Vc,
        
        /// <summary>
        /// <para>Venezuela.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Venezuela.")]
        [System.Xml.Serialization.XmlEnumAttribute("ve")]
        Ve,
        
        /// <summary>
        /// <para>Virgin Islands, British.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Virgin Islands, British.")]
        [System.Xml.Serialization.XmlEnumAttribute("vg")]
        Vg,
        
        /// <summary>
        /// <para>Virgin Islands, US.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Virgin Islands, US.")]
        [System.Xml.Serialization.XmlEnumAttribute("vi")]
        Vi,
        
        /// <summary>
        /// <para>Vietnam.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Vietnam.")]
        [System.Xml.Serialization.XmlEnumAttribute("vn")]
        Vn,
        
        /// <summary>
        /// <para>Vanuatu.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Vanuatu.")]
        [System.Xml.Serialization.XmlEnumAttribute("vu")]
        Vu,
        
        /// <summary>
        /// <para>Wallis and Futuna Islands.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Wallis and Futuna Islands.")]
        [System.Xml.Serialization.XmlEnumAttribute("wf")]
        Wf,
        
        /// <summary>
        /// <para>Samoa.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Samoa.")]
        [System.Xml.Serialization.XmlEnumAttribute("ws")]
        Ws,
        
        /// <summary>
        /// <para>Yemen.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Yemen.")]
        [System.Xml.Serialization.XmlEnumAttribute("ye")]
        Ye,
        
        /// <summary>
        /// <para>Mayotte.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mayotte.")]
        [System.Xml.Serialization.XmlEnumAttribute("yt")]
        Yt,
        
        /// <summary>
        /// <para>Yugoslavia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Yugoslavia.")]
        [System.Xml.Serialization.XmlEnumAttribute("yu")]
        Yu,
        
        /// <summary>
        /// <para>South Africa.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("South Africa.")]
        [System.Xml.Serialization.XmlEnumAttribute("za")]
        Za,
        
        /// <summary>
        /// <para>Zambia.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Zambia.")]
        [System.Xml.Serialization.XmlEnumAttribute("zm")]
        Zm,
        
        /// <summary>
        /// <para>Zimbabwe.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Zimbabwe.")]
        [System.Xml.Serialization.XmlEnumAttribute("zw")]
        Zw,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Block_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Block", Namespace="http://www.netex.org.uk/netex")]
    public partial class BlockVersionStructure : IDataManagedObjectElementGroup, IBlockTimingGroup, IBlockReferencesGroup, IBlockComponentsGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="BlockVersionStructure" /> class.</para>
        /// </summary>
        public BlockVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
            this._dayTypes = new System.Collections.ObjectModel.Collection<DayTypeRefStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PreparationDuration")]
        public string PreparationDuration { get; set; }
        
        /// <summary>
        /// <para>Start time of BLOCK- In principle this can be derived from the Start time of the first journey and the preparation duration but may be stated  explicitly as well.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Start time of BLOCK- In principle this can be derived from the Start time of the " +
            "first journey and the preparation duration but may be stated explicitly as well." +
            "")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("StartTime")]
        public string StartTime { get; set; }
        
        /// <summary>
        /// <para>Day offset of Start time from current OPERATING DAY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Day offset of Start time from current OPERATING DAY.")]
        [System.Xml.Serialization.XmlElementAttribute("StartTimeDayOffset")]
        public string StartTimeDayOffset { get; set; }
        
        /// <summary>
        /// <para>Time to complete BLOCK.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Time to complete BLOCK.")]
        [System.Xml.Serialization.XmlElementAttribute("FinishingDuration")]
        public string FinishingDuration { get; set; }
        
        /// <summary>
        /// <para>End time of BLOCK. In principle this can be derived from the Start time of the last journey and the finishing duration but may be stated  explicitly as well.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("End time of BLOCK. In principle this can be derived from the Start time of the la" +
            "st journey and the finishing duration but may be stated explicitly as well.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("EndTime")]
        public string EndTime { get; set; }
        
        /// <summary>
        /// <para>Day offset of end time from current OPERATING DAY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Day offset of end time from current OPERATING DAY.")]
        [System.Xml.Serialization.XmlElementAttribute("EndTimeDayOffset")]
        public string EndTimeDayOffset { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DayTypeRefStructure> _dayTypes;
        
        [System.Xml.Serialization.XmlArrayAttribute("dayTypes")]
        [System.Xml.Serialization.XmlArrayItemAttribute("DayTypeRef", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<DayTypeRefStructure> DayTypes
        {
            get
            {
                return _dayTypes;
            }
            private set
            {
                _dayTypes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DayTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DayTypesSpecified
        {
            get
            {
                return (this.DayTypes.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("VehicleServicePartRef")]
        public VehicleServicePartRefStructure VehicleServicePartRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TrainRef")]
        public TrainRefStructure TrainRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("CompoundTrainRef")]
        public CompoundTrainRefStructure CompoundTrainRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("VehicleTypeRef")]
        public VehicleTypeRefStructure VehicleTypeRef { get; set; }
        
        /// <summary>
        /// <para>Point at which BLOCK starts Should be a PARKING POINT but might be of unknown type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Point at which BLOCK starts Should be a PARKING POINT but might be of unknown typ" +
            "e.")]
        [System.Xml.Serialization.XmlElementAttribute("StartPointRef")]
        public PointRefStructure StartPointRef { get; set; }
        
        /// <summary>
        /// <para>Point at which BLOCK ends Point at which BLOCK starts Should be a PARKING POINT but might be of unknown type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Point at which BLOCK ends Point at which BLOCK starts Should be a PARKING POINT b" +
            "ut might be of unknown type.")]
        [System.Xml.Serialization.XmlElementAttribute("EndPointRef")]
        public PointRefStructure EndPointRef { get; set; }
        
        /// <summary>
        /// <para>JOURNEYS making up BLOCK.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("JOURNEYS making up BLOCK.")]
        [System.Xml.Serialization.XmlElementAttribute("journeys")]
        public JourneyRefsRelStructure Journeys { get; set; }
        
        /// <summary>
        /// <para>Runs in BLOCK PART.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Runs in BLOCK PART.")]
        [System.Xml.Serialization.XmlElementAttribute("coursesOfJourneys")]
        public CoursesOfJourneysRelStructure CoursesOfJourneys { get; set; }
        
        /// <summary>
        /// <para>BLOCK PARTS in BLOCK.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("BLOCK PARTS in BLOCK.")]
        [System.Xml.Serialization.XmlElementAttribute("blockParts")]
        public BlockPartsRelStructure BlockParts { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Timing Elements for BLOCK.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Timing Elements for BLOCK.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IBlockTimingGroup
    {
        
        string PreparationDuration
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Start time of BLOCK- In principle this can be derived from the Start time of the first journey and the preparation duration but may be stated  explicitly as well.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Start time of BLOCK- In principle this can be derived from the Start time of the " +
            "first journey and the preparation duration but may be stated explicitly as well." +
            "")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        string StartTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Day offset of Start time from current OPERATING DAY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Day offset of Start time from current OPERATING DAY.")]
        string StartTimeDayOffset
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Time to complete BLOCK.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Time to complete BLOCK.")]
        string FinishingDuration
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>End time of BLOCK. In principle this can be derived from the Start time of the last journey and the finishing duration but may be stated  explicitly as well.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("End time of BLOCK. In principle this can be derived from the Start time of the la" +
            "st journey and the finishing duration but may be stated explicitly as well.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        string EndTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Day offset of end time from current OPERATING DAY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Day offset of end time from current OPERATING DAY.")]
        string EndTimeDayOffset
        {
            get;
            set;
        }
        
        System.Collections.ObjectModel.Collection<DayTypeRefStructure> DayTypes
        {
            get;
        }
    }
    
    /// <summary>
    /// <para>Reference elements for BLOCK.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Reference elements for BLOCK.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IBlockReferencesGroup
    {
        
        VehicleServicePartRefStructure VehicleServicePartRef
        {
            get;
            set;
        }
        
        TrainRefStructure TrainRef
        {
            get;
            set;
        }
        
        CompoundTrainRefStructure CompoundTrainRef
        {
            get;
            set;
        }
        
        VehicleTypeRefStructure VehicleTypeRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Point at which BLOCK starts Should be a PARKING POINT but might be of unknown type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Point at which BLOCK starts Should be a PARKING POINT but might be of unknown typ" +
            "e.")]
        PointRefStructure StartPointRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Point at which BLOCK ends Point at which BLOCK starts Should be a PARKING POINT but might be of unknown type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Point at which BLOCK ends Point at which BLOCK starts Should be a PARKING POINT b" +
            "ut might be of unknown type.")]
        PointRefStructure EndPointRef
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("VehicleServicePartRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("VehicleServicePartRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class VehicleServicePartRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Component Elements for BLOCK.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Component Elements for BLOCK.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IBlockComponentsGroup
    {
        
        /// <summary>
        /// <para>JOURNEYS making up BLOCK.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("JOURNEYS making up BLOCK.")]
        JourneyRefsRelStructure Journeys
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Runs in BLOCK PART.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Runs in BLOCK PART.")]
        CoursesOfJourneysRelStructure CoursesOfJourneys
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>BLOCK PARTS in BLOCK.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("BLOCK PARTS in BLOCK.")]
        BlockPartsRelStructure BlockParts
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("journeyRefs_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("journeys", Namespace="http://www.netex.org.uk/netex")]
    public partial class JourneyRefsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ServiceJourneyRefStructure> _serviceJourneyRef;
        
        [System.Xml.Serialization.XmlElementAttribute("ServiceJourneyRef")]
        public System.Collections.ObjectModel.Collection<ServiceJourneyRefStructure> ServiceJourneyRef
        {
            get
            {
                return _serviceJourneyRef;
            }
            private set
            {
                _serviceJourneyRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ServiceJourneyRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceJourneyRefSpecified
        {
            get
            {
                return (this.ServiceJourneyRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyRefsRelStructure" /> class.</para>
        /// </summary>
        public JourneyRefsRelStructure()
        {
            this._serviceJourneyRef = new System.Collections.ObjectModel.Collection<ServiceJourneyRefStructure>();
            this._deadRunRef = new System.Collections.ObjectModel.Collection<DeadRunRefStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DeadRunRefStructure> _deadRunRef;
        
        [System.Xml.Serialization.XmlElementAttribute("DeadRunRef")]
        public System.Collections.ObjectModel.Collection<DeadRunRefStructure> DeadRunRef
        {
            get
            {
                return _deadRunRef;
            }
            private set
            {
                _deadRunRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DeadRunRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DeadRunRefSpecified
        {
            get
            {
                return (this.DeadRunRef.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("coursesOfJourneys_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("coursesOfJourneys", Namespace="http://www.netex.org.uk/netex")]
    public partial class CoursesOfJourneysRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<CourseOfJourneysVersionStructure> _courseOfJourneys;
        
        /// <summary>
        /// <para>COURSE OF JOURNEYs (Runs) in frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("COURSE OF JOURNEYs (Runs) in frame.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("CourseOfJourneys")]
        public System.Collections.ObjectModel.Collection<CourseOfJourneysVersionStructure> CourseOfJourneys
        {
            get
            {
                return _courseOfJourneys;
            }
            private set
            {
                _courseOfJourneys = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CoursesOfJourneysRelStructure" /> class.</para>
        /// </summary>
        public CoursesOfJourneysRelStructure()
        {
            this._courseOfJourneys = new System.Collections.ObjectModel.Collection<CourseOfJourneysVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CourseOfJourneys_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("CourseOfJourneys", Namespace="http://www.netex.org.uk/netex")]
    public partial class CourseOfJourneysVersionStructure : IDataManagedObjectElementGroup, ICourseOfJourneysTimingGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CourseOfJourneysVersionStructure" /> class.</para>
        /// </summary>
        public CourseOfJourneysVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("CourseOfJourneysNumber")]
        public string CourseOfJourneysNumber { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateCode")]
        public PrivateCodeStructure PrivateCode { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PreparationDuration")]
        public string PreparationDuration { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("StartTimeInBlock")]
        public string StartTimeInBlock { get; set; }
        
        /// <summary>
        /// <para>Day offset of Start time from current OPERATING DAY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Day offset of Start time from current OPERATING DAY.")]
        [System.Xml.Serialization.XmlElementAttribute("StartTimeDayOffset")]
        public string StartTimeDayOffset { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("FinishingDuration")]
        public string FinishingDuration { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("BlockRef")]
        public BlockRefStructure BlockRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("LineRef")]
        public LineRefStructure LineRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("journeys")]
        public JourneyRefsRelStructure Journeys { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    /// <summary>
    /// <para>Timing Elements for CourseOfJourneys.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Timing Elements for CourseOfJourneys.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ICourseOfJourneysTimingGroup
    {
        
        string PreparationDuration
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        string StartTimeInBlock
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Day offset of Start time from current OPERATING DAY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Day offset of Start time from current OPERATING DAY.")]
        string StartTimeDayOffset
        {
            get;
            set;
        }
        
        string FinishingDuration
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("blockParts_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("blockParts", Namespace="http://www.netex.org.uk/netex")]
    public partial class BlockPartsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<BlockPartVersionStructure> _blockPart;
        
        [System.Xml.Serialization.XmlElementAttribute("BlockPart")]
        public System.Collections.ObjectModel.Collection<BlockPartVersionStructure> BlockPart
        {
            get
            {
                return _blockPart;
            }
            private set
            {
                _blockPart = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BlockPart collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BlockPartSpecified
        {
            get
            {
                return (this.BlockPart.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="BlockPartsRelStructure" /> class.</para>
        /// </summary>
        public BlockPartsRelStructure()
        {
            this._blockPart = new System.Collections.ObjectModel.Collection<BlockPartVersionStructure>();
            this._trainBlockPart = new System.Collections.ObjectModel.Collection<TrainBlockPartVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TrainBlockPartVersionStructure> _trainBlockPart;
        
        [System.Xml.Serialization.XmlElementAttribute("TrainBlockPart")]
        public System.Collections.ObjectModel.Collection<TrainBlockPartVersionStructure> TrainBlockPart
        {
            get
            {
                return _trainBlockPart;
            }
            private set
            {
                _trainBlockPart = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TrainBlockPart collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TrainBlockPartSpecified
        {
            get
            {
                return (this.TrainBlockPart.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>A part of a BLOCK.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A part of a BLOCK.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BlockPart_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("BlockPart", Namespace="http://www.netex.org.uk/netex")]
    public partial class BlockPartVersionStructure : IDataManagedObjectElementGroup, IBlockPartGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="BlockPartVersionStructure" /> class.</para>
        /// </summary>
        public BlockPartVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of BLOCK PART.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of BLOCK PART.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Description of BLOCK PART.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of BLOCK PART.")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("BlockRef")]
        public BlockRefStructure BlockRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TrainRef")]
        public TrainRefStructure TrainRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("CompoundTrainRef")]
        public CompoundTrainRefStructure CompoundTrainRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("VehicleTypeRef")]
        public VehicleTypeRefStructure VehicleTypeRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("JourneyPartCoupleRef")]
        public JourneyPartCoupleRefStructure JourneyPartCoupleRef { get; set; }
        
        /// <summary>
        /// <para>JOURNEY PARTs in BLOCK PART.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("JOURNEY PARTs in BLOCK PART.")]
        [System.Xml.Serialization.XmlElementAttribute("journeyParts")]
        public JourneyPartRefsRelStructure JourneyParts { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public string Order { get; set; }
    }
    
    /// <summary>
    /// <para>Elements for BLOCK PART.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements for BLOCK PART.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface IBlockPartGroup
    {
        
        /// <summary>
        /// <para>Name of BLOCK PART.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of BLOCK PART.")]
        MultilingualString Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Description of BLOCK PART.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of BLOCK PART.")]
        MultilingualString Description
        {
            get;
            set;
        }
        
        BlockRefStructure BlockRef
        {
            get;
            set;
        }
        
        TrainRefStructure TrainRef
        {
            get;
            set;
        }
        
        CompoundTrainRefStructure CompoundTrainRef
        {
            get;
            set;
        }
        
        VehicleTypeRefStructure VehicleTypeRef
        {
            get;
            set;
        }
        
        JourneyPartCoupleRefStructure JourneyPartCoupleRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>JOURNEY PARTs in BLOCK PART.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("JOURNEY PARTs in BLOCK PART.")]
        JourneyPartRefsRelStructure JourneyParts
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>TRAIN BLOCK PART.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("TRAIN BLOCK PART.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TrainBlockPart_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TrainBlockPart", Namespace="http://www.netex.org.uk/netex")]
    public partial class TrainBlockPartVersionStructure : IDataManagedObjectElementGroup, IBlockPartGroup, ITrainBlockPartGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TrainBlockPartVersionStructure" /> class.</para>
        /// </summary>
        public TrainBlockPartVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Name of BLOCK PART.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of BLOCK PART.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Description of BLOCK PART.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of BLOCK PART.")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("BlockRef")]
        public BlockRefStructure BlockRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TrainRef")]
        public TrainRefStructure TrainRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("CompoundTrainRef")]
        public CompoundTrainRefStructure CompoundTrainRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("VehicleTypeRef")]
        public VehicleTypeRefStructure VehicleTypeRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("JourneyPartCoupleRef")]
        public JourneyPartCoupleRefStructure JourneyPartCoupleRef { get; set; }
        
        /// <summary>
        /// <para>JOURNEY PARTs in BLOCK PART.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("JOURNEY PARTs in BLOCK PART.")]
        [System.Xml.Serialization.XmlElementAttribute("journeyParts")]
        public JourneyPartRefsRelStructure JourneyParts { get; set; }
        
        /// <summary>
        /// <para>Start time of BLOCK PART- In principle this can be derived from the Start time of the first journey and the preparation duration but may be stated  explicitly as well.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Start time of BLOCK PART- In principle this can be derived from the Start time of" +
            " the first journey and the preparation duration but may be stated explicitly as " +
            "well.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("StartTime")]
        public string StartTime { get; set; }
        
        /// <summary>
        /// <para>Day offset of Start time from current OPERATING DAY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Day offset of Start time from current OPERATING DAY.")]
        [System.Xml.Serialization.XmlElementAttribute("StartTimeDayOffset")]
        public string StartTimeDayOffset { get; set; }
        
        /// <summary>
        /// <para>End time of BLOCK PART. In principle this can be derived from the Start time of the last journey and the finishing duration but may be stated  explicitly as well.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("End time of BLOCK PART. In principle this can be derived from the Start time of t" +
            "he last journey and the finishing duration but may be stated explicitly as well." +
            "")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        [System.Xml.Serialization.XmlElementAttribute("EndTime")]
        public string EndTime { get; set; }
        
        /// <summary>
        /// <para>Day offset of end time from current OPERATING DAY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Day offset of end time from current OPERATING DAY.")]
        [System.Xml.Serialization.XmlElementAttribute("EndTimeDayOffset")]
        public string EndTimeDayOffset { get; set; }
        
        /// <summary>
        /// <para>Type of Coupling.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type of Coupling.")]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfCoupling")]
        public string TypeOfCoupling { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public string Order { get; set; }
    }
    
    /// <summary>
    /// <para>Elements specific for TRAIN BLOCK PART.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elements specific for TRAIN BLOCK PART.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ITrainBlockPartGroup
    {
        
        /// <summary>
        /// <para>Start time of BLOCK PART- In principle this can be derived from the Start time of the first journey and the preparation duration but may be stated  explicitly as well.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Start time of BLOCK PART- In principle this can be derived from the Start time of" +
            " the first journey and the preparation duration but may be stated explicitly as " +
            "well.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        string StartTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Day offset of Start time from current OPERATING DAY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Day offset of Start time from current OPERATING DAY.")]
        string StartTimeDayOffset
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>End time of BLOCK PART. In principle this can be derived from the Start time of the last journey and the finishing duration but may be stated  explicitly as well.</para>
        /// <para xml:lang="en">Pattern: [0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("End time of BLOCK PART. In principle this can be derived from the Start time of t" +
            "he last journey and the finishing duration but may be stated explicitly as well." +
            "")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2}(:[0-9]{2}){2}(.[0-9]{1,3})?(Z|([-+][0-9]{2}(:[0-9]{2})))?")]
        string EndTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Day offset of end time from current OPERATING DAY.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Day offset of end time from current OPERATING DAY.")]
        string EndTimeDayOffset
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Type of Coupling.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type of Coupling.")]
        string TypeOfCoupling
        {
            get;
            set;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("VehicleService_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("VehicleService", Namespace="http://www.netex.org.uk/netex")]
    public partial class VehicleServiceVersionStructure : IDataManagedObjectElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="VehicleServiceVersionStructure" /> class.</para>
        /// </summary>
        public VehicleServiceVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("vehicleServiceParts")]
        public VehicleServicePartsRelStructure VehicleServiceParts { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("vehicleServiceParts_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("vehicleServiceParts", Namespace="http://www.netex.org.uk/netex")]
    public partial class VehicleServicePartsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<VehicleServicePartVersionStructure> _vehicleServicePart;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("VehicleServicePart")]
        public System.Collections.ObjectModel.Collection<VehicleServicePartVersionStructure> VehicleServicePart
        {
            get
            {
                return _vehicleServicePart;
            }
            private set
            {
                _vehicleServicePart = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="VehicleServicePartsRelStructure" /> class.</para>
        /// </summary>
        public VehicleServicePartsRelStructure()
        {
            this._vehicleServicePart = new System.Collections.ObjectModel.Collection<VehicleServicePartVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("VehicleServicePart_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("VehicleServicePart", Namespace="http://www.netex.org.uk/netex")]
    public partial class VehicleServicePartVersionStructure : IDataManagedObjectElementGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="VehicleServicePartVersionStructure" /> class.</para>
        /// </summary>
        public VehicleServicePartVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("VehicleServiceRef")]
        public VehicleServiceRefStructure VehicleServiceRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("StartPointRef")]
        public PointRefStructure StartPointRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("EndPointRef")]
        public PointRefStructure EndPointRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("VehicleServiceRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("VehicleServiceRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class VehicleServiceRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("blocks_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("blocks", Namespace="http://www.netex.org.uk/netex")]
    public partial class BlocksRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<BlockVersionStructure> _block;
        
        /// <summary>
        /// <para>The work of a vehicle from the time it leaves a PARKING POINT after parking until its next return to park at a PARKING POINT. Any subsequent departure from a PARKING POINT after parking marks the start of a new BLOCK.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The work of a vehicle from the time it leaves a PARKING POINT after parking until" +
            " its next return to park at a PARKING POINT. Any subsequent departure from a PAR" +
            "KING POINT after parking marks the start of a new BLOCK.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Block")]
        public System.Collections.ObjectModel.Collection<BlockVersionStructure> Block
        {
            get
            {
                return _block;
            }
            private set
            {
                _block = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="BlocksRelStructure" /> class.</para>
        /// </summary>
        public BlocksRelStructure()
        {
            this._block = new System.Collections.ObjectModel.Collection<BlockVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("vehicleServices_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("vehicleServices", Namespace="http://www.netex.org.uk/netex")]
    public partial class VehicleServicesRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<VehicleServiceVersionStructure> _vehicleService;
        
        /// <summary>
        /// <para>A work plan for a vehicle for a whole day, planned for a specific DAY TYPE. A VEHICLE SERVICE includes one or several VEHICLE SERVICE PARTs.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A work plan for a vehicle for a whole day, planned for a specific DAY TYPE. A VEH" +
            "ICLE SERVICE includes one or several VEHICLE SERVICE PARTs.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("VehicleService")]
        public System.Collections.ObjectModel.Collection<VehicleServiceVersionStructure> VehicleService
        {
            get
            {
                return _vehicleService;
            }
            private set
            {
                _vehicleService = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="VehicleServicesRelStructure" /> class.</para>
        /// </summary>
        public VehicleServicesRelStructure()
        {
            this._vehicleService = new System.Collections.ObjectModel.Collection<VehicleServiceVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CourseOfJourneysRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("CourseOfJourneysRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class CourseOfJourneysRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ToPointRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ToPointRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("FromPointRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FromPointRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("destinations_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("destinations", Namespace="http://www.netex.org.uk/netex")]
    public partial class DestinationsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("DestinationDisplayView")]
        public DestinationDisplayViewStructure DestinationDisplayView { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ParentZoneRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ParentZoneRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ParentZoneRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Not in EPIP. A coherent set of Vehicle Scheduling data to which the same VALIDITY CONDITIONs have been assigned.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Not in EPIP. A coherent set of Vehicle Scheduling data to which the same VALIDITY" +
        " CONDITIONs have been assigned.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("VehicleScheduleFrame_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("VehicleScheduleFrame", Namespace="http://www.netex.org.uk/netex")]
    public partial class VehicleScheduleFrameVersionStructure : IVersionFrameGroup, IDataManagedObjectAttributeGroup
    {
        
        /// <summary>
        /// <para>Main construction in EPIP to express validity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Main construction in EPIP to express validity.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public ValidBetweenVersionStructure ValidBetween { get; set; }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject, however EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject, however EPIP restricts use of VALIDITY CONDITIONs to just a simple na" +
            "me.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        /// <summary>
        /// <para>Name of VERSION FRAME.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of VERSION FRAME.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Description of VERSION FRAME contents.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of VERSION FRAME contents.")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Reference to a TYPE OF VERSION FRAME.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a TYPE OF VERSION FRAME.")]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfFrameRef")]
        public TypeOfFrameRefStructure TypeOfFrameRef { get; set; }
        
        /// <summary>
        /// <para>Previous baseline VERSION FRAME that objects in this VERSION require.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Previous baseline VERSION FRAME that objects in this VERSION require.")]
        [System.Xml.Serialization.XmlElementAttribute("BaselineVersionFrameRef")]
        public BaselineVersionFrameRefStructure BaselineVersionFrameRef { get; set; }
        
        /// <summary>
        /// <para>CODE SPACES used in this frame. Normally there will be at least one.  A default may be specified in the Frame defaults.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("CODE SPACES used in this frame. Normally there will be at least one. A default ma" +
            "y be specified in the Frame defaults.")]
        [System.Xml.Serialization.XmlElementAttribute("codespaces")]
        public CodespacesRelStructure Codespaces { get; set; }
        
        /// <summary>
        /// <para>Set of default values to assume for values in the
        ///frame if not explicitly stated on individual
        ///elements.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Set of default values to assume for values in the frame if not explicitly stated " +
            "on individual elements.")]
        [System.Xml.Serialization.XmlElementAttribute("FrameDefaults")]
        public FrameDefaultsStructure FrameDefaults { get; set; }
        
        /// <summary>
        /// <para>Not part of EPIP. Formal definitions of VERSIONs included in frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not part of EPIP. Formal definitions of VERSIONs included in frame.")]
        [System.Xml.Serialization.XmlElementAttribute("versions")]
        public VersionsRelStructure Versions { get; set; }
        
        /// <summary>
        /// <para>Prerequisite VERSION FRAMEs containing elements  that this frame depends on.  +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Prerequisite VERSION FRAMEs containing elements that this frame depends on. +v1.1" +
            "")]
        [System.Xml.Serialization.XmlElementAttribute("prerequisites")]
        public PrerequisitesRelStructure Prerequisites { get; set; }
        
        /// <summary>
        /// <para>Shared VALIDITY CONDITIONs used by elements
        ///in the FRAME. Note, this is NOT the "dominant" FRAME validity condition!</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Shared VALIDITY CONDITIONs used by elements in the FRAME. Note, this is NOT the \"" +
            "dominant\" FRAME validity condition!")]
        [System.Xml.Serialization.XmlElementAttribute("contentValidityConditions")]
        public ContentValidityConditionsRelStructure ContentValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("ServiceCalendarFrameRef")]
        public ServiceCalendarFrameRefStructure ServiceCalendarFrameRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("blocks")]
        public BlocksRelStructure Blocks { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("coursesOfJourneys")]
        public CoursesOfJourneysRelStructure CoursesOfJourneys { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("vehicleServices")]
        public VehicleServicesRelStructure VehicleServices { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("JourneyPatternRunTimeStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("JourneyPatternRunTime", Namespace="http://www.netex.org.uk/netex")]
    public partial class JourneyPatternRunTimeStructure : IEntityAttributeGroup
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TimeDemandTypeRef")]
        public TimeDemandTypeRefStructure TimeDemandTypeRef { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TimingLinkRef")]
        public TimingLinkRefStructure TimingLinkRef { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("RunTime")]
        public string RunTime { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PointInJourneyPatternRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PointInJourneyPatternRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("waitTimes_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WaitTimesRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<JourneyPatternWaitTimeStructure> _journeyPatternWaitTime;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("JourneyPatternWaitTime")]
        public System.Collections.ObjectModel.Collection<JourneyPatternWaitTimeStructure> JourneyPatternWaitTime
        {
            get
            {
                return _journeyPatternWaitTime;
            }
            private set
            {
                _journeyPatternWaitTime = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="WaitTimesRelStructure" /> class.</para>
        /// </summary>
        public WaitTimesRelStructure()
        {
            this._journeyPatternWaitTime = new System.Collections.ObjectModel.Collection<JourneyPatternWaitTimeStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("JourneyPatternWaitTimeStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("JourneyPatternWaitTime", Namespace="http://www.netex.org.uk/netex")]
    public partial class JourneyPatternWaitTimeStructure : IEntityAttributeGroup
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TimeDemandTypeRef")]
        public TimeDemandTypeRefStructure TimeDemandTypeRef { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ScheduledStopPointRef")]
        public ScheduledStopPointRefStructure ScheduledStopPointRef { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("WaitTime")]
        public string WaitTime { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    /// <summary>
    /// <para>Type for a list of COUPLED JOURNEYS.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a list of COUPLED JOURNEYS.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("coupledJourneyRefs_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CoupledJourneyRefsRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<CoupledJourneyRefStructure> _coupledJourneyRef;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("CoupledJourneyRef")]
        public System.Collections.ObjectModel.Collection<CoupledJourneyRefStructure> CoupledJourneyRef
        {
            get
            {
                return _coupledJourneyRef;
            }
            private set
            {
                _coupledJourneyRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CoupledJourneyRefsRelStructure" /> class.</para>
        /// </summary>
        public CoupledJourneyRefsRelStructure()
        {
            this._coupledJourneyRef = new System.Collections.ObjectModel.Collection<CoupledJourneyRefStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CoupledJourneyRefStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("CoupledJourneyRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class CoupledJourneyRefStructure : IVersionOfObjectRefAttributeGroup
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of Class of the referenced entity. Allows reflection. Fixed for each entity " +
            "type.")]
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfRefClass")]
        public string NameOfRefClass { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when reference is Internal and a specific version is required. Mutually exclusive with versionRef</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when reference is Internal an" +
            "d a specific version is required. Mutually exclusive with versionRef")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, undchanged;</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, undchanged;")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModificationSpecified { get; set; }
        
        /// <summary>
        /// <para>Identifier of version of referenced entity. For use when refenece is External and a specific version is required. Mutually exclusive with version</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of version of referenced entity. For use when refenece is External and" +
            " a specific version is required. Mutually exclusive with version")]
        [System.Xml.Serialization.XmlAttributeAttribute("versionRef")]
        public string VersionRef { get; set; }
        
        /// <summary>
        /// <para>Identifier of referenced entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of referenced entity.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ref")]
        public string Ref { get; set; }
    }
    
    /// <summary>
    /// <para>Type for JOURNEY TIMING.</para>
    /// <para>A  time-related information referring to journey timing whose value depends on the time of use and so can be associated with a TIME DEMAND TYPE, TIME BAND or OPERATIONAL CONTEXT.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for JOURNEY TIMING.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("JourneyTimingStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("JourneyTiming", Namespace="http://www.netex.org.uk/netex")]
    public partial class JourneyTimingStructure : IVersionedChildElementGroup, IJourneyTimingGroup, IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="JourneyTimingStructure" /> class.</para>
        /// </summary>
        public JourneyTimingStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        /// <summary>
        /// <para>Name of JOURNEY TIMING.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of JOURNEY TIMING.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TimeDemandTypeRef")]
        public TimeDemandTypeRefStructure TimeDemandTypeRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TimebandRef")]
        public TimebandRefStructure TimebandRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("VehicleMode")]
        public AllModesEnumeration VehicleMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VehicleMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VehicleModeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("OperationalContextRef")]
        public OperationalContextRefStructure OperationalContextRef { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    /// <summary>
    /// <para>Type for a list of properties of TURNAROUND TIME LIMIT.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a list of properties of TURNAROUND TIME LIMIT.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("turnaroundTimeLimitTimesStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TurnaroundTimeLimitTimesStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TurnaroundTimeLimitTimeStructure> _turnaroundTimeLimitTime;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TurnaroundTimeLimitTime")]
        public System.Collections.ObjectModel.Collection<TurnaroundTimeLimitTimeStructure> TurnaroundTimeLimitTime
        {
            get
            {
                return _turnaroundTimeLimitTime;
            }
            private set
            {
                _turnaroundTimeLimitTime = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TurnaroundTimeLimitTimesStructure" /> class.</para>
        /// </summary>
        public TurnaroundTimeLimitTimesStructure()
        {
            this._turnaroundTimeLimitTime = new System.Collections.ObjectModel.Collection<TurnaroundTimeLimitTimeStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    /// <summary>
    /// <para>Type for TURNAROUND TIME LIMIT.</para>
    /// <para>The maximum time for which a vehicle may be scheduled to wait at a particular TIMING POINT (often included in a TURN STATION) without being returned to a PARKING POINT. A minimum time for a vehicle to turn its direction may also be recorded. This may be superseded by a DEAD RUN.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for TURNAROUND TIME LIMIT.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TurnaroundTimeLimitTimeStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TurnaroundTimeLimitTime", Namespace="http://www.netex.org.uk/netex")]
    public partial class TurnaroundTimeLimitTimeStructure : IVersionedChildElementGroup, IJourneyTimingGroup, ITurnaroundTimeLimitTimeGroup, IEntityAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TurnaroundTimeLimitTimeStructure" /> class.</para>
        /// </summary>
        public TurnaroundTimeLimitTimeStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        /// <summary>
        /// <para>Name of JOURNEY TIMING.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of JOURNEY TIMING.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public MultilingualString Name { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TimeDemandTypeRef")]
        public TimeDemandTypeRefStructure TimeDemandTypeRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("TimebandRef")]
        public TimebandRefStructure TimebandRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("VehicleMode")]
        public AllModesEnumeration VehicleMode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VehicleMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VehicleModeSpecified { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("OperationalContextRef")]
        public OperationalContextRefStructure OperationalContextRef { get; set; }
        
        /// <summary>
        /// <para>Minimum turnaround time as an interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Minimum turnaround time as an interval.")]
        [System.Xml.Serialization.XmlElementAttribute("MinimumDuration")]
        public string MinimumDuration { get; set; }
        
        /// <summary>
        /// <para>Maximum turnaround time as an interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Maximum turnaround time as an interval.")]
        [System.Xml.Serialization.XmlElementAttribute("MaximumDuration")]
        public string MaximumDuration { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional to be in line with the full NeTEx XSD...</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is normally a MANDATORY attribute in EPIP! Here defined as optional " +
            "to be in line with the full NeTEx XSD...")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
    }
    
    /// <summary>
    /// <para>TURNAROUND TIME LIMIT elements.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("TURNAROUND TIME LIMIT elements.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    public partial interface ITurnaroundTimeLimitTimeGroup
    {
        
        /// <summary>
        /// <para>Minimum turnaround time as an interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Minimum turnaround time as an interval.")]
        string MinimumDuration
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>Maximum turnaround time as an interval.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Maximum turnaround time as an interval.")]
        string MaximumDuration
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// <para>Type for a list of JOURNEY HEADWAY Interval.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a list of JOURNEY HEADWAY Interval.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("vehicleJourneyHeadwaysStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VehicleJourneyHeadwaysStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<JourneyHeadwayStructure> _vehicleJourneyHeadway;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("VehicleJourneyHeadway")]
        public System.Collections.ObjectModel.Collection<JourneyHeadwayStructure> VehicleJourneyHeadway
        {
            get
            {
                return _vehicleJourneyHeadway;
            }
            private set
            {
                _vehicleJourneyHeadway = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="VehicleJourneyHeadwaysStructure" /> class.</para>
        /// </summary>
        public VehicleJourneyHeadwaysStructure()
        {
            this._vehicleJourneyHeadway = new System.Collections.ObjectModel.Collection<JourneyHeadwayStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ArrivalInterchangeRule_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ArrivalInterchangeRuleVersionStructure : IDataManagedObjectElementGroup, IInterchangeBaseGroup, IDataManagedObjectAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> _validBetween;
        
        /// <summary>
        /// <para>Note: EPIP only allows a single ValidBetween object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note: EPIP only allows a single ValidBetween object.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure> ValidBetween
        {
            get
            {
                return _validBetween;
            }
            private set
            {
                _validBetween = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ValidBetween collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidBetweenSpecified
        {
            get
            {
                return (this.ValidBetween.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ArrivalInterchangeRuleVersionStructure" /> class.</para>
        /// </summary>
        public ArrivalInterchangeRuleVersionStructure()
        {
            this._validBetween = new System.Collections.ObjectModel.Collection<ValidBetweenVersionStructure>();
            this._keyList = new System.Collections.ObjectModel.Collection<KeyValueStructure>();
        }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject. EPIP restricts use of VALIDITY CONDITIONs to just a simple name.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public ValidityConditionsStructure ValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("alternativeTexts")]
        public AlternativeTextsStructure AlternativeTexts { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyValueStructure> _keyList;
        
        [System.Xml.Serialization.XmlArrayAttribute("keyList")]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValue", Namespace="http://www.netex.org.uk/netex")]
        public System.Collections.ObjectModel.Collection<KeyValueStructure> KeyList
        {
            get
            {
                return _keyList;
            }
            private set
            {
                _keyList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyListSpecified
        {
            get
            {
                return (this.KeyList.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BrandingRef")]
        public BrandingRefStructure BrandingRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.  Used for VDV compatibility.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Used for VDV compatibility.")]
        [System.Xml.Serialization.XmlElementAttribute("ExternalInterchangeRef")]
        public ExternalObjectRefStructure ExternalInterchangeRef { get; set; }
        
        /// <summary>
        /// <para>Reference to a CONNECTION Link over which the INTERCHANGE takes place.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a CONNECTION Link over which the INTERCHANGE takes place.")]
        [System.Xml.Serialization.XmlElementAttribute("ConnectionRef")]
        public ConnectionRefStructure ConnectionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("Priority")]
        public string Priority { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _staySeated = false;
        
        /// <summary>
        /// <para>Whether the passenger can remain in vehicle (i.e. block linking). Default is false: the passenger must change vehicles for this INTERCHANGE.
        ///Default is false.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Whether the passenger can remain in vehicle (i.e. block linking). Default is fals" +
            "e: the passenger must change vehicles for this INTERCHANGE. Default is false.")]
        [System.Xml.Serialization.XmlElementAttribute("StaySeated")]
        public bool StaySeated
        {
            get
            {
                return _staySeated;
            }
            set
            {
                _staySeated = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _crossBorder = false;
        
        /// <summary>
        /// <para>Whether INTERCHANGE  involves crossing an international border.
        /// Default is false.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Whether INTERCHANGE involves crossing an international border. Default is false.")]
        [System.Xml.Serialization.XmlElementAttribute("CrossBorder")]
        public bool CrossBorder
        {
            get
            {
                return _crossBorder;
            }
            set
            {
                _crossBorder = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _guaranteed = false;
        
        /// <summary>
        /// <para>Not in EPIP.            Whether INTERCHANGE is guaranteed. Default is false.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether INTERCHANGE is guaranteed. Default is false.")]
        [System.Xml.Serialization.XmlElementAttribute("Guaranteed")]
        public bool Guaranteed
        {
            get
            {
                return _guaranteed;
            }
            set
            {
                _guaranteed = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _advertised = true;
        
        /// <summary>
        /// <para>Not in EPIP.            Whether INTERCHANGE is advertised as an interchange. Default is true.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Whether INTERCHANGE is advertised as an interchange. Default is true" +
            ".")]
        [System.Xml.Serialization.XmlElementAttribute("Advertised")]
        public bool Advertised
        {
            get
            {
                return _advertised;
            }
            set
            {
                _advertised = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.            Standard wait time for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Standard wait time for INTERCHANGE.")]
        [System.Xml.Serialization.XmlElementAttribute("StandardWaitTime")]
        public string StandardWaitTime { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.            Maximum wait time for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum wait time for INTERCHANGE.")]
        [System.Xml.Serialization.XmlElementAttribute("MaximumWaitTime")]
        public string MaximumWaitTime { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.                         Maximum automatic wait time for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum automatic wait time for INTERCHANGE.")]
        [System.Xml.Serialization.XmlElementAttribute("MaximumAutomaticWaitTime")]
        public string MaximumAutomaticWaitTime { get; set; }
        
        /// <summary>
        /// <para>Standard transfer  duration for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Standard transfer duration for INTERCHANGE.")]
        [System.Xml.Serialization.XmlElementAttribute("StandardTransferTime")]
        public string StandardTransferTime { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.              Maximum transfer duration for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum transfer duration for INTERCHANGE.")]
        [System.Xml.Serialization.XmlElementAttribute("MinimumTransferTime")]
        public string MinimumTransferTime { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.              Maximum transfer duration for INTERCHANGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Maximum transfer duration for INTERCHANGE.")]
        [System.Xml.Serialization.XmlElementAttribute("MaximumTransferTime")]
        public string MaximumTransferTime { get; set; }
        
        /// <summary>
        /// <para>Filter Elements for an INTERCHANGE RULE.  Single Elements are Logically ANDed together . Multiple elements (e.g. Line) are Logically ORed with each other.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Filter Elements for an INTERCHANGE RULE. Single Elements are Logically ANDed toge" +
            "ther . Multiple elements (e.g. Line) are Logically ORed with each other.")]
        [System.Xml.Serialization.XmlElementAttribute("DistributorFilter")]
        public InterchangeFilterStructure DistributorFilter { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("arrivalInterchangeRules_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ArrivalInterchangeRulesRelStructure : IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ArrivalInterchangeRuleVersionStructure> _interchangeRule;
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("InterchangeRule")]
        public System.Collections.ObjectModel.Collection<ArrivalInterchangeRuleVersionStructure> InterchangeRule
        {
            get
            {
                return _interchangeRule;
            }
            private set
            {
                _interchangeRule = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ArrivalInterchangeRulesRelStructure" /> class.</para>
        /// </summary>
        public ArrivalInterchangeRulesRelStructure()
        {
            this._interchangeRule = new System.Collections.ObjectModel.Collection<ArrivalInterchangeRuleVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("LegalName", Namespace="http://www.netex.org.uk/netex")]
    public partial class LegalName : MultilingualString
    {
    }
    
    /// <summary>
    /// <para>Type for a string in a specified language.</para>
    /// <para>Description of contents.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a string in a specified language.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Description", Namespace="http://www.netex.org.uk/netex")]
    public partial class Description : MultilingualString
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("LinkSequenceProjectionRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class LinkSequenceProjectionRef : LinkSequenceRefStructure
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("LinkSequenceRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class LinkSequenceRef : LinkSequenceRefStructure
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Locale", Namespace="http://www.netex.org.uk/netex")]
    public partial class Locale : LocaleStructure
    {
    }
    
    /// <summary>
    /// <para>Type describing common locale dependent properties.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type describing common locale dependent properties.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("DefaultLocale", Namespace="http://www.netex.org.uk/netex")]
    public partial class DefaultLocale : LocaleStructure
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Name", Namespace="http://www.netex.org.uk/netex")]
    public partial class Name : MultilingualString
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("PlaceRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class PlaceRef : PlaceRefStructure
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("From", Namespace="http://www.netex.org.uk/netex")]
    public partial class From : PlaceRefStructure
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("QuayRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class QuayRef : QuayRefStructure
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ParentQuayRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ParentQuayRef : QuayRefStructure
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ResponsibilitySetRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ResponsibilitySetRef : ResponsibilitySetRefStructure
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("DefaultResponsibilitySetRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class DefaultResponsibilitySetRef : ResponsibilitySetRefStructure
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ScheduledStopPointRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ScheduledStopPointRef : ScheduledStopPointRefStructure
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("FromPointRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class FromPointRef : ScheduledStopPointRefStructure
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ServiceJourneyRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ServiceJourneyRef : ServiceJourneyRefStructure
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("FromJourneyRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class FromJourneyRef : ServiceJourneyRefStructure
    {
    }
    
    /// <summary>
    /// <para>Reference to a TEMPLATE VEHICLE JOURNEY. Note this actually a reference to a SERVICE JOURNEY</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Reference to a TEMPLATE VEHICLE JOURNEY. Note this actually a reference to a SERV" +
        "ICE JOURNEY")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TemplateServiceJourneyRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class TemplateServiceJourneyRef : ServiceJourneyRefStructure
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ServiceJourneyPattern", Namespace="http://www.netex.org.uk/netex")]
    public partial class ServiceJourneyPattern : JourneyPatternVersionStructure
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("JourneyPattern", Namespace="http://www.netex.org.uk/netex")]
    public partial class JourneyPattern : JourneyPatternVersionStructure
    {
    }
    
    /// <summary>
    /// <para>Not in EPIP, use JourneyPatternRef</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Not in EPIP, use JourneyPatternRef")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ServicePattern", Namespace="http://www.netex.org.uk/netex")]
    public partial class ServicePattern : JourneyPatternVersionStructure
    {
    }
    
    /// <summary>
    /// <para>Not in EPIP</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ServicePatternRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ServicePatternRef : JourneyPatternRefStructure
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("JourneyPatternRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class JourneyPatternRef : JourneyPatternRefStructure
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ShortName", Namespace="http://www.netex.org.uk/netex")]
    public partial class ShortName : MultilingualString
    {
    }
    
    /// <summary>
    /// <para>Reference to a STOP POINT IN SEQUENCE.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Reference to a STOP POINT IN SEQUENCE.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("StopPointInJourneyPatternRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class StopPointInJourneyPatternRef : StopPointInJourneyPatternRefStructure
    {
    }
    
    /// <summary>
    /// <para>Unclear in EPIP if this is to be used or not.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Unclear in EPIP if this is to be used or not.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("PointInJourneyPatternRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class PointInJourneyPatternRef : StopPointInJourneyPatternRefStructure
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Text", Namespace="http://www.netex.org.uk/netex")]
    public partial class Text : MultilingualString
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("To", Namespace="http://www.netex.org.uk/netex")]
    public partial class To : PlaceRefStructure
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ToJourneyRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ToJourneyRef : ServiceJourneyRefStructure
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ToPointRef", Namespace="http://www.netex.org.uk/netex")]
    public partial class ToPointRef : ScheduledStopPointRefStructure
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("WalkTransferDuration", Namespace="http://www.netex.org.uk/netex")]
    public partial class WalkTransferDuration : TransferDurationStructure
    {
    }
    
    /// <summary>
    /// <para>Type for TRANSFER DURATION.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for TRANSFER DURATION.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TransferDuration", Namespace="http://www.netex.org.uk/netex")]
    public partial class TransferDuration : TransferDurationStructure
    {
    }
    
    /// <summary>
    /// <para>A container VERSION FRAME that groups a set of content VERSION FRAMsE to which the same VALIDITY CONDITIONs have been assigned.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A container VERSION FRAME that groups a set of content VERSION FRAMsE to which th" +
        "e same VALIDITY CONDITIONs have been assigned.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CompositeFrame_VersionStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("CompositeFrame", Namespace="http://www.netex.org.uk/netex")]
    public partial class CompositeFrameVersionStructure : Netex.IVersionFrameGroup, Netex.IDataManagedObjectAttributeGroup
    {
        
        /// <summary>
        /// <para>Main construction in EPIP to express validity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Main construction in EPIP to express validity.")]
        [System.Xml.Serialization.XmlElementAttribute("ValidBetween")]
        public Netex.ValidBetweenVersionStructure ValidBetween { get; set; }
        
        /// <summary>
        /// <para>A ValidityCondition can be used to specify the conditional validity of a DataManagedObject, however EPIP restricts use of VALIDITY CONDITIONs to just a simple name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A ValidityCondition can be used to specify the conditional validity of a DataMana" +
            "gedObject, however EPIP restricts use of VALIDITY CONDITIONs to just a simple na" +
            "me.")]
        [System.Xml.Serialization.XmlElementAttribute("validityConditions")]
        public Netex.ValidityConditionsStructure ValidityConditions { get; set; }
        
        /// <summary>
        /// <para>Name of VERSION FRAME.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Name of VERSION FRAME.")]
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public Netex.MultilingualString Name { get; set; }
        
        /// <summary>
        /// <para>Description of VERSION FRAME contents.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Description of VERSION FRAME contents.")]
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public Netex.MultilingualString Description { get; set; }
        
        /// <summary>
        /// <para>Reference to a TYPE OF VERSION FRAME.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a TYPE OF VERSION FRAME.")]
        [System.Xml.Serialization.XmlElementAttribute("TypeOfFrameRef")]
        public Netex.TypeOfFrameRefStructure TypeOfFrameRef { get; set; }
        
        /// <summary>
        /// <para>Previous baseline VERSION FRAME that objects in this VERSION require.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Previous baseline VERSION FRAME that objects in this VERSION require.")]
        [System.Xml.Serialization.XmlElementAttribute("BaselineVersionFrameRef")]
        public Netex.BaselineVersionFrameRefStructure BaselineVersionFrameRef { get; set; }
        
        /// <summary>
        /// <para>CODE SPACES used in this frame. Normally there will be at least one.  A default may be specified in the Frame defaults.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("CODE SPACES used in this frame. Normally there will be at least one. A default ma" +
            "y be specified in the Frame defaults.")]
        [System.Xml.Serialization.XmlElementAttribute("codespaces")]
        public Netex.CodespacesRelStructure Codespaces { get; set; }
        
        /// <summary>
        /// <para>Set of default values to assume for values in the
        ///frame if not explicitly stated on individual
        ///elements.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Set of default values to assume for values in the frame if not explicitly stated " +
            "on individual elements.")]
        [System.Xml.Serialization.XmlElementAttribute("FrameDefaults")]
        public Netex.FrameDefaultsStructure FrameDefaults { get; set; }
        
        /// <summary>
        /// <para>Not part of EPIP. Formal definitions of VERSIONs included in frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not part of EPIP. Formal definitions of VERSIONs included in frame.")]
        [System.Xml.Serialization.XmlElementAttribute("versions")]
        public Netex.VersionsRelStructure Versions { get; set; }
        
        /// <summary>
        /// <para>Prerequisite VERSION FRAMEs containing elements  that this frame depends on.  +v1.1</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Prerequisite VERSION FRAMEs containing elements that this frame depends on. +v1.1" +
            "")]
        [System.Xml.Serialization.XmlElementAttribute("prerequisites")]
        public Netex.PrerequisitesRelStructure Prerequisites { get; set; }
        
        /// <summary>
        /// <para>Shared VALIDITY CONDITIONs used by elements
        ///in the FRAME. Note, this is NOT the "dominant" FRAME validity condition!</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Shared VALIDITY CONDITIONs used by elements in the FRAME. Note, this is NOT the \"" +
            "dominant\" FRAME validity condition!")]
        [System.Xml.Serialization.XmlElementAttribute("contentValidityConditions")]
        public Netex.ContentValidityConditionsRelStructure ContentValidityConditions { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("frames")]
        public FramesRelStructure Frames { get; set; }
        
        [System.Xml.Serialization.XmlAttributeAttribute("nameOfClass")]
        public string NameOfClass { get; set; }
        
        /// <summary>
        /// <para>Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the full NeTEx XSD.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Note that it is (normally) a MANDATORY attribute in EPIP! It is optional in the f" +
            "ull NeTEx XSD.")]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        /// <summary>
        /// <para>Type for identifier of a DATA SOURCE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Type for identifier of a DATA SOURCE.")]
        [System.Xml.Serialization.XmlAttributeAttribute("dataSourceRef")]
        public string DataSourceRef { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY was first created.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY was first created.")]
        [System.Xml.Serialization.XmlAttributeAttribute("created", DataType="dateTime")]
        public System.DateTime Created { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Created property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Date ENTITY or version was last changed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Date ENTITY or version was last changed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("changed", DataType="dateTime")]
        public System.DateTime Changed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Changed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangedSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Netex.ModificationEnumeration _modification = Netex.ModificationEnumeration.New;
        
        /// <summary>
        /// <para>Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationEnumeration.New)]
        [System.ComponentModel.DescriptionAttribute("Nature of last modification: new, revise, delete, unchanged, delta. Default is \"n" +
            "ew\".")]
        [System.Xml.Serialization.XmlAttributeAttribute("modification")]
        public Netex.ModificationEnumeration Modification
        {
            get
            {
                return _modification;
            }
            set
            {
                _modification = value;
            }
        }
        
        /// <summary>
        /// <para>Version number of entity.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Version number of entity.")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Netex.StatusEnumeration _status = Netex.StatusEnumeration.Active;
        
        /// <summary>
        /// <para>Whether ENTITY is currently in use. Default is "active". In EPIP only "active" is supported.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.StatusEnumeration.Active)]
        [System.ComponentModel.DescriptionAttribute("Whether ENTITY is currently in use. Default is \"active\". In EPIP only \"active\" is" +
            " supported.")]
        [System.Xml.Serialization.XmlAttributeAttribute("status")]
        public Netex.StatusEnumeration Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of this object from which this version of ENTITY was derived.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of this object from which this version of ENTITY was derived" +
            ".")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromVersionRef")]
        public string DerivedFromVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Version of frame from with which this version of ENTITY is compatibl" +
            "e. Assumes Frame of the same Id as current frame.")]
        [System.Xml.Serialization.XmlAttributeAttribute("compatibleWithVersionFrameVersionRef")]
        public string CompatibleWithVersionFrameVersionRef { get; set; }
        
        /// <summary>
        /// <para>Not in EPIP.    Identity of object from which this object of ENTITY was derived. Normally the same.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP. Identity of object from which this object of ENTITY was derived. Nor" +
            "mally the same.")]
        [System.Xml.Serialization.XmlAttributeAttribute("derivedFromObjectRef")]
        public string DerivedFromObjectRef { get; set; }
        
        /// <summary>
        /// <para>Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Reference to RESPONSIBILITY SET for managing the object. If absent, then responsi" +
            "bility is same as for containing context of this object.")]
        [System.Xml.Serialization.XmlAttributeAttribute("responsibilitySetRef")]
        public string ResponsibilitySetRef { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("frames_RelStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("frames", Namespace="http://www.netex.org.uk/netex")]
    public partial class FramesRelStructure : Netex.IModificationSetAttributeGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Netex.ResourceFrameVersionStructure> _resourceFrame;
        
        [System.Xml.Serialization.XmlElementAttribute("ResourceFrame")]
        public System.Collections.ObjectModel.Collection<Netex.ResourceFrameVersionStructure> ResourceFrame
        {
            get
            {
                return _resourceFrame;
            }
            private set
            {
                _resourceFrame = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ResourceFrame collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ResourceFrameSpecified
        {
            get
            {
                return (this.ResourceFrame.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="FramesRelStructure" /> class.</para>
        /// </summary>
        public FramesRelStructure()
        {
            this._resourceFrame = new System.Collections.ObjectModel.Collection<Netex.ResourceFrameVersionStructure>();
            this._serviceCalendarFrame = new System.Collections.ObjectModel.Collection<Netex.ServiceCalendarFrameVersionStructure>();
            this._siteFrame = new System.Collections.ObjectModel.Collection<Netex.SiteFrameVersionStructure>();
            this._serviceFrame = new System.Collections.ObjectModel.Collection<Netex.ServiceFrameVersionStructure>();
            this._timetableFrame = new System.Collections.ObjectModel.Collection<Netex.TimetableFrameVersionStructure>();
            this._vehicleScheduleFrame = new System.Collections.ObjectModel.Collection<Netex.VehicleScheduleFrameVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Netex.ServiceCalendarFrameVersionStructure> _serviceCalendarFrame;
        
        [System.Xml.Serialization.XmlElementAttribute("ServiceCalendarFrame")]
        public System.Collections.ObjectModel.Collection<Netex.ServiceCalendarFrameVersionStructure> ServiceCalendarFrame
        {
            get
            {
                return _serviceCalendarFrame;
            }
            private set
            {
                _serviceCalendarFrame = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ServiceCalendarFrame collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceCalendarFrameSpecified
        {
            get
            {
                return (this.ServiceCalendarFrame.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Netex.SiteFrameVersionStructure> _siteFrame;
        
        [System.Xml.Serialization.XmlElementAttribute("SiteFrame")]
        public System.Collections.ObjectModel.Collection<Netex.SiteFrameVersionStructure> SiteFrame
        {
            get
            {
                return _siteFrame;
            }
            private set
            {
                _siteFrame = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SiteFrame collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SiteFrameSpecified
        {
            get
            {
                return (this.SiteFrame.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Netex.ServiceFrameVersionStructure> _serviceFrame;
        
        [System.Xml.Serialization.XmlElementAttribute("ServiceFrame")]
        public System.Collections.ObjectModel.Collection<Netex.ServiceFrameVersionStructure> ServiceFrame
        {
            get
            {
                return _serviceFrame;
            }
            private set
            {
                _serviceFrame = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ServiceFrame collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceFrameSpecified
        {
            get
            {
                return (this.ServiceFrame.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Netex.TimetableFrameVersionStructure> _timetableFrame;
        
        [System.Xml.Serialization.XmlElementAttribute("TimetableFrame")]
        public System.Collections.ObjectModel.Collection<Netex.TimetableFrameVersionStructure> TimetableFrame
        {
            get
            {
                return _timetableFrame;
            }
            private set
            {
                _timetableFrame = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TimetableFrame collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimetableFrameSpecified
        {
            get
            {
                return (this.TimetableFrame.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Netex.VehicleScheduleFrameVersionStructure> _vehicleScheduleFrame;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("VehicleScheduleFrame")]
        public System.Collections.ObjectModel.Collection<Netex.VehicleScheduleFrameVersionStructure> VehicleScheduleFrame
        {
            get
            {
                return _vehicleScheduleFrame;
            }
            private set
            {
                _vehicleScheduleFrame = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the VehicleScheduleFrame collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VehicleScheduleFrameSpecified
        {
            get
            {
                return (this.VehicleScheduleFrame.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private Netex.ModificationSetEnumeration _modificationSet = Netex.ModificationSetEnumeration.All;
        
        /// <summary>
        /// <para>Whether this is a list of all (revise) or just changes.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(Netex.ModificationSetEnumeration.All)]
        [System.ComponentModel.DescriptionAttribute("Whether this is a list of all (revise) or just changes.")]
        [System.Xml.Serialization.XmlAttributeAttribute("modificationSet")]
        public Netex.ModificationSetEnumeration ModificationSet
        {
            get
            {
                return _modificationSet;
            }
            set
            {
                _modificationSet = value;
            }
        }
    }
    
    /// <summary>
    /// <para>A set of NeTEx objects as assembled by a publication request or other service. Provides a general purpose wrapper for NeTEx data content.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A set of NeTEx objects as assembled by a publication request or other service. Pr" +
        "ovides a general purpose wrapper for NeTEx data content.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("PublicationDeliveryStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("PublicationDelivery", Namespace="http://www.netex.org.uk/netex")]
    public partial class PublicationDeliveryStructure
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("PublicationTimestamp", DataType="dateTime")]
        public System.DateTime PublicationTimestamp { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ParticipantRef")]
        public string ParticipantRef { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("PublicationRequest")]
        public Netex.PublicationRequestStructure PublicationRequest { get; set; }
        
        /// <summary>
        /// <para>How often data in publication is refreshed.                                         Not in EPIP.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("How often data in publication is refreshed. Not in EPIP.")]
        [System.Xml.Serialization.XmlElementAttribute("PublicationRefreshInterval")]
        public string PublicationRefreshInterval { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Description")]
        public Netex.MultilingualString Description { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("dataObjects")]
        public DataObjectsStructure DataObjects { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _version = "1.0";
        
        [System.ComponentModel.DefaultValueAttribute("1.0")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    }
    
    /// <summary>
    /// <para>Type for a list of objects.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Type for a list of objects.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.910.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("dataObjectsStructure", Namespace="http://www.netex.org.uk/netex")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("dataObjects", Namespace="http://www.netex.org.uk/netex")]
    public partial class DataObjectsStructure
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<CompositeFrameVersionStructure> _compositeFrame;
        
        [System.Xml.Serialization.XmlElementAttribute("CompositeFrame")]
        public System.Collections.ObjectModel.Collection<CompositeFrameVersionStructure> CompositeFrame
        {
            get
            {
                return _compositeFrame;
            }
            private set
            {
                _compositeFrame = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the CompositeFrame collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CompositeFrameSpecified
        {
            get
            {
                return (this.CompositeFrame.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DataObjectsStructure" /> class.</para>
        /// </summary>
        public DataObjectsStructure()
        {
            this._compositeFrame = new System.Collections.ObjectModel.Collection<CompositeFrameVersionStructure>();
            this._resourceFrame = new System.Collections.ObjectModel.Collection<Netex.ResourceFrameVersionStructure>();
            this._serviceCalendarFrame = new System.Collections.ObjectModel.Collection<Netex.ServiceCalendarFrameVersionStructure>();
            this._siteFrame = new System.Collections.ObjectModel.Collection<Netex.SiteFrameVersionStructure>();
            this._serviceFrame = new System.Collections.ObjectModel.Collection<Netex.ServiceFrameVersionStructure>();
            this._timetableFrame = new System.Collections.ObjectModel.Collection<Netex.TimetableFrameVersionStructure>();
            this._vehicleScheduleFrame = new System.Collections.ObjectModel.Collection<Netex.VehicleScheduleFrameVersionStructure>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Netex.ResourceFrameVersionStructure> _resourceFrame;
        
        [System.Xml.Serialization.XmlElementAttribute("ResourceFrame")]
        public System.Collections.ObjectModel.Collection<Netex.ResourceFrameVersionStructure> ResourceFrame
        {
            get
            {
                return _resourceFrame;
            }
            private set
            {
                _resourceFrame = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ResourceFrame collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ResourceFrameSpecified
        {
            get
            {
                return (this.ResourceFrame.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Netex.ServiceCalendarFrameVersionStructure> _serviceCalendarFrame;
        
        [System.Xml.Serialization.XmlElementAttribute("ServiceCalendarFrame")]
        public System.Collections.ObjectModel.Collection<Netex.ServiceCalendarFrameVersionStructure> ServiceCalendarFrame
        {
            get
            {
                return _serviceCalendarFrame;
            }
            private set
            {
                _serviceCalendarFrame = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ServiceCalendarFrame collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceCalendarFrameSpecified
        {
            get
            {
                return (this.ServiceCalendarFrame.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Netex.SiteFrameVersionStructure> _siteFrame;
        
        [System.Xml.Serialization.XmlElementAttribute("SiteFrame")]
        public System.Collections.ObjectModel.Collection<Netex.SiteFrameVersionStructure> SiteFrame
        {
            get
            {
                return _siteFrame;
            }
            private set
            {
                _siteFrame = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SiteFrame collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SiteFrameSpecified
        {
            get
            {
                return (this.SiteFrame.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Netex.ServiceFrameVersionStructure> _serviceFrame;
        
        [System.Xml.Serialization.XmlElementAttribute("ServiceFrame")]
        public System.Collections.ObjectModel.Collection<Netex.ServiceFrameVersionStructure> ServiceFrame
        {
            get
            {
                return _serviceFrame;
            }
            private set
            {
                _serviceFrame = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ServiceFrame collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceFrameSpecified
        {
            get
            {
                return (this.ServiceFrame.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Netex.TimetableFrameVersionStructure> _timetableFrame;
        
        [System.Xml.Serialization.XmlElementAttribute("TimetableFrame")]
        public System.Collections.ObjectModel.Collection<Netex.TimetableFrameVersionStructure> TimetableFrame
        {
            get
            {
                return _timetableFrame;
            }
            private set
            {
                _timetableFrame = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TimetableFrame collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimetableFrameSpecified
        {
            get
            {
                return (this.TimetableFrame.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Netex.VehicleScheduleFrameVersionStructure> _vehicleScheduleFrame;
        
        /// <summary>
        /// <para>Not in EPIP</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Not in EPIP")]
        [System.Xml.Serialization.XmlElementAttribute("VehicleScheduleFrame")]
        public System.Collections.ObjectModel.Collection<Netex.VehicleScheduleFrameVersionStructure> VehicleScheduleFrame
        {
            get
            {
                return _vehicleScheduleFrame;
            }
            private set
            {
                _vehicleScheduleFrame = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the VehicleScheduleFrame collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VehicleScheduleFrameSpecified
        {
            get
            {
                return (this.VehicleScheduleFrame.Count != 0);
            }
        }
    }
}
